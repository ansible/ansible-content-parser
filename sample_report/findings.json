{"py/object": "ansible_risk_insight.findings.Findings", "metadata": {"type": "project", "name": "/var/tmp/Ansible-OpenShift-Provisioning", "version": "", "source": "", "download_url": "", "hash": "", "time_records": {"scandata_init": {"begin": "2023-08-15T17:35:41.593937", "end": "2023-08-15T17:35:41.593991", "elapsed": 5.4e-05}, "metadata_load": {"begin": "2023-08-15T17:35:41.593996", "end": "2023-08-15T17:35:41.599972", "elapsed": 0.005976}, "dependency_load": {"begin": "2023-08-15T17:35:41.599980", "end": "2023-08-15T17:35:41.599982", "elapsed": 2e-06}, "prm_load": {"begin": "2023-08-15T17:35:41.599984", "end": "2023-08-15T17:35:41.599985", "elapsed": 1e-06}, "target_load": {"begin": "2023-08-15T17:35:41.599987", "end": "2023-08-15T17:35:41.599988", "elapsed": 1e-06}, "apply_spec_rules": {"begin": "2023-08-15T17:35:42.764156", "end": "2023-08-15T17:35:42.764163", "elapsed": 7e-06}, "tree_construction": {"begin": "2023-08-15T17:35:42.764169", "end": "2023-08-15T17:35:42.880839", "elapsed": 0.11667}, "variable_resolution": {"begin": "2023-08-15T17:35:42.880853", "end": "2023-08-15T17:35:42.919753", "elapsed": 0.0389}, "module_annotators": {"begin": "2023-08-15T17:35:42.919766", "end": "2023-08-15T17:35:42.938362", "elapsed": 0.018596}, "apply_rules": {"begin": "2023-08-15T17:35:42.938372", "end": "2023-08-15T17:35:57.036942", "elapsed": 14.09857}}}, "dependencies": [], "root_definitions": {"definitions": {"collections": [], "projects": [{"py/object": "ansible_risk_insight.models.Repository", "type": "repository", "key": "", "name": "Ansible-OpenShift-Provisioning", "path": "Ansible-OpenShift-Provisioning/", "local_key": "", "my_collection_name": "", "playbooks": ["playbook playbook:playbooks/0_setup.yaml", "playbook playbook:playbooks/1_create_lpar.yaml", "playbook playbook:playbooks/2_create_kvm_host.yaml", "playbook playbook:playbooks/3_setup_kvm_host.yaml", "playbook playbook:playbooks/4_create_bastion.yaml", "playbook playbook:playbooks/5_setup_bastion.yaml", "playbook playbook:playbooks/6_create_nodes.yaml", "playbook playbook:playbooks/7_ocp_verification.yaml", "playbook playbook:playbooks/create_agents_and_wait_for_install_complete.yaml", "playbook playbook:playbooks/create_compute_node.yaml", "playbook playbook:playbooks/create_hosted_cluster.yaml", "playbook playbook:playbooks/delete_compute_node.yaml", "playbook playbook:playbooks/destroy_cluster_hypershift.yaml", "playbook playbook:playbooks/hypershift.yaml", "playbook playbook:playbooks/pre-existing_site.yaml", "playbook playbook:playbooks/reinstall_cluster.yaml", "playbook playbook:playbooks/setup_for_hypershift.yaml", "playbook playbook:playbooks/site.yaml", "playbook playbook:playbooks/test.yaml"], "roles": ["role role:add_hc_workers_to_haproxy_hypershift", "role role:approve_certs", "role role:attach_subscription", "role role:boot_agents_hypershift", "role role:check_dns", "role role:check_nodes", "role role:common", "role role:configure_storage", "role role:create_agentserviceconfig_hypershift", "role role:create_bastion", "role role:create_bastion_hypershift", "role role:create_bootstrap", "role role:create_compute_node", "role role:create_compute_nodes", "role role:create_control_nodes", "role role:create_hcp_InfraEnv_hypershift", "role role:create_inventory_setup_hypershift", "role role:create_kvm_host", "role role:create_lpar", "role role:delete_compute_node", "role role:delete_nodes", "role role:delete_resources_bastion_hypershift", "role role:delete_resources_kvm_host_hypershift", "role role:dns", "role role:dns_update", "role role:download_rootfs_hypershift", "role role:get_ocp", "role role:haproxy", "role role:httpd", "role role:install_mce_operator", "role role:install_packages", "role role:install_prereqs_bastion_hypershift", "role role:install_prerequisites_host_hypershift", "role role:macvtap", "role role:prep_kvm_guests", "role role:print_node_status", "role role:robertdebock.epel", "role role:robertdebock.openvpn", "role role:scale_nodepool_and_wait_for_workers_hypershift", "role role:set_firewall", "role role:set_inventory", "role role:setup_for_agents_hypershift", "role role:ssh_add_config", "role role:ssh_agent", "role role:ssh_copy_id", "role role:ssh_key_gen", "role role:ssh_ocp_key_gen", "role role:update_cfgs", "role role:update_ignition_files", "role role:wait_for_bootstrap", "role role:wait_for_cluster_operators", "role role:wait_for_hc_to_complete_hypershift", "role role:wait_for_install_complete", "role role:wait_for_node"], "target_playbook_path": "", "target_taskfile_path": "", "requirements": {}, "installed_collections_path": "", "installed_collections": [], "installed_roles_path": "", "installed_roles": [], "modules": [], "taskfiles": [], "inventories": [{"py/object": "ansible_risk_insight.models.Inventory", "type": "inventory", "name": ".gitignore", "defined_in": "inventories/default/group_vars/.gitignore", "inventory_type": "group_vars", "group_name": ".gitignore", "host_name": "", "variables": {}}, {"py/object": "ansible_risk_insight.models.Inventory", "type": "inventory", "name": "all.yaml", "defined_in": "inventories/default/group_vars/all.yaml.template", "inventory_type": "group_vars", "group_name": "all.yaml", "host_name": "", "variables": {}}, {"py/object": "ansible_risk_insight.models.Inventory", "type": "inventory", "name": ".gitignore", "defined_in": "inventories/default/host_vars/.gitignore", "inventory_type": "host_vars", "group_name": "", "host_name": ".gitignore", "variables": {}}, {"py/object": "ansible_risk_insight.models.Inventory", "type": "inventory", "name": "KVMhostname1-here.yaml", "defined_in": "inventories/default/host_vars/KVMhostname1-here.yaml.template", "inventory_type": "host_vars", "group_name": "", "host_name": "KVMhostname1-here.yaml", "variables": {}}, {"py/object": "ansible_risk_insight.models.Inventory", "type": "inventory", "name": "KVMhostname2-here.yaml", "defined_in": "inventories/default/host_vars/KVMhostname2-here.yaml.template", "inventory_type": "host_vars", "group_name": "", "host_name": "KVMhostname2-here.yaml", "variables": {}}, {"py/object": "ansible_risk_insight.models.Inventory", "type": "inventory", "name": "KVMhostname3-here.yaml", "defined_in": "inventories/default/host_vars/KVMhostname3-here.yaml.template", "inventory_type": "host_vars", "group_name": "", "host_name": "KVMhostname3-here.yaml", "variables": {}}], "version": "", "annotations": {}}], "roles": [{"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:add_hc_workers_to_haproxy_hypershift", "name": "add_hc_workers_to_haproxy_hypershift", "defined_in": "roles/add_hc_workers_to_haproxy_hypershift", "local_key": "role role:roles/add_hc_workers_to_haproxy_hypershift", "fqcn": "add_hc_workers_to_haproxy_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:approve_certs", "name": "approve_certs", "defined_in": "roles/approve_certs", "local_key": "role role:roles/approve_certs", "fqcn": "approve_certs", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:approve_certs#taskfile:roles/approve_certs/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {"approve_certs_cleanup": false}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:attach_subscription", "name": "attach_subscription", "defined_in": "roles/attach_subscription", "local_key": "role role:roles/attach_subscription", "fqcn": "attach_subscription", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:attach_subscription#taskfile:roles/attach_subscription/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:boot_agents_hypershift", "name": "boot_agents_hypershift", "defined_in": "roles/boot_agents_hypershift", "local_key": "role role:roles/boot_agents_hypershift", "fqcn": "boot_agents_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:boot_agents_hypershift#taskfile:roles/boot_agents_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:check_dns", "name": "check_dns", "defined_in": "roles/check_dns", "local_key": "role role:roles/check_dns", "fqcn": "check_dns", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:check_dns#taskfile:roles/check_dns/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:check_nodes", "name": "check_nodes", "defined_in": "roles/check_nodes", "local_key": "role role:roles/check_nodes", "fqcn": "check_nodes", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:check_nodes#taskfile:roles/check_nodes/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:common", "name": "common", "defined_in": "roles/common", "local_key": "role role:roles/common", "fqcn": "common", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:common#taskfile:roles/common/tasks/main.yaml", "taskfile role:common#taskfile:roles/common/tasks/print_ocp_node_status.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {"_vm_console": ""}, "variables": {"_vm_console": "console=ttyS0,115200n8"}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:configure_storage", "name": "configure_storage", "defined_in": "roles/configure_storage", "local_key": "role role:roles/configure_storage", "fqcn": "configure_storage", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_agentserviceconfig_hypershift", "name": "create_agentserviceconfig_hypershift", "defined_in": "roles/create_agentserviceconfig_hypershift", "local_key": "role role:roles/create_agentserviceconfig_hypershift", "fqcn": "create_agentserviceconfig_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_bastion", "name": "create_bastion", "defined_in": "roles/create_bastion", "local_key": "role role:roles/create_bastion", "fqcn": "create_bastion", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_bastion_hypershift", "name": "create_bastion_hypershift", "defined_in": "roles/create_bastion_hypershift", "local_key": "role role:roles/create_bastion_hypershift", "fqcn": "create_bastion_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_bootstrap", "name": "create_bootstrap", "defined_in": "roles/create_bootstrap", "local_key": "role role:roles/create_bootstrap", "fqcn": "create_bootstrap", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_bootstrap#taskfile:roles/create_bootstrap/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_compute_node", "name": "create_compute_node", "defined_in": "roles/create_compute_node", "local_key": "role role:roles/create_compute_node", "fqcn": "create_compute_node", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {"param_compute_node": null}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_compute_nodes", "name": "create_compute_nodes", "defined_in": "roles/create_compute_nodes", "local_key": "role role:roles/create_compute_nodes", "fqcn": "create_compute_nodes", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_control_nodes", "name": "create_control_nodes", "defined_in": "roles/create_control_nodes", "local_key": "role role:roles/create_control_nodes", "fqcn": "create_control_nodes", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_hcp_InfraEnv_hypershift", "name": "create_hcp_InfraEnv_hypershift", "defined_in": "roles/create_hcp_InfraEnv_hypershift", "local_key": "role role:roles/create_hcp_InfraEnv_hypershift", "fqcn": "create_hcp_InfraEnv_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_inventory_setup_hypershift", "name": "create_inventory_setup_hypershift", "defined_in": "roles/create_inventory_setup_hypershift", "local_key": "role role:roles/create_inventory_setup_hypershift", "fqcn": "create_inventory_setup_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_kvm_host", "name": "create_kvm_host", "defined_in": "roles/create_kvm_host", "local_key": "role role:roles/create_kvm_host", "fqcn": "create_kvm_host", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:create_lpar", "name": "create_lpar", "defined_in": "roles/create_lpar", "local_key": "role role:roles/create_lpar", "fqcn": "create_lpar", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:delete_compute_node", "name": "delete_compute_node", "defined_in": "roles/delete_compute_node", "local_key": "role role:roles/delete_compute_node", "fqcn": "delete_compute_node", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {"param_compute_node": null}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:delete_nodes", "name": "delete_nodes", "defined_in": "roles/delete_nodes", "local_key": "role role:roles/delete_nodes", "fqcn": "delete_nodes", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:delete_resources_bastion_hypershift", "name": "delete_resources_bastion_hypershift", "defined_in": "roles/delete_resources_bastion_hypershift", "local_key": "role role:roles/delete_resources_bastion_hypershift", "fqcn": "delete_resources_bastion_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:delete_resources_kvm_host_hypershift", "name": "delete_resources_kvm_host_hypershift", "defined_in": "roles/delete_resources_kvm_host_hypershift", "local_key": "role role:roles/delete_resources_kvm_host_hypershift", "fqcn": "delete_resources_kvm_host_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:dns", "name": "dns", "defined_in": "roles/dns", "local_key": "role role:roles/dns", "fqcn": "dns", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:dns#taskfile:roles/dns/tasks/initial-resolv.yaml", "taskfile role:dns#taskfile:roles/dns/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:dns_update", "name": "dns_update", "defined_in": "roles/dns_update", "local_key": "role role:roles/dns_update", "fqcn": "dns_update", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:dns_update#taskfile:roles/dns_update/tasks/add.yaml", "taskfile role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml", "taskfile role:dns_update#taskfile:roles/dns_update/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {"param_dns_cmd": "add", "param_dns_ip": null, "param_dns_hostname": null}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:download_rootfs_hypershift", "name": "download_rootfs_hypershift", "defined_in": "roles/download_rootfs_hypershift", "local_key": "role role:roles/download_rootfs_hypershift", "fqcn": "download_rootfs_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:get_ocp", "name": "get_ocp", "defined_in": "roles/get_ocp", "local_key": "role role:roles/get_ocp", "fqcn": "get_ocp", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:haproxy", "name": "haproxy", "defined_in": "roles/haproxy", "local_key": "role role:roles/haproxy", "fqcn": "haproxy", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:haproxy#taskfile:roles/haproxy/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:httpd", "name": "httpd", "defined_in": "roles/httpd", "local_key": "role role:roles/httpd", "fqcn": "httpd", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:httpd#taskfile:roles/httpd/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:install_mce_operator", "name": "install_mce_operator", "defined_in": "roles/install_mce_operator", "local_key": "role role:roles/install_mce_operator", "fqcn": "install_mce_operator", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:install_packages", "name": "install_packages", "defined_in": "roles/install_packages", "local_key": "role role:roles/install_packages", "fqcn": "install_packages", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:install_packages#taskfile:roles/install_packages/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:install_prereqs_bastion_hypershift", "name": "install_prereqs_bastion_hypershift", "defined_in": "roles/install_prereqs_bastion_hypershift", "local_key": "role role:roles/install_prereqs_bastion_hypershift", "fqcn": "install_prereqs_bastion_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:install_prerequisites_host_hypershift", "name": "install_prerequisites_host_hypershift", "defined_in": "roles/install_prerequisites_host_hypershift", "local_key": "role role:roles/install_prerequisites_host_hypershift", "fqcn": "install_prerequisites_host_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:macvtap", "name": "macvtap", "defined_in": "roles/macvtap", "local_key": "role role:roles/macvtap", "fqcn": "macvtap", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:macvtap#taskfile:roles/macvtap/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:prep_kvm_guests", "name": "prep_kvm_guests", "defined_in": "roles/prep_kvm_guests", "local_key": "role role:roles/prep_kvm_guests", "fqcn": "prep_kvm_guests", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": [], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:print_node_status", "name": "print_node_status", "defined_in": "roles/print_node_status", "local_key": "role role:roles/print_node_status", "fqcn": "print_node_status", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:print_node_status#taskfile:roles/print_node_status/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:robertdebock.epel", "name": "robertdebock.epel", "defined_in": "roles/robertdebock.epel", "local_key": "role role:roles/robertdebock.epel", "fqcn": "robertdebock.epel", "metadata": {"galaxy_info": {"author": "Robert de Bock", "namespace": "robertdebock", "role_name": "epel", "description": "Install epel on your system.", "license": "Apache-2.0", "company": "none", "min_ansible_version": "2.10", "platforms": [{"name": "Amazon", "versions": ["Candidate"]}, {"name": "EL", "versions": [7, 8]}], "galaxy_tags": ["epel", "repository", "installer", "packages"]}, "dependencies": []}, "collection": "", "playbooks": ["playbook playbook:roles/robertdebock.epel/molecule/default/converge.yml", "playbook playbook:roles/robertdebock.epel/molecule/default/prepare.yml", "playbook playbook:roles/robertdebock.epel/molecule/default/verify.yml"], "taskfiles": ["taskfile role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/assert.yml", "taskfile role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/main.yml"], "handlers": [{"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:robertdebock.epel#taskfile:roles/robertdebock.epel/handlers/main.yml", "name": "main.yml", "defined_in": "roles/robertdebock.epel/handlers/main.yml", "local_key": "taskfile taskfile:roles/robertdebock.epel/handlers/main.yml", "tasks": [{"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.epel#taskfile:roles/robertdebock.epel/handlers/main.yml#task:[0]", "name": "update package cache", "module": "ansible.builtin.package", "index": 0, "play_index": -1, "defined_in": "roles/robertdebock.epel/handlers/main.yml", "local_key": "task taskfile:roles/robertdebock.epel/handlers/main.yml#task:[0]", "role": "robertdebock.epel", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "update package cache"}, "module_options": {"update_cache": true}, "executable": "ansible.builtin.package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: update package cache\n  ansible.builtin.package:\n    update_cache: true", "line_num_in_file": [4, 7], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}}], "role": "robertdebock.epel", "collection": "", "yaml_lines": "---\n# handlers file for epel\n\n- name: update package cache\n  ansible.builtin.package:\n    update_cache: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}], "modules": [], "dependency": {"roles": [], "collections": []}, "requirements": {"roles": [{"name": "robertdebock.bootstrap"}], "collections": null}, "source": "", "annotations": {}, "default_variables": {}, "variables": {"_epel_version": {"default": "{{ ansible_distribution_major_version }}", "Amazon-2018": 6, "Amazon-2": 7}, "epel_version": "{{ _epel_version[ansible_distribution ~ '-' ~ ansible_distribution_major_version] | default(_epel_version['default'] ) }}", "epel_url": "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ epel_version }}.noarch.rpm", "epel_next_url": "https://dl.fedoraproject.org/pub/epel/epel-next-release-latest-{{ epel_version }}.noarch.rpm", "epel_gpg_key": "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ epel_version }}", "_epel_next": {"default": false, "Stream": true}, "epel_next": "{{ _epel_next[ansible_distribution_release] | default(_epel_next['default'] ) }}"}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:robertdebock.openvpn", "name": "robertdebock.openvpn", "defined_in": "roles/robertdebock.openvpn", "local_key": "role role:roles/robertdebock.openvpn", "fqcn": "robertdebock.openvpn", "metadata": {"galaxy_info": {"author": "Robert de Bock", "namespace": "robertdebock", "role_name": "openvpn", "description": "Install and configure openvpn server or client on your system.", "license": "Apache-2.0", "company": "none", "min_ansible_version": "2.10", "platforms": [{"name": "Amazon", "versions": ["Candidate"]}, {"name": "Debian", "versions": ["all"]}, {"name": "EL", "versions": [8]}, {"name": "Fedora", "versions": [35]}, {"name": "Debian", "versions": ["bullseye", "bookworm"]}, {"name": "Ubuntu", "versions": ["focal"]}], "galaxy_tags": ["openvpn"]}, "dependencies": []}, "collection": "", "playbooks": ["playbook playbook:roles/robertdebock.openvpn/molecule/default/converge.yml", "playbook playbook:roles/robertdebock.openvpn/molecule/default/prepare.yml", "playbook playbook:roles/robertdebock.openvpn/molecule/default/verify.yml"], "taskfiles": ["taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/assert.yml", "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/client.yml", "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml", "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml"], "handlers": [{"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/handlers/main.yml", "name": "main.yml", "defined_in": "roles/robertdebock.openvpn/handlers/main.yml", "local_key": "taskfile taskfile:roles/robertdebock.openvpn/handlers/main.yml", "tasks": [{"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/handlers/main.yml#task:[0]", "name": "restart openvpn", "module": "ansible.builtin.service", "index": 0, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/handlers/main.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/handlers/main.yml#task:[0]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "restart openvpn", "when": ["not ansible_check_mode | bool"]}, "module_options": {"name": "{{ openvpn_service }}", "state": "restarted"}, "executable": "ansible.builtin.service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: restart openvpn\n  ansible.builtin.service:\n    name: \"{{ openvpn_service }}\"\n    state: restarted\n  when:\n    - not ansible_check_mode | bool", "line_num_in_file": [4, 10], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}}], "role": "robertdebock.openvpn", "collection": "", "yaml_lines": "---\n# handlers file for openvpn\n\n- name: restart openvpn\n  ansible.builtin.service:\n    name: \"{{ openvpn_service }}\"\n    state: restarted\n  when:\n    - not ansible_check_mode | bool\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}], "modules": [], "dependency": {"roles": [], "collections": []}, "requirements": {"roles": [{"name": "robertdebock.bootstrap"}, {"name": "robertdebock.epel"}], "collections": null}, "source": "", "annotations": {}, "default_variables": {"openvpn_role": "server"}, "variables": {"_openvpn_packages": {"server": ["openvpn", "easy-rsa"], "client": ["openvpn"]}, "openvpn_packages": "{{ _openvpn_packages[openvpn_role] }}", "_openvpn_easyrsa_path": {"default": "/usr/share/easy-rsa/3", "Debian": "/usr/share/easy-rsa"}, "openvpn_easyrsa_path": "{{ _openvpn_easyrsa_path[ansible_os_family] | default(_openvpn_easyrsa_path['default'] ) }}", "_openvpn_group": {"default": "nobody", "Debian": "nogroup", "RedHat": "openvpn"}, "_openvpn_configuration_directory": {"client": {"default": "/etc/openvpn/client", "Debian": "/etc/openvpn", "RedHat-7": "/etc/openvpn"}, "server": {"default": "/etc/openvpn/server", "Debian": "/etc/openvpn", "RedHat-7": "/etc/openvpn"}}, "openvpn_configuration_directory": "{{ _openvpn_configuration_directory[openvpn_role][ansible_os_family ~ '-' ~ ansible_distribution_major_version] | default(_openvpn_configuration_directory[openvpn_role][ansible_os_family] | default(_openvpn_configuration_directory[openvpn_role]['default'] )) }}", "openvpn_group": "{{ _openvpn_group[ansible_os_family] | default(_openvpn_group['default'] ) }}", "_openvpn_service": {"server": {"default": "openvpn@server", "RedHat-7": "openvpn@server", "RedHat": "openvpn-server@server", "Ubuntu": "openvpn"}, "client": {"default": "openvpn@client", "RedHat-7": "openvpn@client", "RedHat": "openvpn-client@client", "Ubuntu": "openvpn"}}, "openvpn_service": "{{ _openvpn_service[openvpn_role][ansible_os_family ~ '-' ~ ansible_distribution_major_version] | default(_openvpn_service[openvpn_role][ansible_os_family] | default(_openvpn_service[openvpn_role]['default'] )) }}"}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:scale_nodepool_and_wait_for_workers_hypershift", "name": "scale_nodepool_and_wait_for_workers_hypershift", "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift", "local_key": "role role:roles/scale_nodepool_and_wait_for_workers_hypershift", "fqcn": "scale_nodepool_and_wait_for_workers_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:set_firewall", "name": "set_firewall", "defined_in": "roles/set_firewall", "local_key": "role role:roles/set_firewall", "fqcn": "set_firewall", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:set_inventory", "name": "set_inventory", "defined_in": "roles/set_inventory", "local_key": "role role:roles/set_inventory", "fqcn": "set_inventory", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:setup_for_agents_hypershift", "name": "setup_for_agents_hypershift", "defined_in": "roles/setup_for_agents_hypershift", "local_key": "role role:roles/setup_for_agents_hypershift", "fqcn": "setup_for_agents_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:ssh_add_config", "name": "ssh_add_config", "defined_in": "roles/ssh_add_config", "local_key": "role role:roles/ssh_add_config", "fqcn": "ssh_add_config", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:ssh_add_config#taskfile:roles/ssh_add_config/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:ssh_agent", "name": "ssh_agent", "defined_in": "roles/ssh_agent", "local_key": "role role:roles/ssh_agent", "fqcn": "ssh_agent", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:ssh_agent#taskfile:roles/ssh_agent/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:ssh_copy_id", "name": "ssh_copy_id", "defined_in": "roles/ssh_copy_id", "local_key": "role role:roles/ssh_copy_id", "fqcn": "ssh_copy_id", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:ssh_key_gen", "name": "ssh_key_gen", "defined_in": "roles/ssh_key_gen", "local_key": "role role:roles/ssh_key_gen", "fqcn": "ssh_key_gen", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:ssh_ocp_key_gen", "name": "ssh_ocp_key_gen", "defined_in": "roles/ssh_ocp_key_gen", "local_key": "role role:roles/ssh_ocp_key_gen", "fqcn": "ssh_ocp_key_gen", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:update_cfgs", "name": "update_cfgs", "defined_in": "roles/update_cfgs", "local_key": "role role:roles/update_cfgs", "fqcn": "update_cfgs", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:update_ignition_files", "name": "update_ignition_files", "defined_in": "roles/update_ignition_files", "local_key": "role role:roles/update_ignition_files", "fqcn": "update_ignition_files", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:update_ignition_files#taskfile:roles/update_ignition_files/tasks/main.yml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:wait_for_bootstrap", "name": "wait_for_bootstrap", "defined_in": "roles/wait_for_bootstrap", "local_key": "role role:roles/wait_for_bootstrap", "fqcn": "wait_for_bootstrap", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:wait_for_cluster_operators", "name": "wait_for_cluster_operators", "defined_in": "roles/wait_for_cluster_operators", "local_key": "role role:roles/wait_for_cluster_operators", "fqcn": "wait_for_cluster_operators", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml", "taskfile role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {"cluster_operators_ok": false}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:wait_for_hc_to_complete_hypershift", "name": "wait_for_hc_to_complete_hypershift", "defined_in": "roles/wait_for_hc_to_complete_hypershift", "local_key": "role role:roles/wait_for_hc_to_complete_hypershift", "fqcn": "wait_for_hc_to_complete_hypershift", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:wait_for_install_complete", "name": "wait_for_install_complete", "defined_in": "roles/wait_for_install_complete", "local_key": "role role:roles/wait_for_install_complete", "fqcn": "wait_for_install_complete", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {}, "loop": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Role", "type": "role", "key": "role role:wait_for_node", "name": "wait_for_node", "defined_in": "roles/wait_for_node", "local_key": "role role:roles/wait_for_node", "fqcn": "wait_for_node", "metadata": {}, "collection": "", "playbooks": [], "taskfiles": ["taskfile role:wait_for_node#taskfile:roles/wait_for_node/tasks/main.yaml"], "handlers": [], "modules": [], "dependency": {}, "requirements": {}, "source": "", "annotations": {}, "default_variables": {}, "variables": {"wait_for_node_name": null}, "loop": {}, "options": {}}], "taskfiles": [{"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml", "tasks": ["task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[0]", "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[1]", "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[2]", "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[3]", "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[4]"], "role": "add_hc_workers_to_haproxy_hypershift", "collection": "", "yaml_lines": "---\n- name: Get the IPs of Hosted Cluster Workers\n  shell: oc get no -o wide  --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig --no-headers|grep -i worker| awk '{print $6}'\n  register: hosted_workers\n\n- name: Configuring HAproxy for Hosted Cluster\n  blockinfile:\n    path: /etc/haproxy/haproxy.cfg\n    block: |\n      listen {{ hypershift.hcp.hosted_cluster_name }}-console\n          mode tcp\n          bind {{ hypershift.bastion_hypershift }}:443\n          bind {{ hypershift.bastion_hypershift }}:80\n\n- name: Add Hosted Cluster Worker IPs to Haproxy\n  lineinfile:\n    path: /etc/haproxy/haproxy.cfg\n    line: \"    server {{ hypershift.hcp.hosted_cluster_name }}-worker-{{item}} {{ hosted_workers.stdout_lines[item]}}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Kill the process on 443 port if present\n  shell: kill $(netstat -tlnp | grep \":443 \" | awk '{print $7}' | awk -F '/' '{print $1}')\n\n- name: restart haproxy\n  service:\n    name: haproxy.service\n    state: restarted\n    enabled: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 5, "success": 5, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:approve_certs#taskfile:roles/approve_certs/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/approve_certs/tasks/main.yaml", "local_key": "taskfile taskfile:roles/approve_certs/tasks/main.yaml", "tasks": ["task role:approve_certs#taskfile:roles/approve_certs/tasks/main.yaml#task:[0]", "task role:approve_certs#taskfile:roles/approve_certs/tasks/main.yaml#task:[1]"], "role": "approve_certs", "collection": "", "yaml_lines": "---\n- name: Cancel async 'approve_certs_task', if exists\n  tags: approve_certs\n  ansible.builtin.async_status:\n    jid: \"{{ approve_certs_task.ansible_job_id }}\"\n    mode: cleanup\n  failed_when: false\n  when: approve_certs_task is defined and approve_certs_cleanup\n\n- name: Approve all pending CSRs in the next 30 min (async task)\n  tags: approve_certs\n  ansible.builtin.shell: |\n    set -o pipefail\n    for i in {1..120} ; do\n        # Approve all pending requests\n        LIST=$(oc get csr 2> /dev/null | grep -i pending | awk '{print $1}')\n        [ ! -z \"${LIST}\" ] && echo \"${LIST}\" | xargs oc adm certificate approve || true\n        sleep 15\n    done\n  # Run for 30 min\n  async: 1800\n  poll: 0\n  register: approve_certs_task\n  when: not approve_certs_cleanup\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:attach_subscription#taskfile:roles/attach_subscription/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/attach_subscription/tasks/main.yaml", "local_key": "taskfile taskfile:roles/attach_subscription/tasks/main.yaml", "tasks": ["task role:attach_subscription#taskfile:roles/attach_subscription/tasks/main.yaml#task:[0]"], "role": "attach_subscription", "collection": "", "yaml_lines": "---\n- name: Register server with Red Hat\n  tags: attach_subscription\n  community.general.redhat_subscription:\n    state: present\n    username: \"{{ env.redhat.username }}\"\n    password: \"{{ env.redhat.password }}\"\n    auto_attach: true\n  register: registration\n  retries: 2\n  delay: 30\n  until: registration is not failed\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:boot_agents_hypershift#taskfile:roles/boot_agents_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/boot_agents_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/boot_agents_hypershift/tasks/main.yaml", "tasks": ["task role:boot_agents_hypershift#taskfile:roles/boot_agents_hypershift/tasks/main.yaml#task:[0]", "task role:boot_agents_hypershift#taskfile:roles/boot_agents_hypershift/tasks/main.yaml#task:[1]"], "role": "boot_agents_hypershift", "collection": "", "yaml_lines": "---\n- name: Create qemu image for agents\n  command: qemu-img create -f qcow2 /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-agent{{ item }}.qcow2 {{ hypershift.agents_parms.disk_size }}\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Boot Agents\n  shell: |\n    {% if hypershift.agents_parms.static_ip_parms.static_ip == true %}\n    mac_address=$(oc get NmStateConfig static-ip-nmstate-config-{{ hypershift.hcp.hosted_cluster_name }}-{{ item }} -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} -o json | jq -r '.spec.interfaces[] | .macAddress')\n    {% else %}\n    mac_address=\"{{ hypershift.agents_parms.agent_mac_addr[item] }}\"\n    {% endif %}\n\n    virt-install \\\n    --name \"{{ hypershift.hcp.hosted_cluster_name }}-agent-{{ item }}\" \\\n    --autostart \\\n    --ram=\"{{ hypershift.agents_parms.ram }}\" \\\n    --cpu host \\\n    --vcpus=\"{{ hypershift.agents_parms.vcpus }}\"  \\\n    --location \"/var/lib/libvirt/images/pxeboot/,kernel=kernel.img,initrd=initrd.img\" \\\n    --disk /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-agent{{ item }}.qcow2 \\\n    --network network:{{ env.bridge_name }},mac=$mac_address \\\n    --graphics none \\\n    --noautoconsole  \\\n    --wait=-1 \\\n    --extra-args \"rd.neednet=1 nameserver={{ hypershift.agents_parms.nameserver }}   coreos.live.rootfs_url=http://{{ hypershift.bastion_hypershift }}:8080/rootfs.img random.trust_cpu=on rd.luks.options=discard ignition.firstboot ignition.platform.id=metal console=tty1 console=ttyS1,115200n8 coreos.inst.persistent-kargs=console=tty1 console=ttyS1,115200n8\"\n  async: 3600\n  poll: 0\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:check_dns#taskfile:roles/check_dns/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "taskfile taskfile:roles/check_dns/tasks/main.yaml", "tasks": ["task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[0]", "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[1]", "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[2]", "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[3]", "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[4]", "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[5]", "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[6]", "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[7]", "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[8]"], "role": "check_dns", "collection": "", "yaml_lines": "---\n- name: Check internal cluster DNS resolution for the bastion\n  tags: check_dns, dns\n  shell: dig +short {{ env.bastion.networking.hostname }}.{{ env.bastion.networking.base_domain }} | tail -n1\n  register: bastion_lookup\n  failed_when: env.bastion.networking.ip != bastion_lookup.stdout\n\n- name: Check internal cluster DNS resolution for external API and apps services\n  tags: check_dns, dns\n  shell: dig +short {{ item }} | tail -n1\n  loop:\n    - api.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n    - apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n    - test.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n  register: services_lookup\n  failed_when: ((env.bastion.options.loadbalancer.on_bastion == True) and (env.bastion.networking.ip != services_lookup.stdout)) or ((env.bastion.options.loadbalancer.on_bastion\n    == False) and (env.bastion.options.loadbalancer.public_ip != services_lookup.stdout) )\n\n- name: Check internal cluster DNS resolution for internal API services\n  tags: check_dns, dns\n  shell: dig +short api-int.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }} | tail -n1\n  register: api_int_lookup\n  failed_when: ((env.bastion.options.loadbalancer.on_bastion == True) and (env.bastion.networking.ip != api_int_lookup.stdout)) or ((env.bastion.options.loadbalancer.on_bastion\n    == False) and (env.bastion.options.loadbalancer.private_ip != api_int_lookup.stdout) )\n\n- name: Check internal cluster DNS resolution for bootstrap\n  tags: check_dns, dns\n  shell: dig +short {{ env.cluster.nodes.bootstrap.hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }} | tail -n1\n  register: bootstrap_lookup\n  failed_when: env.cluster.nodes.bootstrap.ip != bootstrap_lookup.stdout\n\n- name: Print results from bootstrap lookup\n  tags: check_dns, dns\n  debug:\n    var: bootstrap_lookup.stdout\n\n- name: Check control nodes DNS resolution\n  tags: check_dns, dns\n  shell: dig +short {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}  | tail -n1\n  register: control_lookup\n  failed_when: env.cluster.nodes.control.ip[i] != control_lookup.stdout\n  with_sequence: start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Check compute nodes DNS resolution\n  tags: check_dns, dns\n  shell: dig +short {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}  | tail -n1\n  register: compute_lookup\n  failed_when: env.cluster.nodes.compute.ip[i] != compute_lookup.stdout\n  with_sequence: start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Check infrastructure nodes DNS resolution\n  tags: check_dns, dns\n  shell: dig +short {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}  | tail -n1\n  register: infra_lookup\n  failed_when: env.cluster.nodes.infra.ip[i] != infra_lookup.stdout\n  with_sequence: start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n\n- name: Check external DNS resolution from forwarder\n  tags: check_dns, dns\n  register: external_dns_check\n  failed_when: '\"server can\" in external_dns_check.stdout'\n  command: nslookup {{ item }}\n  loop:\n    - www.google.com\n    - www.ibm.com\n    - www.redhat.com\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 9, "success": 9, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:check_nodes#taskfile:roles/check_nodes/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/check_nodes/tasks/main.yaml", "local_key": "taskfile taskfile:roles/check_nodes/tasks/main.yaml", "tasks": ["task role:check_nodes#taskfile:roles/check_nodes/tasks/main.yaml#task:[0]", "task role:check_nodes#taskfile:roles/check_nodes/tasks/main.yaml#task:[1]"], "role": "check_nodes", "collection": "", "yaml_lines": "---\n- name: Get and print nodes status\n  ansible.builtin.include_tasks: \"{{ role_path }}/../common/tasks/print_ocp_node_status.yaml\"\n\n- name: Make sure control and compute nodes are 'Ready' before continuing (retry every 20s)\n  tags: check_nodes\n  ansible.builtin.shell: |\n    set -o pipefail\n    oc get nodes | grep \"^{{ node | lower }}\" | awk '{print $2}'\n  loop: \"{{ env.cluster.nodes.control.hostname + env.cluster.nodes.compute.hostname }}\"\n  loop_control:\n    loop_var: node\n  register: cmd_output\n  until: (\"Ready\" == cmd_output.stdout)\n  retries: 90\n  delay: 20\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:common#taskfile:roles/common/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/common/tasks/main.yaml", "local_key": "taskfile taskfile:roles/common/tasks/main.yaml", "tasks": ["task role:common#taskfile:roles/common/tasks/main.yaml#task:[0]", "task role:common#taskfile:roles/common/tasks/main.yaml#task:[1]"], "role": "common", "collection": "", "yaml_lines": "---\n- name: Gather facts\n  when: ansible_architecture is not defined\n  ansible.builtin.gather_facts:\n- name: Load variables based on architecture\n  ansible.builtin.include_vars: ../vars/{{ ansible_architecture }}/vars.yaml\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:common#taskfile:roles/common/tasks/print_ocp_node_status.yaml", "name": "print_ocp_node_status.yaml", "defined_in": "roles/common/tasks/print_ocp_node_status.yaml", "local_key": "taskfile taskfile:roles/common/tasks/print_ocp_node_status.yaml", "tasks": ["task role:common#taskfile:roles/common/tasks/print_ocp_node_status.yaml#task:[0]", "task role:common#taskfile:roles/common/tasks/print_ocp_node_status.yaml#task:[1]"], "role": "common", "collection": "", "yaml_lines": "---\n- name: Get and print OCP nodes status\n  block:\n    - name: Get OCP nodes status\n      # Print oc node status in such format:\n      # NAME        STATUS                     ROLES                  AGE     VERSION           KERNEL-VERSION                INTERNAL-IP\n      # master-1    Ready                      control-plane,master   35h     v1.25.4+77bec7a   4.18.0-372.40.1.el8_6.s390x   172.23.232.131\n      ansible.builtin.shell: |\n        set -o pipefail\n        oc get nodes -o wide | awk -F '  +' '{ printf \"%-24s %-26s %-22s %-7s %-17s %-29s %-15s\\n\", $1, $2, $3, $4, $5, $9, $6 }'\n      register: oc_get_nodes\n      changed_when: false\n\n    - name: Print OCP nodes status\n      ansible.builtin.debug:\n        var: oc_get_nodes.stdout_lines\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/configure_storage/tasks/main.yaml", "local_key": "taskfile taskfile:roles/configure_storage/tasks/main.yaml", "tasks": ["task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[0]", "task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[1]", "task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[2]", "task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[3]", "task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[4]"], "role": "configure_storage", "collection": "", "yaml_lines": "---\n#- name: Create a new partition.\n#  tags: configure_storage, storage_group_2, part\n#  community.general.parted:\n#    device: /dev/mapper/mpathb\n#    number: 1\n#    label: gpt\n#    state: present\n#    part_start: 2048MB\n#    part_end: 100%\n#    fs_type: xfs\n#  register: partition_status\n#  when: lpar.storage_group_2.name is defined and lpar.storage_group_2.auto_config == True\n#\n#- name: Print partition status.\n#  tags: configure_storage, storage_group_2, part\n#  debug:\n#    var: partition_status\n#  when: lpar.storage_group_2.name is defined and lpar.storage_group_2.auto_config == True\n#\n#- name: Reload partition table\n#  tags: configure_storage, storage_group_2, part\n#  command: partprobe\n#  when: lpar.storage_group_2.name is defined and lpar.storage_group_2.auto_config == True\n#\n#- name: Add storage_group_2 disk to existing volume group.\n#  tags: configure_storage, storage_group_2, pvcreate\n#  command: pvcreate /dev/mapper/mpathb1\n#  when: lpar.storage_group_2.name is defined and lpar.storage_group_2.auto_config == True\n#\n#- name: Extend logical volume group with new PV\n#  tags: configure_storage, storage_group_2, vgextend\n#  command: vgextend rhel_aoznode1 /dev/mapper/mpathb1 and lpar.storage_group_2.auto_config == True\n#  when: lpar.storage_group_2.name is defined and lpar.storage_group_2.auto_config == True\n#\n#- name: Extend the root logical volume to consume all remaining space in the volume group.\n#  tags: configure_storage, lvextend\n#  community.general.lvol:\n#    vg: \"rhel_{{ networking.hostname | lower }}\"\n#    lv: root\n#    size: +100%FREE\n#    resizefs: true\n\n- name: Create directory in <storage.pool_path> for this cluster's storage pool.\n  tags: configure_storage, pool\n  ansible.builtin.file:\n    path: \"{{ storage.pool_path }}/{{ env.cluster.networking.metadata_name }}\"\n    state: directory\n    owner: \"{{ ansible_user }}\"\n    group: qemu\n    seuser: system_u\n    setype: virt_image_t\n    mode: \"0770\"\n    recurse: true\n\n- name: Ensure qemu has execute permissions for all parent directories of the directory that will be used as a storage pool for this cluster.\n  tags: configure_storage, pool\n  file:\n    path: \"{{ storage.pool_path.split('/')[:i] | join('/') }}\"\n    state: directory\n    group: qemu\n    mode: g+x\n    recurse: false\n  loop: \"{{ range( 0, storage.pool_path.split('/') | length + 1 ) }}\"\n  loop_control:\n    extended: true\n    index_var: i\n    extended_allitems: false\n    label: \"{{ storage.pool_path.split('/')[:i] | join('/') }}\"\n  when: storage.pool_path.split('/')[:i] | join('/') != ''\n\n- name: Define a new storage pool\n  tags: configure_storage, pool\n  community.libvirt.virt_pool:\n    command: define\n    name: \"{{ env.cluster.networking.metadata_name }}-vdisk\"\n    xml: '{{ lookup ( \"template\", \"vdisk.xml.j2\" ) }}'\n\n- name: Set storage pool to active.\n  tags: configure_storage, pool\n  community.libvirt.virt_pool:\n    name: \"{{ env.cluster.networking.metadata_name }}-vdisk\"\n    state: active\n\n- name: Set storage pool to autostart.\n  tags: configure_storage, pool\n  community.libvirt.virt_pool:\n    name: \"{{ env.cluster.networking.metadata_name }}-vdisk\"\n    autostart: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 5, "success": 5, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "tasks": ["task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[0]", "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[1]", "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[2]", "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[3]", "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[4]", "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[5]", "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[6]"], "role": "create_agentserviceconfig_hypershift", "collection": "", "yaml_lines": "---\n- name: Get OCP Release Version\n  shell: curl -s {{ hypershift.asc.url_for_ocp_release_file }}  | awk '/machine-os / { print $2 }'\n  register: ocp_release_version\n\n- name: Create Config map mirror-config ( For updating AgentServiceConfig with the brew mirror information )\n  template:\n    src: mirror-config.yml.j2\n    dest: /root/ansible_workdir/mirror-config.yaml\n\n- name: Deploy Config map - mirror config\n  shell: oc apply -f /root/ansible_workdir/mirror-config.yaml\n\n- name: Create agenterviceconfig.yaml\n  template:\n    src: agent_service_config.yaml.j2\n    dest: /root/ansible_workdir/agentserviceconfig.yaml\n\n- name: Deploy AgentServiceConfig\n  command: oc apply -f /root/ansible_workdir/agentserviceconfig.yaml\n\n- name: Wait for Agent Service Deployment to be Succeeded\n  shell: oc get AgentServiceConfig agent -o json | jq -r '.status|.conditions[]|.status' | grep False | wc -l\n  register: asc\n  until: asc.stdout == '0'\n  retries: 60\n  delay: 20\n\n- name: Wait for MCE to be available\n  shell: oc get mce --no-headers | awk  '{print $2}'\n  register: mce_status\n  until: mce_status.stdout == \"Available\"\n  retries: 40\n  delay: 10\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 7, "success": 7, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_bastion/tasks/main.yaml", "tasks": ["task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[0]", "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[1]", "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[2]", "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[3]", "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[4]", "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[5]", "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[6]", "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[7]", "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[8]", "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[9]"], "role": "create_bastion", "collection": "", "yaml_lines": "---\n- name: Create a directory on the KVM host server for bastion configuration files\n  become: false\n  tags: create_bastion\n  ansible.builtin.file:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}\"\n    mode: \"0755\"\n    state: directory\n\n- name: Copy template kickstart file to KVM host server\n  tags: create_bastion\n  become: false\n  ansible.builtin.template:\n    src: bastion-ks.cfg.j2\n    dest: \"{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg\"\n    mode: \"0644\"\n    force: true\n\n- name: Create hash from bastion's root password to input in kickstart file\n  tags: create_bastion\n  ansible.builtin.shell: |\n    set -o pipefail\n    echo \"{{ env.bastion.access.root_pass }}\" | openssl passwd -6 -in -\n  register: root_pass_hash\n\n- name: Add hashed root password to bastion's RHEL kickstart config file\n  tags: create_bastion\n  become: false\n  ansible.builtin.lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg\"\n    insertafter: Root password\n    line: rootpw --iscrypted {{ root_pass_hash.stdout }}\n\n- name: Create hash from bastion user password to input in kickstart file\n  tags: create_bastion\n  ansible.builtin.shell: |\n    set -o pipefail\n    echo \"{{ env.bastion.access.pass }}\" | openssl passwd -6 -in -\n  register: user_pass_hash\n\n- name: Add hashed user password to bastion's RHEL kickstart config file\n  tags: create_bastion\n  become: false\n  ansible.builtin.lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg\"\n    insertafter: Users and Groups Definitions\n    line: user --groups=wheel --name={{ env.bastion.access.user }} --password={{ user_pass_hash.stdout }} --iscrypted\n\n- name: Get KVM host home for use in next step\n  tags: create_bastion, virt-install\n  become: false\n  ansible.builtin.command: pwd\n  register: kvm_host_home\n\n- name: Boot and kickstart bastion. To monitor, login to your KVM host and run 'virsh console <bastion VM name>'\n  tags: create_bastion, virt-install\n  ansible.builtin.shell: |\n    virsh destroy {{ env.bastion.vm_name }} || true\n    virsh undefine {{ env.bastion.vm_name }} --remove-all-storage || true\n    virt-install \\\n    --name {{ env.bastion.vm_name }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --memory={{ env.bastion.resources.ram }} \\\n    --vcpus={{ env.bastion.resources.vcpu }} \\\n    --location {{ env.file_server.protocol }}://{{ env.file_server.user + ':' + env.file_server.pass + '@' if env.file_server.protocol == 'ftp' else '' }}{{ env.file_server.ip }}/{{ env.file_server.iso_mount_dir }} \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.bastion.resources.disk_size }} \\\n    --network network={{ env.bridge_name }} \\\n    --graphics none \\\n    --console pty,target_type=serial \\\n    --noautoconsole --wait=-1 \\\n    --initrd-inject \"/{{ kvm_host_home.stdout }}/{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg\" \\\n    --extra-args \"inst.ks=file:/bastion-ks.cfg ip={{ env.bastion.networking.ip }}::{{ env.bastion.networking.gateway }}\\\n    :{{ env.bastion.networking.subnetmask }}:{{ env.bastion.networking.hostname }}::none {{ _vm_console }}\"\n  timeout: 420\n  register: cmd_output\n\n- name: Debug, print above command output\n  tags: create_bastion, virt-install\n  ansible.builtin.debug:\n    var: cmd_output\n\n- name: Waiting 1 minute for automated bastion installation and configuration to complete\n  tags: create_bastion, virt-install\n  ansible.builtin.pause:\n    minutes: 1\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 10, "success": 10, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_bastion_hypershift/tasks/main.yaml", "tasks": ["task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[0]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[1]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[2]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[3]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[4]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[5]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[6]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[7]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[8]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[9]", "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[10]"], "role": "create_bastion_hypershift", "collection": "", "yaml_lines": "---\n- name: Get ssh key of local host\n  ansible.builtin.shell: cat {{ lookup('env', 'HOME') }}/.ssh/{{ env.ansible_key_name }}.pub\n  register: ssh_output\n  delegate_to: localhost\n\n- name: Load ssh_key into a variable\n  set_fact:\n    ssh_key: \"{{ ssh_output.stdout_lines[0] }}\"\n\n- name: Create Directory for images and bastion.ks\n  file:\n    path: /home/libvirt/images/\n    recurse: true\n    state: directory\n\n- name: Create bastion.ks file\n  template:\n    src: ../create_bastion/templates/bastion-ks.cfg.j2\n    dest: /home/libvirt/bastion.ks\n\n- name: Removing network configurations\n  lineinfile:\n    path: /home/libvirt/bastion.ks\n    state: absent\n    regexp: ^network*\n\n- name: Adding root password for bastion to bastion.ks\n  lineinfile:\n    path: /home/libvirt/bastion.ks\n    insertafter: ^lang.*\n    line: rootpw {{ bastion_root_pw }}\n\n- name: Adding ssh key to bastion\n  blockinfile:\n    path: /home/libvirt/bastion.ks\n    insertafter: ^echo.*\n    block: |\n      mkdir -p /root/.ssh\n      echo \"{{ ssh_key }}\" > /root/.ssh/authorized_keys\n      chmod 0700 /root/.ssh\n      chmod 0600 /root/.ssh/authorized_keys\n\n- name: Create qemu image for bastion\n  command: qemu-img create -f qcow2 /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-bastion.qcow2 100G\n\n- name: Create bastion\n  shell: |\n    virt-install \\ \n    --name {{ hypershift.hcp.hosted_cluster_name }}-bastion \\\n    --memory 4096 \\\n    --vcpus sockets=1,cores=4,threads=1 \\\n    --disk /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-bastion.qcow2,format=qcow2,bus=virtio,cache=none \\\n    --os-variant \"rhel{{hypershift.bastion_parms.os_variant}}\" \\\n    --network network:{{ env.bridge_name }} \\\n    --location '{{ env.file_server.protocol }}://{{ env.file_server.user + ':' + env.file_server.pass + '@' if env.file_server.protocol == 'ftp' else '' }}{{ env.file_server.ip }}/{{ env.file_server.iso_mount_dir }}/' \\\n    --rng=/dev/urandom --initrd-inject /home/libvirt/bastion.ks \\\n    --extra-args=\"ks=file:/bastion.ks ip={{ hypershift.bastion_hypershift }}::{{hypershift.bastion_parms.gateway}}:{{hypershift.bastion_parms.subnet_mask}}:{{ hypershift.bastion_parms.hostname }}.{{ hypershift.bastion_parms.base_domain }}:{{ hypershift.bastion_parms.interface }}:none console=ttysclp0 nameserver={{hypershift.bastion_parms.nameserver}}\" \\\n    --noautoconsole \\\n    --wait -1\n\n- name: Waiting 1 minute for automated bastion installation and configuration to complete\n  ansible.builtin.pause:\n    minutes: 1\n\n- name: Add route to bastion from kvm_host\n  command: ip route add {{ hypershift.bastion_hypershift }} via {{ hypershift.gateway }}\n  ignore_errors: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 11, "success": 11, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_bootstrap#taskfile:roles/create_bootstrap/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_bootstrap/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_bootstrap/tasks/main.yaml", "tasks": ["task role:create_bootstrap#taskfile:roles/create_bootstrap/tasks/main.yaml#task:[0]", "task role:create_bootstrap#taskfile:roles/create_bootstrap/tasks/main.yaml#task:[1]"], "role": "create_bootstrap", "collection": "", "yaml_lines": "---\n# Always creates a new bootstrap VM\n- name: Start bootstrap installation\n  tags: create_bootstrap\n  ansible.builtin.shell: |\n    virsh destroy {{ env.cluster.nodes.bootstrap.vm_name }} || true\n    virsh undefine {{ env.cluster.nodes.bootstrap.vm_name }} --remove-all-storage || true\n    virt-install \\\n    --name {{ env.cluster.nodes.bootstrap.vm_name }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.bootstrap.disk_size }}  \\\n    --ram {{ env.cluster.nodes.bootstrap.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.bootstrap.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \\\n    coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} \\\n    ip={{ env.cluster.nodes.bootstrap.ip }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.bootstrap.hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}::none:1500 \\\n    nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} \\\n    coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/bootstrap.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --console pty,target_type=serial \\\n    --wait=-1 \\\n    --noautoconsole\n  timeout: 300\n  register: cmd_output\n\n- name: Debug, print above command output\n  tags: create_bootstrap\n  ansible.builtin.debug:\n    var: cmd_output\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_compute_node/tasks/main.yaml", "tasks": ["task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[0]", "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[1]", "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[2]", "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[3]", "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[4]", "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[5]", "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[6]", "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[7]", "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[8]"], "role": "create_compute_node", "collection": "", "yaml_lines": "---\n# Paranoia check. This task should be executed only from ONE host\n- name: Check role/task parameters\n  tags: create_compute_node\n  ansible.builtin.fail:\n    msg: \"Error: too many hosts defined in ansible play: {{ ansible_play_hosts }}\"\n  when: ((ansible_play_hosts | length)  > 1)\n\n- name: If not available, download Red Hat CoreOS rootfs for {{ param_compute_node.host_arch }}\n  tags: create_compute_node\n  delegate_to: \"{{ groups['bastion'][0] }}\"\n  # Need sudo or root access to write the file\n  become: true\n  block:\n    - name: Load variables based on target architecture\n      ansible.builtin.include_vars: \"{{ role_path }}/../common/vars/{{ param_compute_node.host_arch }}/vars.yaml\"\n\n    - name: If not available, download Red Hat CoreOS rootfs file {{ rhcos_live_rootfs }}\n      ansible.builtin.get_url:\n        url: \"{{ item.baseurl }}{{ item.file }}\"\n        dest: /var/www/html/bin/{{ item.file }}\n        mode: \"0644\"\n      loop:\n        - { baseurl: \"{{ rhcos_download_url }}\", file: \"{{ rhcos_live_rootfs }}\" }\n\n- name: Create compute node on KVM host {{ param_compute_node.hostname }}\n  tags: create_compute_node\n  delegate_to: \"{{ param_compute_node.hostname }}\"\n  block:\n    - name: Delete compute node VM, if already exists\n      tags: create_compute_node\n      ansible.builtin.shell: |\n        virsh destroy {{ param_compute_node.vm_name }} || true\n        virsh undefine {{ param_compute_node.vm_name }} --remove-all-storage || true\n\n    - name: Get and print virsh list\n      block:\n        - name: Get virsh list\n          community.libvirt.virt:\n            command: list_vms\n          register: cmd_virsh_list\n        - name: Print virsh list\n          ansible.builtin.debug:\n            var: cmd_virsh_list\n\n    - name: Create compute node VM and print results\n      block:\n        - name: Load variables based on architecture\n          ansible.builtin.include_vars: \"{{ role_path }}/../common/vars/{{ param_compute_node.host_arch }}/vars.yaml\"\n\n        - name: Create compute node VM on {{ param_compute_node.host_arch }}\n          ansible.builtin.shell: |\n            virt-install \\\n            --name {{ param_compute_node.vm_name }} \\\n            --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n            --autostart \\\n            --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.compute.disk_size }}  \\\n            --ram {{ env.cluster.nodes.compute.ram }} \\\n            --cpu host \\\n            --vcpus {{ env.cluster.nodes.compute.vcpu }} \\\n            --network network={{ env.bridge_name }} \\\n            --graphics none \\\n            --console pty,target_type=serial \\\n            --wait -1 \\\n            --noautoconsole \\\n            --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n            --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \\\n            ip={{ param_compute_node.vm_ip }}::{{ env.bastion.networking.gateway }}:{{ env.bastion.networking.subnetmask }}:{{ param_compute_node.vm_hostname }}::none:1500 \\\n            nameserver={{ env.cluster.networking.nameserver1 }}{{ (',' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} \\\n            coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} \\\n            coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\"\n          timeout: 300\n          register: cmd_output\n        - name: Debug, print above command output\n          ansible.builtin.debug:\n            var: cmd_output\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 9, "success": 9, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_compute_nodes/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_compute_nodes/tasks/main.yaml", "tasks": ["task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[0]", "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[1]", "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[2]", "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[3]", "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[4]", "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[5]"], "role": "create_compute_nodes", "collection": "", "yaml_lines": "---\n- name: Install CoreOS on compute nodes\n  tags: create_compute_nodes\n  shell: |\n    virsh destroy {{ env.cluster.nodes.compute.vm_name[i] }} || true\n    virsh undefine {{ env.cluster.nodes.compute.vm_name[i] }} --remove-all-storage || true\n    virt-install \\\n    --name {{ env.cluster.nodes.compute.vm_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.compute.disk_size }}  \\\n    --ram {{ env.cluster.nodes.compute.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.compute.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.compute.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.compute.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n    --wait=-1 \\\n    --noautoconsole\n  timeout: 300\n  with_sequence: start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname\n\n- name: Install CoreOS on infra nodes\n  tags: create_compute_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.infra.vm_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.infra.disk_size }}  \\\n    --ram {{ env.cluster.nodes.infra.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.infra.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.infra.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.infra.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n    --wait=-1 \\\n    --noautoconsole\n  with_sequence: start=0 end={{ ( env.cluster.nodes.infra.hostname | length ) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined and env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname\n\n#If cluster is to be highly available, split control and infra nodes into lists corresponding to their future KVM hosts.\n\n- name: Split information from compute nodes into groups. The number of groups being equal to the number of KVM hosts there are.\n  tags: create_compute_nodes\n  set_fact:\n    compute_name: \"{{ env.cluster.nodes.compute.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n    compute_hostname: \"{{ env.cluster.nodes.compute.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n    compute_ip: \"{{ env.cluster.nodes.compute.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n  when: env.z.high_availability == True\n\n- name: Split information for infra nodes into groups. The number of groups being equal to the number of KVM hosts there are.\n  tags: create_compute_nodes\n  set_fact:\n    infra_name: \"{{ env.cluster.nodes.infra.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n    infra_hostname: \"{{ env.cluster.nodes.infra.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n    infra_ip: \"{{ env.cluster.nodes.infra.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n  when: env.z.high_availability == True and env.cluster.nodes.infra.hostname is defined\n\n- name: Create CoreOS compute nodes on KVM hosts, if cluster is to be highly available.\n  tags: create_compute_nodes\n  shell: |\n    virt-install \\\n    --name {{ compute_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.compute.disk_size }}  \\\n    --ram {{ env.cluster.nodes.compute.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.compute.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ compute_ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ compute_hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n    --wait=-1 \\\n    --noautoconsole\n  loop: \"{{ compute_name | zip(compute_hostname, compute_ip) | list }}\"\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.z.high_availability == True and compute_hostname[i] is defined\n\n- name: Create CoreOS infra nodes on KVM hosts, if cluster is to be highly available.\n  tags: create_compute_nodes\n  shell: |\n    virt-install \\\n    --name {{ infra_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.infra.disk_size }}  \\\n    --ram {{ env.cluster.nodes.infra.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.infra.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ infra_ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ infra_hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n    --wait=-1 \\\n    --noautoconsole\n  loop: \"{{ infra_name | zip(infra_hostname, infra_ip) | list }}\"\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined and infra_hostname[i] is defined and env.z.high_availability == True\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 6, "success": 6, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_control_nodes/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_control_nodes/tasks/main.yaml", "tasks": ["task role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml#task:[0]", "task role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml#task:[1]", "task role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml#task:[2]", "task role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml#task:[3]"], "role": "create_control_nodes", "collection": "", "yaml_lines": "---\n- name: Create CoreOS control nodes on the the KVM host.\n  tags: create_control_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.control.vm_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }} \\\n    --ram {{ env.cluster.nodes.control.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.control.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --console pty,target_type=serial \\\n    --wait=-1 \\\n    --noautoconsole\n  timeout: 300\n  with_sequence: start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname\n\n- name: Create the first CoreOS control node on the first KVM host, if cluster is to be highly available.\n  tags: create_control_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.control.vm_name[0] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }}  \\\n    --ram {{ env.cluster.nodes.control.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.control.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[0] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[0] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --wait=-1 \\\n    --noautoconsole\n  when: env.z.high_availability == True and inventory_hostname == env.z.lpar1.hostname\n\n- name: Create the second CoreOS control node on the second KVM host, if cluster is to be highly available.\n  tags: create_control_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.control.vm_name[1] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }}  \\\n    --ram {{ env.cluster.nodes.control.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.control.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[1] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[1] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --wait=-1 \\\n    --noautoconsole\n  when: env.z.high_availability == True and inventory_hostname == env.z.lpar2.hostname\n\n- name: Create the third CoreOS control node on the third KVM host, if cluster is to be highly available.\n  tags: create_control_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.control.vm_name[2] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }}  \\\n    --ram {{ env.cluster.nodes.control.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.control.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[2] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[2] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --wait=-1 \\\n    --noautoconsole\n  when: env.z.high_availability == True and inventory_hostname == env.z.lpar3.hostname\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 4, "success": 4, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "tasks": ["task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[0]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[1]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[2]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[3]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[4]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[5]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[6]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[7]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[8]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[9]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[10]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[11]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[12]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[13]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[14]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[15]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[16]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[17]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[18]", "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[19]"], "role": "create_hcp_InfraEnv_hypershift", "collection": "", "yaml_lines": "---\n- name: Getting Hosted Control Plane Namespace\n  set_fact:\n    hosted_control_plane_namespace: \"{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}\"\n\n- name: Check if Hosted Control Plane Namespace exists\n  k8s_info:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hosted_control_plane_namespace }}\"\n  register: namespace_check\n  ignore_errors: true\n\n- name: Create Hosted Control Plane Namespace\n  k8s:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hosted_control_plane_namespace }}\"\n    state: present\n  when: namespace_check.resources | length == 0\n\n- name: Get ssh key\n  ansible.builtin.shell: cat ~/.ssh/{{ env.ansible_key_name }}.pub\n  register: ssh_output\n\n- name: Load ssh_key into a variable\n  set_fact:\n    ssh_key: \"{{ ssh_output.stdout_lines[0] }}\"\n\n- name: Get pod name for hypershift-cli-download\n  kubernetes.core.k8s_info:\n    api_version: v1\n    kind: Pod\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    label_selectors:\n      - app= hypershift-cli-download\n  register: hypershift_pod_name\n\n- name: Get hypershift.tar.gz file from pod\n  kubernetes.core.k8s_cp:\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    pod: \"{{ hypershift_pod_name.resources[0].metadata.name }}\"\n    remote_path: /opt/app-root/src/linux/s390x/\n    local_path: /root/ansible_workdir\n    state: from_pod\n\n- name: Extract binary from hypershift.tar.gz\n  unarchive:\n    src: /root/ansible_workdir/hypershift.tar.gz\n    dest: /usr/local/bin/\n    remote_src: true\n\n- name: Create a Hosted Cluster\n  command: >\n    hypershift create cluster agent  --name={{ hypershift.hcp.hosted_cluster_name }}  --pull-secret={{ hypershift.hcp.pull_secret_file }}  --agent-namespace={{ hosted_control_plane_namespace\n    }}  --namespace={{ hypershift.hcp.clusters_namespace }}  --base-domain={{ hypershift.hcp.basedomain }}  --api-server-address=api.{{ hypershift.hcp.hosted_cluster_name\n    }}.{{ hypershift.hcp.basedomain }}  --ssh-key ~/.ssh/{{ env.ansible_key_name }}.pub\n    --release-image=quay.io/openshift-release-dev/ocp-release:{{ hypershift.hcp.ocp_release }}  {% set release_image = lookup('env', 'HCP_RELEASE_IMAGE') %}\n    {% if release_image is defined and release_image != '' %}\n    --release-image={{ release_image }}\n    {% else %}\n    --release-image=quay.io/openshift-release-dev/ocp-release:{{ hypershift.hcp.ocp_release }}\n    {% endif %}\n\n- name: Waiting for Hosted Control Plane to be available\n  command: oc wait --timeout=30m --for=condition=Available --namespace={{ hypershift.hcp.clusters_namespace }} hostedcluster/{{ hypershift.hcp.hosted_cluster_name\n    }}\n\n- name: Wait for pods to come up in Hosted Cluster Namespace\n  shell: oc get pods -n {{ hosted_control_plane_namespace }} | wc -l\n  register: pod_count\n  until: pod_count.stdout | int > 30\n  retries: 40\n  delay: 10\n\n- name: Wait for all pods to be in Running State in  Hosted Cluster Namespace\n  shell: oc get pods -n {{ hosted_control_plane_namespace }}  --no-headers | grep -v 'Running\\|Completed\\|Terminating' | wc -l\n  register: pod_status\n  until: pod_status.stdout == '0'\n  retries: 30\n  delay: 10\n\n- name: Create InfraEnv.yaml\n  template:\n    src: InfraEnv.yaml.j2\n    dest: /root/ansible_workdir/InfraEnv.yaml\n\n- name: Deploy InfraEnv Resource\n  command: oc apply -f /root/ansible_workdir/InfraEnv.yaml\n\n- name: Creating list of mac addresses\n  set_fact:\n    agent_mac_addr: []\n  when: hypershift.agents_parms.static_ip_parms.static_ip == true\n\n- name: Getting mac addresss for agents\n  set_fact:\n    agent_mac_addr: \"{{ hypershift.agents_parms.agent_mac_addr }}\"\n  when: ( hypershift.agents_parms.static_ip_parms.static_ip == true ) and ( hypershift.agents_parms.agent_mac_addr != None )\n\n- name: Generate mac addresses for agents\n  set_fact:\n    agent_mac_addr: \"{{ agent_mac_addr +  ['52:54:00' | community.general.random_mac] }}\"\n  when: ( hypershift.agents_parms.static_ip_parms.static_ip == true ) and ( hypershift.agents_parms.agent_mac_addr == None )\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Create NMState Configs\n  template:\n    src: nmStateConfig.yaml.j2\n    dest: /root/ansible_workdir/nmStateConfig-agent-{{ item }}.yaml\n  when: hypershift.agents_parms.static_ip_parms.static_ip == true\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Deploy NMState Configs\n  command: oc apply -f /root/ansible_workdir/nmStateConfig-agent-{{ item }}.yaml\n  when: hypershift.agents_parms.static_ip_parms.static_ip == true\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Wait for ISO to generate in InfraEnv\n  shell: oc get InfraEnv -n  {{ hosted_control_plane_namespace }} --no-headers\n  register: infra\n  until: infra.stdout.split(' ')[-1] != ''\n  retries: 60\n  delay: 20\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 20, "success": 20, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_inventory_setup_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml", "tasks": ["task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[0]", "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[1]", "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[2]", "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[3]", "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[4]", "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[5]", "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[6]", "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[7]"], "role": "create_inventory_setup_hypershift", "collection": "", "yaml_lines": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Create inventory\n  template:\n    src: inventory_template.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/inventory_hypershift\"\n\n- name: Check if SSH key exists\n  stat:\n    path: ~/.ssh/{{ env.ansible_key_name }}.pub\n  register: ssh_key\n\n- name: Generate SSH key\n  command: ssh-keygen -t rsa -b 4096 -N \"\" -f \"~/.ssh/{{ env.ansible_key_name }}\"\n  when: ssh_key.stat.exists == false\n\n- name: Create expect file\n  template:\n    src: ssh-key.exp.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/ssh-key.exp.sh\"\n    mode: +rx\n\n- name: Add ssh-key to kvm_host Authorised Keys\n  block:\n    - name: Adding ssh key\n      shell: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/ssh-key.exp.sh\"\n  rescue:\n    - name: Key already added\n      debug:\n        msg: Ignore the above error if ssh-key already added\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 8, "success": 8, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_kvm_host/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_kvm_host/tasks/main.yaml", "tasks": ["task role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml#task:[0]", "task role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml#task:[1]", "task role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml#task:[2]"], "role": "create_kvm_host", "collection": "", "yaml_lines": "---\n- name: Start LPAR\n  tags: create_kvm_host\n  ibm.ibm_zhmc.zhmc_partition:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    name: \"{{ lpar.name }}\"\n    properties:\n      boot_ftp_host: \"{{ env.file_server.ip }}\"\n      boot_ftp_username: \"{{ env.file_server.user }}\"\n      boot_ftp_password: \"{{ env.file_server.pass }}\"\n      boot_ftp_insfile: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.ins\"\n      boot_device: ftp\n    state: active\n  register: _create_instances\n  async: 600\n  poll: 0\n\n- name: Wait for creation to finish\n  tags: create_kvm_host\n  async_status:\n    jid: \"{{ _create_instances.ansible_job_id }}\"\n  register: _jobs\n  until: _jobs.finished\n  delay: 15 # Check every 15 seconds\n  retries: 40 # Retry up to 40 times\n\n#- name: Template hmccreds.yaml for use with os_messages.py\n#  tags: create_kvm_host, test2\n#  template:\n#    src: hmccreds.yaml.j2\n#    dest: \"{{ role_path }}/files/hmccreds.yaml\"\n\n#- name: Execute os_messages.py\n#  tags: create_kvm_host, test2\n#  command: \"{{ role_path }}/files/os_messages.py {{ role_path }}/files/hmcclient.yaml\"\n#  register: os_messages_output\n\n#- name: Show LPAR OS messages from HMC.\n#  tags: create_kvm_host, test2\n#  debug:\n#    msg: \"{{ os_messages_output }}\"\n#  until: \"'login:' in os_messages_output\"\n\n- name: Wait 7 minutes for automated RHEL installation and configuration to complete.\n  tags: create_kvm_host\n  pause:\n    minutes: 7\n\n#- name: Change LPAR's boot source to storage adapter instead of FTP for future booting\n#  tags: create_kvm_host\n#  ibm.ibm_zhmc.zhmc_partition:\n#    hmc_host: \"{{ hmc.host }}\"\n#    hmc_auth:\n#      userid: \"{{ hmc.auth.user }}\"\n#      password: \"{{ hmc.auth.pass }}\"\n#      verify: false\n#    cpc_name: \"{{ cpc_name }}\"\n#    name: \"{{ lpar.name }}\"\n#    properties:\n#      boot_device: \"storage-adapter\"\n#    state: active\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "taskfile taskfile:roles/create_lpar/tasks/main.yaml", "tasks": ["task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[0]", "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[1]", "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[2]", "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[3]", "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[4]", "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[5]", "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[6]", "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[7]", "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[8]", "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[9]"], "role": "create_lpar", "collection": "", "yaml_lines": "---\n#Create LPAR Profile\n- name: Create logical partition.\n  tags: create_lpar, lpar\n  ibm.ibm_zhmc.zhmc_partition:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    name: \"{{ lpar.name }}\"\n    state: stopped\n    properties:\n      description: \"{{ lpar.description }}\"\n      ifl_processors: \"{{ lpar.ifl.count }}\"\n      initial_memory: \"{{ lpar.ifl.initial_memory }}\"\n      maximum_memory: \"{{ lpar.ifl.max_memory }}\"\n      minimum_ifl_processing_weight: \"{{ lpar.ifl.min_weight }}\"\n      maximum_ifl_processing_weight: \"{{ lpar.ifl.max_weight }}\"\n      initial_ifl_processing_weight: \"{{ lpar.ifl.initial_weight }}\"\n  register: create_lpar\n\n- name: Print the result\n  tags: create_lpar, lpar\n  debug:\n    var: create_lpar\n\n# Attach storge group\n- name: Ensure storage group is attached to partition.\n  tags: create_lpar, storage_group, storage_group_1\n  ibm.ibm_zhmc.zhmc_storage_group_attachment:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    storage_group_name: \"{{ lpar.storage_group_1.name }}\"\n    partition_name: \"{{ lpar.name  }}\"\n    state: attached\n  register: sglparattach\n\n- name: Print the result.\n  tags: create_lpar, storage_group, storage_group_1\n  debug:\n    var: sglparattach\n\n# Attach second storge group, if defined\n- name: Ensure second storage group is attached to partition, if defined.\n  tags: create_lpar, storage_group, storage_group_2\n  ibm.ibm_zhmc.zhmc_storage_group_attachment:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    storage_group_name: \"{{ lpar.storage_group_2.name }}\"\n    partition_name: \"{{ lpar.name  }}\"\n    state: attached\n  register: sglparattach\n  when: lpar.storage_group_2.name is defined\n\n- name: Print the result.\n  tags: create_lpar, storage_group, storage_group_2\n  debug:\n    var: sglparattach\n  when: lpar.storage_group_2.name is defined\n\n#Attach Network Adapter \n- name: Ensure NIC1 exists in the partition.\n  tags: create_lpar, nic, nic1\n  ibm.ibm_zhmc.zhmc_nic:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    partition_name: \"{{ lpar.name }}\"\n    name: \"{{ lpar.networking.nic.card1.name }}\"\n    state: present\n    properties:\n      adapter_name: \"{{ lpar.networking.nic.card1.adapter }}\"\n      adapter_port: \"{{ lpar.networking.nic.card1.port }}\"\n      description: NIC1\n      device_number: \"{{ '%04x' % lpar.networking.nic.card1.dev_num | int }}\"\n  register: nic1\n\n- name: Print the result.\n  tags: create_lpar, nic, nic1\n  debug:\n    var: nic1\n\n- name: Ensure NIC2 exists in the partition, if defined.\n  tags: create_lpar, nic, nic2\n  ibm.ibm_zhmc.zhmc_nic:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    partition_name: \"{{ lpar.name }}\"\n    name: \"{{ lpar.networking.nic.card2.name }}\"\n    state: present\n    properties:\n      adapter_name: \"{{ lpar.networking.nic.card2.adapter }}\"\n      adapter_port: \"{{ lpar.networking.nic.card2.port }}\"\n      description: NIC2\n      device_number: \"{{ '%04x' % ( lpar.networking.nic.card2.dev_num | int ) }}\"\n  register: nic2\n  when: lpar.networking.nic.card2 is defined\n\n- name: Print the result.\n  tags: create_lpar, nic, nic2\n  debug:\n    var: nic2\n  when: lpar.networking.nic.card2 is defined\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 10, "success": 10, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/delete_compute_node/tasks/main.yaml", "local_key": "taskfile taskfile:roles/delete_compute_node/tasks/main.yaml", "tasks": ["task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[0]", "task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[1]", "task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[2]", "task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[3]"], "role": "delete_compute_node", "collection": "", "yaml_lines": "---\n- name: Delete compute node from OCP cluster and print command output\n  tags: delete_compute_node\n  delegate_to: \"{{ groups['bastion'][0] }}\"\n  block:\n    - name: Delete compute node from OCP cluster\n      ansible.builtin.shell: |\n        set -o pipefail\n        if ! oc get nodes --no-headers=true | grep \"^{{ param_compute_node.vm_hostname | lower }}\" ; then\n            echo \"INFO: Node '{{ param_compute_node.vm_hostname }}' not found or is already deleted\"\n            exit 0\n        fi\n        oc adm cordon {{ param_compute_node.vm_hostname | lower }}\n        oc adm drain {{ param_compute_node.vm_hostname | lower }} --force --delete-emptydir-data --ignore-daemonsets --timeout=30s\n        oc delete nodes {{ param_compute_node.vm_hostname | lower }}\n      register: cmd_output\n    - name: Print cmd output\n      ansible.builtin.debug:\n        var: cmd_output.stdout_lines\n\n- name: Delete compute node VM on KVM host and print command output\n  tags: delete_compute_node\n  delegate_to: \"{{ param_compute_node.hostname }}\"\n  block:\n    - name: Delete compute node VM on KVM host\n      ansible.builtin.shell: |\n        set -o pipefail\n        virsh destroy {{ param_compute_node.vm_name }} || true\n        virsh undefine {{ param_compute_node.vm_name }} --remove-all-storage || true\n      register: cmd_output\n    - name: Print cmd output\n      ansible.builtin.debug:\n        var: cmd_output.stdout_lines\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 4, "success": 4, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/delete_nodes/tasks/main.yaml", "local_key": "taskfile taskfile:roles/delete_nodes/tasks/main.yaml", "tasks": ["task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[0]", "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[1]", "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[2]", "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[3]"], "role": "delete_nodes", "collection": "", "yaml_lines": "---\n- name: Delete bootstrap node, if exists\n  tags: delete_nodes\n  ansible.builtin.shell: |\n    set -o pipefail\n    virsh destroy \"{{ env.cluster.nodes.bootstrap.vm_name }}\" || true\n    virsh undefine \"{{ env.cluster.nodes.bootstrap.vm_name }}\" --remove-all-storage || true\n  register: delete_bootstrap\n  changed_when: ('destroyed' in delete_bootstrap.stdout) or ('undefined' in delete_bootstrap.stdout)\n\n- name: Delete control, compute and infra nodes, if exists\n  tags: delete_nodes\n  ansible.builtin.shell: |\n    set -o pipefail\n    virsh destroy {{ item }} || true\n    virsh undefine {{ item }} --remove-all-storage || true\n  loop: \"{{ env.cluster.nodes.control.vm_name + env.cluster.nodes.compute.vm_name if env.cluster.nodes.infra.vm_name is not defined else env.cluster.nodes.control.vm_name\n    + env.cluster.nodes.compute.vm_name + env.cluster.nodes.infra.vm_name }}\"\n  register: delete_nodes\n  changed_when: ('destroyed' in delete_nodes.stdout) or ('undefined' in delete_nodes.stdout)\n\n- name: Get and print virsh list\n  tags: delete_nodes\n  block:\n    - name: Get virsh list\n      ansible.builtin.command: virsh list\n      register: cmd_virsh_list\n\n    - name: Print virsh list\n      ansible.builtin.debug:\n        var: cmd_virsh_list.stdout_lines\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 4, "success": 4, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml", "tasks": ["task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[0]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[1]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[2]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[3]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[4]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[5]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[6]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[7]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[8]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[9]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[10]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[11]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[12]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[13]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[14]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[15]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[16]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[17]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[18]", "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[19]"], "role": "delete_resources_bastion_hypershift", "collection": "", "yaml_lines": "---\n- name: Login to Management Cluster\n  command: oc login {{ api_server }} -u {{ user_name }} -p {{ password }} --insecure-skip-tls-verify=true\n\n- name: Scale in  Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas 0\n\n- name: Wait for Worker Nodes to Detach\n  k8s_info:\n    api_version: v1\n    kind: Node\n    kubeconfig: /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig\n  register: nodes\n  until: nodes.resources | length == 0\n  retries: 30\n  delay: 10\n\n- name: Wait for Agentmachines to delete\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == 0\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to delete\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == 0\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Delete Agents\n  command: oc delete agent {{ agents[item] }} -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Remove workdir\n  file:\n    path: /root/ansible_workdir\n    state: absent\n\n- name: Delete InfraEnv resource\n  k8s:\n    state: absent\n    api_version: agent-install.openshift.io/v1beta1\n    kind: InfraEnv\n    name: \"{{ hypershift.hcp.hosted_cluster_name }}\"\n    namespace: \"{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}\"\n\n- name: Destroy Hosted Control Plane\n  command: hypershift destroy cluster agent --name {{ hypershift.hcp.hosted_cluster_name }} --namespace {{ hypershift.hcp.clusters_namespace }}\n\n- name: Delete Clusters Namespace\n  k8s:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hypershift.hcp.clusters_namespace }}\"\n    state: absent\n\n- name: Delete AgentServiceConfig\n  k8s:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: AgentServiceConfig\n    name: agent\n    state: absent\n  when: hypershift.mce.delete == true\n\n- name: Delete Provisioning\n  k8s:\n    name: provisioning-configuration\n    api_version: metal3.io/v1alpha1\n    kind: Provisioning\n    state: absent\n  when: hypershift.mce.delete == true\n\n- name: Delete ClusterImageSet\n  k8s:\n    name: img{{ hypershift.hcp.ocp_release }}-appsub\n    api_version: hive.openshift.io/v1\n    kind: ClusterImageSet\n    state: absent\n  when: hypershift.mce.delete == true\n\n- name: Delete MCE Instance\n  k8s:\n    name: \"{{ hypershift.mce.instance_name }}\"\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    api_version: multicluster.openshift.io/v1\n    kind: MultiClusterEngine\n    state: absent\n    wait: true\n    wait_timeout: 400\n  when: hypershift.mce.delete == true\n\n- name: Delete MCE Subscription\n  k8s:\n    name: multicluster-engine\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    api_version: operators.coreos.com/v1alpha1\n    kind: Subscription\n    state: absent\n  when: hypershift.mce.delete == true\n\n- name: Delete Operator Group - MCE\n  k8s:\n    name: multicluster-engine\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    api_version: operators.coreos.com/v1\n    kind: OperatorGroup\n    state: absent\n  when: hypershift.mce.delete == true\n\n- name: Delete MCE Namespace\n  k8s:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hypershift.asc.mce_namespace }}\"\n    state: absent\n  when: hypershift.mce.delete == true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 20, "success": 20, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/delete_resources_kvm_host_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml", "tasks": ["task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[0]", "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[1]", "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[2]", "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[3]", "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[4]", "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[5]"], "role": "delete_resources_kvm_host_hypershift", "collection": "", "yaml_lines": "---\n- name: Destroy Agent VMs\n  command: virsh destroy {{ hypershift.hcp.hosted_cluster_name }}-agent-{{ item }}\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Undefine Agents\n  command: virsh undefine {{ hypershift.hcp.hosted_cluster_name }}-agent-{{ item }} --remove-all-storage\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Delete  initrd.img\n  file:\n    path: /var/lib/libvirt/images/pxeboot/initrd.img\n    state: absent\n\n- name: Delete  kernel.img\n  file:\n    path: /var/lib/libvirt/images/pxeboot/kernel.img\n    state: absent\n\n- name: Destroy bastion\n  command: virsh destroy {{ hypershift.hcp.hosted_cluster_name }}-bastion\n\n- name: Undefine bastion\n  command: virsh undefine {{ hypershift.hcp.hosted_cluster_name }}-bastion --remove-all-storage\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 6, "success": 6, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:dns#taskfile:roles/dns/tasks/initial-resolv.yaml", "name": "initial-resolv.yaml", "defined_in": "roles/dns/tasks/initial-resolv.yaml", "local_key": "taskfile taskfile:roles/dns/tasks/initial-resolv.yaml", "tasks": ["task role:dns#taskfile:roles/dns/tasks/initial-resolv.yaml#task:[0]", "task role:dns#taskfile:roles/dns/tasks/initial-resolv.yaml#task:[1]", "task role:dns#taskfile:roles/dns/tasks/initial-resolv.yaml#task:[2]"], "role": "dns", "collection": "", "yaml_lines": "---\n- name: Template out bastion's resolv.conf file for initial installation.\n  tags: resolv\n  ansible.builtin.template:\n    src: initial-resolv.conf.j2\n    dest: /etc/resolv.conf\n    owner: root\n    group: root\n    mode: \"644\"\n\n# NetworkManager modifies our /etc/resolv.conf file on next restart or reboot, we need to disable it\n- name: Disable management of /etc/resolv.conf by NetworkManager\n  tags: resolv\n  ansible.builtin.copy:\n    src: 90-dns-none.conf\n    dest: /etc//NetworkManager/conf.d/90-dns-none.conf\n    group: root\n    owner: root\n    mode: \"644\"\n\n- name: Restart network to update changes made to /etc/resolv.conf\n  tags: resolv\n  ansible.builtin.service:\n    name: network\n    state: restarted\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:dns#taskfile:roles/dns/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/dns/tasks/main.yaml", "local_key": "taskfile taskfile:roles/dns/tasks/main.yaml", "tasks": ["task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[0]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[1]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[2]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[3]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[4]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[5]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[6]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[7]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[8]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[9]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[10]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[11]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[12]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[13]", "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[14]"], "role": "dns", "collection": "", "yaml_lines": "---\n- name: Enable named\n  tags: dns\n  ansible.builtin.systemd:\n    name: named\n    enabled: true\n\n- name: Start named\n  tags: dns\n  ansible.builtin.systemd:\n    name: named\n    state: started\n\n- name: Split IP addresses for use in templates\n  tags: dns\n  ansible.builtin.set_fact:\n    bastion_split_ip: \"{{ env.bastion.networking.ip.split('.') }}\"\n    bootstrap_split_ip: \"{{ env.cluster.nodes.bootstrap.ip.split('.') }}\"\n\n- name: Template named.conf file to bastion\n  tags: dns\n  ansible.builtin.template:\n    src: dns-named.conf.j2\n    dest: /etc/named.conf\n    owner: root\n    group: root\n    mode: \"0644\"\n    backup: true\n\n- name: Template DNS forwarding file to bastion\n  tags: dns\n  ansible.builtin.template:\n    src: dns.db.j2\n    dest: /var/named/{{ env.cluster.networking.metadata_name }}.db\n    owner: named\n    group: named\n    mode: \"0644\"\n    backup: true\n\n- name: Add control nodes to DNS forwarding file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n    insertafter: entries for the control nodes\n    line: \"{{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.control.ip[i]\n      }}\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Add compute nodes to DNS forwarding file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n    insertafter: entries for the compute nodes\n    line: \"{{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.compute.ip[i]\n      }}\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Add infrastructure nodes to DNS forwarding file on bastion if requested\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n    insertafter: entries for extra RHEL VMs\n    line: \"{{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.infra.ip[i]\n      }}\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.infra.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n\n- name: Template DNS reverse lookup file to bastion\n  tags: dns\n  ansible.builtin.template:\n    src: dns.rev.j2\n    dest: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n    owner: named\n    group: named\n    mode: \"0644\"\n    backup: true\n\n- name: Add control nodes to DNS reverse lookup file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n    insertafter: PTR Record IP address to Hostname\n    line: \"{{ env.cluster.nodes.control.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name\n      }}.{{ env.cluster.networking.base_domain }}.\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Add compute nodes to DNS reverse lookup file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n    insertafter: PTR Record IP address to Hostname\n    line: \"{{ env.cluster.nodes.compute.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name\n      }}.{{ env.cluster.networking.base_domain }}.\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Add infrastructure nodes to DNS reverse lookup file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n    insertafter: PTR Record IP address to Hostname\n    line: \"{{ env.cluster.nodes.infra.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name\n      }}.{{ env.cluster.networking.base_domain }}.\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.infra.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n\n- name: Restart named to update changes made to DNS\n  tags: dns, resolv\n  ansible.builtin.systemd:\n    name: named\n    state: restarted\n\n- name: Template out bastion's resolv.conf file, replacing initial resolv.conf\n  tags: dns, resolv\n  ansible.builtin.template:\n    src: resolv.conf.j2\n    dest: /etc/resolv.conf\n    owner: root\n    group: root\n    mode: \"644\"\n\n- name: Restart network to update changes made to /etc/resolv.conf\n  tags: dns, resolv\n  ansible.builtin.service:\n    name: network\n    state: restarted\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 15, "success": 15, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:dns_update#taskfile:roles/dns_update/tasks/add.yaml", "name": "add.yaml", "defined_in": "roles/dns_update/tasks/add.yaml", "local_key": "taskfile taskfile:roles/dns_update/tasks/add.yaml", "tasks": ["task role:dns_update#taskfile:roles/dns_update/tasks/add.yaml#task:[0]", "task role:dns_update#taskfile:roles/dns_update/tasks/add.yaml#task:[1]"], "role": "dns_update", "collection": "", "yaml_lines": "---\n- name: Add forward and reverse DNS entry\n  become: true\n  block:\n    - name: Add forward DNS\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n        insertafter: ;entries for the compute nodes\n        line: \"{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ param_dns_ip }}\"\n        state: present\n\n    - name: Add reverse DNS\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n        insertafter: PTR Record IP address to Hostname\n        line: \"{{ param_dns_ip.split('.').3 }}     IN      PTR     {{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n          }}.\"\n        state: present\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml", "name": "delete.yaml", "defined_in": "roles/dns_update/tasks/delete.yaml", "local_key": "taskfile taskfile:roles/dns_update/tasks/delete.yaml", "tasks": ["task role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml#task:[0]", "task role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml#task:[1]", "task role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml#task:[2]", "task role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml#task:[3]"], "role": "dns_update", "collection": "", "yaml_lines": "---\n- name: Delete forward and reverse DNS entry\n  become: true\n  block:\n    - name: Delete forward DNS using hostname\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n        state: absent\n        regexp: ^{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n\n    - name: Delete forward DNS using ip\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n        state: absent\n        regex: A {{ param_dns_ip }}\n\n    - name: Delete reverse DNS using hostname\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n        state: absent\n        regexp: \"{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}.\"\n\n    - name: Delete reverse DNS using IP\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n        state: absent\n        regexp: \"^{{ param_dns_ip.split('.').3 }} \"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 4, "success": 4, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:dns_update#taskfile:roles/dns_update/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/dns_update/tasks/main.yaml", "local_key": "taskfile taskfile:roles/dns_update/tasks/main.yaml", "tasks": ["task role:dns_update#taskfile:roles/dns_update/tasks/main.yaml#task:[0]", "task role:dns_update#taskfile:roles/dns_update/tasks/main.yaml#task:[1]"], "role": "dns_update", "collection": "", "yaml_lines": "---\n- name: Load DNS update task\n  ansible.builtin.include_tasks: \"{{ param_dns_cmd }}.yaml\"\n\n- name: Restart 'named' service to update changes\n  become: true\n  ansible.builtin.systemd:\n    name: named\n    state: restarted\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/download_rootfs_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/download_rootfs_hypershift/tasks/main.yaml", "tasks": ["task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[0]", "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[1]", "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[2]", "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[3]", "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[4]", "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[5]", "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[6]", "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[7]"], "role": "download_rootfs_hypershift", "collection": "", "yaml_lines": "---\n- name: install apache httpd\n  package:\n    name: httpd\n    state: latest\n\n- name: bind httpd to port 8080\n  lineinfile:\n    dest: /etc/httpd/conf/httpd.conf\n    regexp: ^Listen 80\n    line: Listen 8080\n\n- name: allow traffic at 8080 for apache\n  tags: firewall\n  firewalld:\n    port: 8080/tcp\n    zone: \"{{ item }}\"\n    state: enabled\n    permanent: true\n  with_items:\n    - internal\n    - public\n\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Get URL for rootfs\n  set_fact:\n    rootfs_url: \"{{ ipxe_script.stdout_lines[2].split(' ')[3].split('url=')[1] }}\"\n\n- name: Download rootfs.img\n  get_url:\n    url: \"{{ rootfs_url }}\"\n    dest: /var/www/html/rootfs.img\n    validate_certs: false\n\n- name: restart httpd\n  service:\n    name: httpd.service\n    state: started\n    enabled: true\n\n- name: Restart firewalld.service\n  service:\n    name: firewalld.service\n    state: restarted\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 8, "success": 8, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "taskfile taskfile:roles/get_ocp/tasks/main.yaml", "tasks": ["task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[0]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[1]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[2]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[3]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[4]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[5]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[6]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[7]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[8]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[9]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[10]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[11]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[12]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[13]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[14]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[15]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[16]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[17]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[18]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[19]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[20]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[21]", "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[22]"], "role": "get_ocp", "collection": "", "yaml_lines": "---\n- name: Delete ignition folder for idempotency\n  tags: get_ocp\n  file:\n    path: /var/www/html/ignition\n    state: absent\n\n- name: Create directory bin for mirrors\n  tags: get_ocp\n  become: true\n  file:\n    path: /var/www/html/bin\n    state: directory\n    mode: \"0755\"\n    owner: root\n    group: root\n\n- name: Delete OCP download directory for idempotency, because ignition files deprecate after 24 hours.\n  tags: get_ocp\n  become: true\n  file:\n    path: /root/ocpinst\n    state: absent\n\n- name: Create OCP download directory\n  tags: get_ocp\n  file:\n    path: /root/ocpinst\n    state: directory\n\n- name: Get Red Hat CoreOS rootfs file if it's not there already.\n  tags: get_ocp\n  get_url:\n    url: \"{{ rhcos_download_url }}{{ rhcos_live_rootfs }}\"\n    dest: /var/www/html/bin/{{ rhcos_live_rootfs }}\n    mode: \"0644\"\n\n- name: Unzip OCP client and installer\n  tags: get_ocp\n  ansible.builtin.unarchive:\n    src: \"{{ item }}\"\n    dest: /root/ocpinst/\n    remote_src: true\n  loop:\n    - \"{{ ocp_download_url }}{{ ocp_client_tgz }}\"\n    - \"{{ ocp_download_url }}{{ ocp_install_tgz }}\"\n\n- name: Copy kubectl, oc, and openshift-install binaries to /usr/local/sbin\n  tags: get_ocp\n  become: true\n  ansible.builtin.copy:\n    src: /root/ocpinst/{{ item }}\n    dest: /usr/sbin/{{ item }}\n    owner: root\n    group: root\n    mode: \"755\"\n    remote_src: true\n  loop:\n    - kubectl\n    - oc\n    - openshift-install\n\n- name: Use template file to create install-config and backup.\n  tags: get_ocp\n  vars:\n    use_proxy: \"{{ 'True' if (proxy_env.http_proxy is defined or proxy_env.https_proxy is defined or proxy_env.no_proxy is defined) else 'False' }}\"\n  template:\n    src: install-config.yaml.j2\n    dest: \"{{ item }}\"\n    force: true\n  loop:\n    - /root/ocpinst/install-config.yaml\n    - /root/ocpinst/install-config-backup.yaml\n\n- name: Capture OCP public key\n  tags: get_ocp\n  command: cat /root/.ssh/id_rsa.pub\n  register: ocp_pub_key\n\n- name: Place SSH key in install-config\n  tags: get_ocp\n  lineinfile:\n    line: \"sshKey: '{{ ocp_pub_key.stdout }}'\"\n    path: \"{{ item }}\"\n  loop:\n    - /root/ocpinst/install-config.yaml\n    - /root/ocpinst/install-config-backup.yaml\n\n- name: Create manifests\n  tags: get_ocp\n  command: /root/ocpinst/openshift-install create manifests --dir=/root/ocpinst/\n  become: true\n\n- name: Set masters schedulable parameter to false\n  tags: get_ocp\n  become: true\n  replace:\n    path: /root/ocpinst/manifests/cluster-scheduler-02-config.yml\n    regexp: \": true\"\n    replace: \": false\"\n\n- name: Set permissions for ocpinst directory contents to root\n  tags: get_ocp\n  become: true\n  command: chmod 0755 /root/ocpinst/{{item}}\n  loop:\n    - manifests\n    - openshift\n    - .openshift_install.log\n    - .openshift_install_state.json\n\n- name: Set ownership of ocpinst directory contents to root\n  tags: get_ocp\n  become: true\n  command: chown root:root /root/ocpinst/{{item}}\n  loop:\n    - manifests\n    - openshift\n    - .openshift_install.log\n    - .openshift_install_state.json\n\n- name: Create ignition files\n  tags: get_ocp\n  become: true\n  command: /root/ocpinst/openshift-install create ignition-configs  --dir=/root/ocpinst/\n\n- name: Set ownership to root and permissions of ignitions and related files.\n  tags: get_ocp\n  file:\n    state: \"{{ item.state }}\"\n    path: /root/ocpinst/{{ item.path }}\n    owner: root\n    group: root\n    mode: \"{{ item.mode }}\"\n  loop:\n    - { state: file, path: bootstrap.ign, mode: \"755\" }\n    - { state: file, path: master.ign, mode: \"755\" }\n    - { state: file, path: worker.ign, mode: \"755\" }\n    - { state: directory, path: auth, mode: \"755\" }\n    - { state: file, path: metadata.json, mode: \"755\" }\n    - { state: file, path: auth/kubeconfig, mode: \"644\" }\n    - { state: file, path: auth/kubeadmin-password, mode: \"644\" }\n\n- name: Create directory in admin user's home for default kubeconfig.\n  tags: get_ocp, config\n  become: false\n  file:\n    state: directory\n    path: ~/.kube\n\n- name: Create directory in root's home for default kubeconfig.\n  tags: get_ocp, config\n  become: true\n  file:\n    state: directory\n    path: ~/.kube\n\n- name: Make kubeconfig admin user's default (for non-root user).\n  tags: get_ocp, config\n  copy:\n    src: /root/ocpinst/auth/kubeconfig\n    dest: /home/{{ env.bastion.access.user }}/.kube/config\n    owner: \"{{ env.bastion.access.user }}\"\n    group: \"{{ env.bastion.access.user }}\"\n    remote_src: true\n  when: env.bastion.access.user != \"root\"\n\n- name: Make kubeconfig admin user's default (for root user).\n  tags: get_ocp, config\n  copy:\n    src: /root/ocpinst/auth/kubeconfig\n    dest: /{{ env.bastion.access.user }}/.kube/config\n    owner: \"{{ env.bastion.access.user }}\"\n    group: \"{{ env.bastion.access.user }}\"\n    remote_src: true\n  when: env.bastion.access.user == \"root\"\n\n- name: Make kubeconfig root user's default.\n  tags: get_ocp, config\n  copy:\n    src: /root/ocpinst/auth/kubeconfig\n    dest: /root/.kube/config\n    owner: root\n    group: root\n    remote_src: true\n\n- name: Create ignition directory in HTTP-accessible directory.\n  tags: get_ocp\n  become: true\n  file:\n    path: /var/www/html/ignition\n    state: directory\n\n- name: Copy ignition files to HTTP-accessible directory.\n  tags: get_ocp\n  become: true\n  copy:\n    src: /root/ocpinst/{{ item }}.ign\n    dest: /var/www/html/ignition\n    remote_src: true\n    mode: \"775\"\n    group: root\n    owner: root\n  loop:\n    - bootstrap\n    - master\n    - worker\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 23, "success": 23, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:haproxy#taskfile:roles/haproxy/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "taskfile taskfile:roles/haproxy/tasks/main.yaml", "tasks": ["task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[0]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[1]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[2]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[3]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[4]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[5]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[6]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[7]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[8]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[9]", "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[10]"], "role": "haproxy", "collection": "", "yaml_lines": "---\n- name: Change permissive domain for haproxy\n  tags: selinux,haproxy\n  selinux_permissive:\n    name: haproxy_t\n    permissive: true\n\n- name: Use template to create haproxy config file\n  tags: haproxy\n  template:\n    src: haproxy.cfg.j2\n    dest: /etc/haproxy/haproxy.cfg\n    backup: true\n    force: true\n\n- name: Add control node information to 6443 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:6443 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n    insertafter: 6443 section\n  with_sequence: start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Add control node information to 22623 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:22623 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n    insertafter: 22623 section\n  with_sequence: start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Add compute node information to 443 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:443 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n    insertafter: 443 section\n  with_sequence: start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Add infrastructure node information to 443 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:443 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n    insertafter: 443 section\n  with_sequence: start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n\n- name: Add compute node information to 80 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:80 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n  with_sequence: start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Add infrastructure node information to 80 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:80 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n  with_sequence: start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n\n- name: Set haproxy boolean to enable connections\n  tags: haproxy\n  command: setsebool -P haproxy_connect_any 1\n\n- name: Enable haproxy\n  tags: haproxy\n  ansible.builtin.systemd:\n    name: haproxy\n    enabled: true\n\n- name: Restart haproxy\n  tags: haproxy\n  systemd:\n    state: restarted\n    name: haproxy\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 11, "success": 11, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:httpd#taskfile:roles/httpd/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/httpd/tasks/main.yaml", "local_key": "taskfile taskfile:roles/httpd/tasks/main.yaml", "tasks": ["task role:httpd#taskfile:roles/httpd/tasks/main.yaml#task:[0]", "task role:httpd#taskfile:roles/httpd/tasks/main.yaml#task:[1]", "task role:httpd#taskfile:roles/httpd/tasks/main.yaml#task:[2]", "task role:httpd#taskfile:roles/httpd/tasks/main.yaml#task:[3]"], "role": "httpd", "collection": "", "yaml_lines": "---\n- name: Change permissive domain for httpd\n  tags: httpd\n  selinux_permissive:\n    name: httpd_t\n    permissive: true\n\n- name: Allow httpd to listen on tcp port 4443\n  tags: httpd\n  community.general.seport:\n    ports: 4443\n    proto: tcp\n    setype: http_port_t\n    state: present\n    reload: true\n\n- name: enable httpd\n  tags: httpd\n  systemd:\n    name: httpd\n    enabled: true\n\n- name: restart httpd\n  tags: httpd\n  service:\n    name: httpd\n    state: restarted\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 4, "success": 4, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "taskfile taskfile:roles/install_mce_operator/tasks/main.yaml", "tasks": ["task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[0]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[1]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[2]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[3]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[4]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[5]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[6]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[7]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[8]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[9]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[10]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[11]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[12]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[13]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[14]", "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[15]"], "role": "install_mce_operator", "collection": "", "yaml_lines": "---\n- name: Check if multicluster-engine Namespace exists\n  k8s_info:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hypershift.asc.mce_namespace }}\"\n  register: namespace_check\n  ignore_errors: true\n\n- name: Create multicluster-engine  Namespace\n  k8s:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hypershift.asc.mce_namespace }}\"\n    state: present\n  when: namespace_check.resources | length == 0\n\n- name: Create OperatorGroup.yaml\n  template:\n    src: OperatorGroup.yaml.j2\n    dest: /root/ansible_workdir/OperatorGroup.yaml\n\n- name: Deploy OperatorGroup\n  command: oc apply -f /root/ansible_workdir/OperatorGroup.yaml\n\n- name: Create Subscription.yaml\n  template:\n    src: Subscription.yaml.j2\n    dest: /root/ansible_workdir/Subscription.yaml\n\n- name: Deploy Subscription for MCE\n  command: oc apply -f /root/ansible_workdir/Subscription.yaml\n\n- name: Wait for MCE deployment to be created\n  shell: oc get all -n {{ hypershift.asc.mce_namespace }} | grep -i  deployment | grep -i multicluster-engine | wc -l\n  register: mce_deploy\n  until: mce_deploy.stdout == '1'\n  retries: 20\n  delay: 5\n\n- name: Wait for MCE deployment to be available\n  shell: oc get deployment multicluster-engine-operator -n {{ hypershift.asc.mce_namespace }} -o=jsonpath='{.status.replicas}{\" \"}{.status.availableReplicas}'\n  register: mce_pod_status\n  until: mce_pod_status.stdout.split(' ')[0] == mce_pod_status.stdout.split(' ')[1]\n  retries: 20\n  delay: 5\n\n- name: Create MultiClusterEngine.yaml\n  template:\n    src: MultiClusterEngine.yaml.j2\n    dest: /root/ansible_workdir/MultiClusterEngine.yaml\n\n- name: Deploy MCE Instance\n  command: oc apply -f /root/ansible_workdir/MultiClusterEngine.yaml\n\n- name: Wait for MCE to be Available\n  shell: oc get mce --no-headers | awk  '{print $2}'\n  register: mce_status\n  until: mce_status.stdout == \"Available\"\n  retries: 40\n  delay: 10\n\n- name: Enable hypershift-preview component in MCE\n  command: oc patch mce {{ hypershift.mce.instance_name }} -p '{\"spec\":{\"overrides\":{\"components\":[{\"name\":\"hypershift-preview\",\"enabled\":true}]}}}' --type merge\n\n- name: Create ClusterImageSet.yaml\n  template:\n    src: ClusterImageSet.yaml.j2\n    dest: /root/ansible_workdir/ClusterImageSet.yaml\n\n- name: Deploy ClusterImageSet\n  command: oc apply -f /root/ansible_workdir/ClusterImageSet.yaml\n\n- name: Create Provisioning.yaml\n  template:\n    src: Provisioning.yaml.j2\n    dest: /root/ansible_workdir/Provisioning.yaml\n\n- name: Deploy Provisioning\n  command: oc apply -f /root/ansible_workdir/Provisioning.yaml\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 16, "success": 16, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:install_packages#taskfile:roles/install_packages/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/install_packages/tasks/main.yaml", "local_key": "taskfile taskfile:roles/install_packages/tasks/main.yaml", "tasks": ["task role:install_packages#taskfile:roles/install_packages/tasks/main.yaml#task:[0]", "task role:install_packages#taskfile:roles/install_packages/tasks/main.yaml#task:[1]", "task role:install_packages#taskfile:roles/install_packages/tasks/main.yaml#task:[2]"], "role": "install_packages", "collection": "", "yaml_lines": "---\n- name: Print the list of packages to be installed and updated.\n  tags: install_packages\n  debug:\n    var: packages\n\n- name: Installing required packages for Linux machines.\n  tags: install_packages\n  become: true\n  ansible.builtin.package:\n    name: \"{{ item }}\"\n    state: latest\n    update_cache: true\n  loop: \"{{ packages }}\"\n  when: ansible_os_family != 'Darwin'\n\n- name: Installing required packages for Mac machines.\n  tags: install_packages\n  become: false\n  community.general.homebrew:\n    name: \"{{ item }}\"\n    state: latest\n  loop: \"{{ packages }}\"\n  when: ansible_os_family == 'Darwin'\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "tasks": ["task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[0]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[1]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[2]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[3]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[4]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[5]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[6]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[7]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[8]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[9]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[10]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[11]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[12]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[13]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[14]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[15]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[16]", "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[17]"], "role": "install_prereqs_bastion_hypershift", "collection": "", "yaml_lines": "---\n- name: Install ansible-kubernetes module\n  pip:\n    name:\n      - kubernetes\n      - openshift\n    extra_args: --ignore-installed PyYAML\n\n- name: Install Packages on bastion\n  package:\n    name: \"{{ env.pkgs.bastion }}\"\n    state: present\n\n# Creating one directory for Storing Files\n- name: Create Work Directory\n  file:\n    path: /root/ansible_workdir\n    state: directory\n\n- name: Copy pull secret to ansible_workdir\n  copy:\n    content: \"{{ hypershift.hcp.pull_secret }}\"\n    dest: /root/ansible_workdir/auth_file\n\n- name: create /etc/haproxy\n  file:\n    path: /etc/haproxy\n    state: directory\n\n- name: create /etc/haproxy/haproxy.cfg\n  template:\n    src: haproxy.cfg.j2\n    dest: /etc/haproxy/haproxy.cfg\n\n- name: Get the number of Management Cluster Worker Nodes\n  shell: oc get no -o wide --no-headers|grep -i worker| awk '{print $6}' | wc -l\n  register: mgmt_workers_count\n  changed_when: false\n\n- name: Get the IPs of Management Cluster Workers\n  shell: oc get no -o wide --no-headers|grep -i worker| awk '{print $6}'\n  register: mgmt_workers\n  changed_when: false\n\n- name: Add Management Cluster Worker IPs to Haproxy\n  lineinfile:\n    path: /etc/haproxy/haproxy.cfg\n    line: \"    server worker-{{item}} {{ mgmt_workers.stdout_lines[item]}}\"\n  loop: \"{{ range(mgmt_workers_count.stdout|int) | list }}\"\n\n- name: allow http traffic\n  firewalld:\n    service: http\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n\n- name: allow https traffic\n  firewalld:\n    service: https\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n\n- name: allow traffic at port 443\n  firewalld:\n    port: 443/tcp\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n\n- name: allow traffic at port 80\n  firewalld:\n    port: 80/tcp\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n\n- name: allow traffic at port 6443\n  firewalld:\n    port: 6443/tcp\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n\n- name: allow traffic at ports 30000-33000\n  firewalld:\n    port: 30000-33000/tcp\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n\n- name: turn on haproxy_connect_any\n  ansible.posix.seboolean:\n    name: haproxy_connect_any\n    persistent: true\n    state: true\n\n- name: restart haproxy\n  service:\n    name: haproxy.service\n    state: restarted\n    enabled: true\n\n- name: Restart firewalld.service\n  service:\n    name: firewalld.service\n    state: restarted\n    enabled: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 18, "success": 18, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml", "tasks": ["task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[0]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[1]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[2]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[3]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[4]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[5]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[6]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[7]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[8]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[9]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[10]", "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[11]"], "role": "install_prerequisites_host_hypershift", "collection": "", "yaml_lines": "---\n- name: Check if SSH key exists\n  stat:\n    path: ~/.ssh/{{ env.ansible_key_name }}.pub\n  register: ssh_key\n\n- name: Generate an OpenSSH keypair with the default values (4096 bits, RSA)\n  community.crypto.openssh_keypair:\n    path: ~/.ssh/{{ env.ansible_key_name }}\n    passphrase: \"\"\n    comment: Ansible-OpenShift-Provisioning SSH key\n    regenerate: full_idempotence\n  register: ssh_key_creation\n  when: ssh_key.stat.exists == false\n\n- name: Create Work Directory\n  file:\n    path: /root/ansible_workdir\n    state: directory\n\n- name: Install Packages on kvm_host\n  yum:\n    name:\n      - \"{{ item }}\"\n    state: present\n  loop: \"{{ env.pkgs.kvm }}\"\n  when: host != 'bastion_hypershift'\n\n- name: Install Packages for Hypershift\n  package:\n    name:\n      - \"{{ item }}\"\n    state: present\n  loop: \"{{ env.pkgs.hypershift }}\"\n\n- name: Check if OC installed\n  command: oc\n  register: oc_installed\n  ignore_errors: true\n\n- name: Download OC Client\n  get_url:\n    url: \"{{ hypershift.oc_url }}\"\n    dest: /root/ansible_workdir/\n  when: oc_installed.rc != 0\n\n- name: tar oc\n  command: tar -vxzf /root/ansible_workdir/{{ hypershift.oc_url.split('/')[-1] }}\n  when: oc_installed.rc != 0\n\n- name: Copy oc to /usr/local/bin/\n  shell: cp oc /usr/local/bin/oc\n  when: oc_installed.rc != 0\n\n- name: Copy oc to /usr/bin/\n  shell: cp oc /usr/bin/oc\n  when: oc_installed.rc != 0\n\n- name: Add Management Cluster Nameserver to /etc/resolv.conf\n  lineinfile:\n    dest: /etc/resolv.conf\n    insertbefore: BOF\n    line: nameserver {{ hypershift.mgmt_cluster_nameserver }}\n\n- name: Login to Management Cluster\n  command: oc login {{ api_server }} -u {{ user_name }} -p {{ password }} --insecure-skip-tls-verify=true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 12, "success": 12, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:macvtap#taskfile:roles/macvtap/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/macvtap/tasks/main.yaml", "local_key": "taskfile taskfile:roles/macvtap/tasks/main.yaml", "tasks": ["task role:macvtap#taskfile:roles/macvtap/tasks/main.yaml#task:[0]", "task role:macvtap#taskfile:roles/macvtap/tasks/main.yaml#task:[1]", "task role:macvtap#taskfile:roles/macvtap/tasks/main.yaml#task:[2]"], "role": "macvtap", "collection": "", "yaml_lines": "---\n- name: Set up macvtap bridge configuration xml from template to KVM host\n  tags: macvtap\n  community.libvirt.virt_net:\n    command: define\n    name: \"{{ env.bridge_name }}\"\n    xml: \"{{ lookup ('template', 'macvtap.xml.j2') }}\"\n\n- name: Start macvtap bridge\n  tags: macvtap\n  community.libvirt.virt_net:\n    command: start\n    name: \"{{ env.bridge_name }}\"\n\n- name: Set macvtap bridge to autostart\n  tags: macvtap\n  community.libvirt.virt_net:\n    autostart: true\n    name: \"{{ env.bridge_name }}\"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:print_node_status#taskfile:roles/print_node_status/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/print_node_status/tasks/main.yaml", "local_key": "taskfile taskfile:roles/print_node_status/tasks/main.yaml", "tasks": ["task role:print_node_status#taskfile:roles/print_node_status/tasks/main.yaml#task:[0]", "task role:print_node_status#taskfile:roles/print_node_status/tasks/main.yaml#task:[1]"], "role": "print_node_status", "collection": "", "yaml_lines": "---\n# Paranoia check. This task should be executed only from one host\n- name: Check parameters\n  ansible.builtin.fail:\n    msg: \"Too many hosts defined in ansible play: {{ ansible_play_hosts }}\"\n  when: ((ansible_play_hosts | length)  > 1)\n\n- name: Get and print nodes status\n  ansible.builtin.include_tasks: \"{{ role_path }}/../common/tasks/print_ocp_node_status.yaml\"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/assert.yml", "name": "assert.yml", "defined_in": "roles/robertdebock.epel/tasks/assert.yml", "local_key": "taskfile taskfile:roles/robertdebock.epel/tasks/assert.yml", "tasks": ["task role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/assert.yml#task:[0]"], "role": "robertdebock.epel", "collection": "", "yaml_lines": "---\n- name: Ensure that `epel_next` is set correctly.\n  ansible.builtin.assert:\n    quiet: true\n    that:\n      - epel_next is defined\n      - epel_next is bool\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/main.yml", "name": "main.yml", "defined_in": "roles/robertdebock.epel/tasks/main.yml", "local_key": "taskfile taskfile:roles/robertdebock.epel/tasks/main.yml", "tasks": ["task role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/main.yml#task:[0]", "task role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/main.yml#task:[1]", "task role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/main.yml#task:[2]"], "role": "robertdebock.epel", "collection": "", "yaml_lines": "---\n# tasks file for epel\n\n- name: install epel\n  block:\n    - name: install epel gpg key\n      ansible.builtin.rpm_key:\n        key: \"{{ epel_gpg_key }}\"\n        state: present\n\n    - name: install epel-release\n      ansible.builtin.package:\n        name: \"{{ epel_url }}\"\n        state: present\n      notify:\n        - update package cache\n\n    - name: install epel-next-release\n      ansible.builtin.package:\n        name: \"{{ epel_next_url }}\"\n        state: present\n      when:\n        - epel_next\n      notify:\n        - update package cache\n  when:\n    - (ansible_distribution == \"Amazon\" and ansible_distribution_major_version == \"2\") or (ansible_os_family == \"RedHat\" and ansible_distribution_major_version in\n      [ \"7\", \"8\" ])\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/assert.yml", "name": "assert.yml", "defined_in": "roles/robertdebock.openvpn/tasks/assert.yml", "local_key": "taskfile taskfile:roles/robertdebock.openvpn/tasks/assert.yml", "tasks": ["task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/assert.yml#task:[0]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/assert.yml#task:[1]"], "role": "robertdebock.openvpn", "collection": "", "yaml_lines": "---\n- name: test if openvpn_role is set correctly\n  ansible.builtin.assert:\n    that:\n      - openvpn_role is defined\n      - openvpn_role is string\n      - openvpn_role in [ \"client\", \"server\" ]\n    quiet: true\n\n- name: test if openvpn_client_server is set correctly\n  ansible.builtin.assert:\n    that:\n      - openvpn_client_server is defined\n      - openvpn_client_server is string\n    quiet: true\n  when:\n    - openvpn_role == \"client\"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/client.yml", "name": "client.yml", "defined_in": "roles/robertdebock.openvpn/tasks/client.yml", "local_key": "taskfile taskfile:roles/robertdebock.openvpn/tasks/client.yml", "tasks": ["task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/client.yml#task:[0]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/client.yml#task:[1]"], "role": "robertdebock.openvpn", "collection": "", "yaml_lines": "---\n- name: ensure /etc/openvpn/client exists\n  ansible.builtin.file:\n    path: /etc/openvpn/client\n    state: directory\n    owner: root\n    group: \"{{ openvpn_group }}\"\n    mode: \"0750\"\n\n- name: place client.conf\n  ansible.builtin.template:\n    src: client.conf.j2\n    dest: \"{{ openvpn_configuration_directory }}/client.conf\"\n    owner: root\n    group: \"{{ openvpn_group }}\"\n    mode: \"0640\"\n  notify:\n    - restart openvpn\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml", "name": "main.yml", "defined_in": "roles/robertdebock.openvpn/tasks/main.yml", "local_key": "taskfile taskfile:roles/robertdebock.openvpn/tasks/main.yml", "tasks": ["task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[0]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[1]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[2]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[3]"], "role": "robertdebock.openvpn", "collection": "", "yaml_lines": "---\n# tasks file for openvpn\n\n- name: import assert.yml\n  ansible.builtin.import_tasks: assert.yml\n  run_once: true\n  delegate_to: localhost\n\n- name: install openvpn packages\n  ansible.builtin.package:\n    name: \"{{ openvpn_packages }}\"\n    state: present\n\n- name: setup openvpn server or client\n  ansible.builtin.include_tasks:\n    file: \"{{ openvpn_role }}.yml\"\n\n- name: start and enable openvpn\n  ansible.builtin.service:\n    name: \"{{ openvpn_service }}\"\n    state: started\n    enabled: true\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 4, "success": 4, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml", "name": "server.yml", "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "taskfile taskfile:roles/robertdebock.openvpn/tasks/server.yml", "tasks": ["task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[0]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[1]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[2]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[3]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[4]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[5]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[6]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[7]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[8]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[9]", "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[10]"], "role": "robertdebock.openvpn", "collection": "", "yaml_lines": "---\n- name: ensure /etc/openvpn/easy-rsa exists\n  ansible.builtin.file:\n    path: /etc/openvpn/easy-rsa\n    state: directory\n    mode: \"0755\"\n\n- name: easyrsa init-pki\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa init-pki\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki\n\n- name: easyrsa build-ca\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa build-ca nopass\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/ca.crt\n  environment:\n    EASYRSA_BATCH: \"yes\"\n\n- name: easyrsa gen-dh\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa gen-dh\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/dh.pem\n\n- name: easyrsa build-server-full server nopass\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa build-server-full server nopass\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/issued/server.crt\n\n- name: easyrsa build-client-full client nopass\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa build-client-full client nopass\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/issued/client.crt\n\n- name: easyrsa gen-crl\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa gen-crl\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/crl.pem\n\n- name: openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key\n  ansible.builtin.command:\n    cmd: openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key\n    creates: /etc/openvpn/easy-rsa/pki/ta.key\n\n- name: copy files to /etc/openvpn/server\n  ansible.builtin.copy:\n    src: /etc/openvpn/easy-rsa/pki/{{ item }}\n    dest: /etc/openvpn/server/{{ item | basename }}\n    mode: \"0640\"\n    remote_src: true\n  loop:\n    - ca.crt\n    - dh.pem\n    - ta.key\n    - issued/client.crt\n    - issued/server.crt\n    - private/ca.key\n    - private/client.key\n    - private/server.key\n\n- name: copy files to /etc/openvpn\n  ansible.builtin.copy:\n    src: /etc/openvpn/easy-rsa/pki/{{ item }}\n    dest: /etc/openvpn/{{ item | basename }}\n    mode: \"0640\"\n    remote_src: true\n  loop:\n    - ca.crt\n    - ta.key\n\n- name: place server.conf\n  ansible.builtin.template:\n    src: server.conf.j2\n    dest: \"{{ openvpn_configuration_directory }}/server.conf\"\n    owner: root\n    group: \"{{ openvpn_group }}\"\n    mode: \"0640\"\n  notify:\n    - restart openvpn\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 11, "success": 11, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "tasks": ["task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[0]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[1]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[2]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[3]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[4]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[5]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[6]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[7]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[8]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[9]", "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[10]"], "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "yaml_lines": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to create\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Create Kubeconfig for Hosted Cluster\n  shell: hypershift create kubeconfig --namespace {{ hypershift.hcp.clusters_namespace }} --name {{ hypershift.hcp.hosted_cluster_name }} > /root/ansible_workdir/{{\n    hypershift.hcp.hosted_cluster_name }}-kubeconfig\n\n- name: Wait for Worker Nodes to Join\n  k8s_info:\n    api_version: v1\n    kind: Node\n    kubeconfig: /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig\n  register: nodes\n  until: nodes.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 300\n  delay: 10\n\n- name: Wait for Worker nodes to be Ready\n  shell: oc get no --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig  --no-headers | grep -i 'NotReady' | wc -l\n  register: node_status\n  until: node_status.stdout == '0'\n  retries: 50\n  delay: 15\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 11, "success": 11, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/set_firewall/tasks/main.yaml", "local_key": "taskfile taskfile:roles/set_firewall/tasks/main.yaml", "tasks": ["task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[0]", "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[1]", "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[2]", "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[3]", "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[4]", "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[5]"], "role": "set_firewall", "collection": "", "yaml_lines": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n\n- name: Permit traffic in default zone for http and https\n  tags: set_firewall\n  ansible.posix.firewalld:\n    service: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - http\n    - https\n\n- name: Ensure the default Apache port is 8080\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: ^Listen 80$\n    replace: Listen 8080\n    backup: true\n\n- name: Ensure the SSL default port is 4443\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf.d/ssl.conf\n    regexp: ^Listen 443 https\n    replace: Listen 4443 https\n    backup: true\n\n- name: reload firewalld to reflect changes\n  tags: set_firewall\n  systemd:\n    name: firewalld\n    state: reloaded\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 6, "success": 6, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "taskfile taskfile:roles/set_inventory/tasks/main.yaml", "tasks": ["task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[0]", "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[1]", "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[2]", "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[3]", "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[4]", "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[5]", "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[6]", "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[7]", "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[8]"], "role": "set_inventory", "collection": "", "yaml_lines": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n\n- name: check inventory setup\n  tags: set_inventory\n  command: ansible-inventory --list\n  register: inv_check\n  failed_when: inv_check.rc != 0\n\n- name: Gather facts to re-read inventory after changes made to inventory\n  tags: set_inventory\n  ansible.builtin.gather_facts:\n- name: Refresh inventory\n  tags: set_inventory\n  meta: refresh_inventory\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 9, "success": 9, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/setup_for_agents_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml", "tasks": ["task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[0]", "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[1]", "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[2]", "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[3]", "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[4]", "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[5]"], "role": "setup_for_agents_hypershift", "collection": "", "yaml_lines": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n\n- name: Get URL for initrd\n  set_fact:\n    initrd_url: \"{{ ipxe_script.stdout_lines[1].split(' ')[3] }}\"\n\n- name: Download initrd.img\n  get_url:\n    url: \"{{ initrd_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/initrd.img\n    validate_certs: false\n\n- name: Get URL for kernel.img\n  set_fact:\n    kernel_url: \"{{ ipxe_script.stdout_lines[2].split(' ')[1] }}\"\n\n- name: Download kernel.img\n  get_url:\n    url: \"{{ kernel_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/kernel.img\n    validate_certs: false\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 6, "success": 6, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ssh_add_config#taskfile:roles/ssh_add_config/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/ssh_add_config/tasks/main.yaml", "local_key": "taskfile taskfile:roles/ssh_add_config/tasks/main.yaml", "tasks": ["task role:ssh_add_config#taskfile:roles/ssh_add_config/tasks/main.yaml#task:[0]"], "role": "ssh_add_config", "collection": "", "yaml_lines": "---\n- name: Create ssh config file (or add to an exsting file) to if network mode is NAT\n  tags: ssh_copy_id, ssh\n  ansible.builtin.blockinfile:\n    path: ~/.ssh/config\n    backup: true\n    create: true\n    mode: \"0644\"\n    block: |\n      Host {{ env.jumphost.name }} \n        HostName {{ env.jumphost.ip }}\n        User {{ env.jumphost.user }}\n        IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\n      Host {{ env.bastion.networking.ip }}\n        HostName {{ env.bastion.networking.ip }} \n        User {{ env.bastion.access.user }}\n        IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\n        ProxyJump {{ env.jumphost.name }} \n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ssh_agent#taskfile:roles/ssh_agent/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/ssh_agent/tasks/main.yaml", "local_key": "taskfile taskfile:roles/ssh_agent/tasks/main.yaml", "tasks": ["task role:ssh_agent#taskfile:roles/ssh_agent/tasks/main.yaml#task:[0]", "task role:ssh_agent#taskfile:roles/ssh_agent/tasks/main.yaml#task:[1]"], "role": "ssh_agent", "collection": "", "yaml_lines": "---\n- name: Add ansible SSH key to ssh-agent\n  tags: ssh_agent, ssh\n  lineinfile:\n    line: eval $(ssh-agent) && ssh-add ~/.ssh/{{ env.ansible_key_name }}\n    path: ~/.bash_profile\n  register: ssh_agent_setup\n\n- name: Print results from setting up SSH agent\n  tags: ssh_agent, ssh\n  debug:\n    var: ssh_agent_setup\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "taskfile taskfile:roles/ssh_copy_id/tasks/main.yaml", "tasks": ["task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[0]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[1]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[2]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[3]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[4]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[5]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[6]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[7]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[8]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[9]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[10]", "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[11]"], "role": "ssh_copy_id", "collection": "", "yaml_lines": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Delete templated expect script on controller.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  delegate_to: 127.0.0.1\n\n- name: Delete templated expect script on jumphost.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Ensure ssh-copy-id files folder exists for future runs.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/\"\n    state: directory\n  delegate_to: 127.0.0.1\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 12, "success": 12, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/ssh_key_gen/tasks/main.yaml", "local_key": "taskfile taskfile:roles/ssh_key_gen/tasks/main.yaml", "tasks": ["task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[0]", "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[1]", "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[2]", "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[3]", "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[4]"], "role": "ssh_key_gen", "collection": "", "yaml_lines": "---\n- name: Check to see if local SSH directory exists\n  tags: ssh_key_gen, ssh\n  stat:\n    path: ~/.ssh\n  register: ssh_directory_exists_check\n\n- name: Create SSH local directory if it doesn't already exist\n  tags: ssh_key_gen, ssh\n  file:\n    path: ~/.ssh\n    state: directory\n    mode: \"700\"\n  register: ssh_directory_creation\n  when: ssh_directory_exists_check.stat.exists == false\n\n- name: Generate an OpenSSH keypair with the default values (4096 bits, RSA)\n  tags: ssh_key_gen, ssh\n  community.crypto.openssh_keypair:\n    path: ~/.ssh/{{ env.ansible_key_name }}\n    passphrase: \"\"\n    comment: Ansible-OpenShift-Provisioning SSH key\n    regenerate: full_idempotence\n  register: ssh_key_creation\n\n- name: Print results of ssh key pair creation\n  tags: ssh_key_gen, ssh\n  debug:\n    var: ssh_key_creation\n\n- name: Save path to key pair for use in ssh-copy-id role\n  tags: ssh_key_gen, ssh\n  lineinfile:\n    search_string: \"path_to_key_pair:\"\n    line: \"path_to_key_pair: {{ ssh_key_creation.filename }}.pub\"\n    path: \"{{ inventory_dir }}/group_vars/all.yaml\"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 5, "success": 5, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/ssh_ocp_key_gen/tasks/main.yaml", "local_key": "taskfile taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml", "tasks": ["task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[0]", "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[1]", "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[2]", "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[3]", "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[4]", "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[5]"], "role": "ssh_ocp_key_gen", "collection": "", "yaml_lines": "---\n- name: Check to see if local SSH directory exists\n  tags: ssh_ocp_key_gen\n  stat:\n    path: /root/.ssh\n  register: ssh_directory_exists_check\n\n- name: Create SSH local directory if it doesn't already exist\n  tags: ssh_ocp_key_gen\n  file:\n    path: /root/.ssh\n    state: directory\n    mode: \"0700\"\n  register: ssh_directory_creation\n  when: ssh_directory_exists_check.stat.exists == false\n\n- name: Generate an OpenSSH keypair with the default values (4096 bits, rsa) and encrypted private key.\n  tags: ssh_ocp_key_gen\n  community.crypto.openssh_keypair:\n    path: /root/.ssh/id_rsa\n    backend: opensshbin\n    owner: root\n    passphrase: \"\"\n    comment: \"{{ env.ocp_ssh_key_comment }}\"\n    regenerate: full_idempotence\n  register: ssh_ocp\n\n- name: Print results of SSH key generation\n  tags: ssh_ocp_key_gen\n  debug:\n    var: ssh_ocp.public_key\n  when: ssh_ocp.changed == true\n\n- name: Set SSH key permissions\n  tags: ssh_ocp_key_gen\n  command: chmod 600  /root/.ssh/{{ item }}\n  loop:\n    - id_rsa\n    - id_rsa.pub\n\n- name: Set SSH key ownership\n  tags: ssh_ocp_key_gen\n  command: chown root:root /root/.ssh/{{ item }}\n  loop:\n    - id_rsa\n    - id_rsa.pub\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 6, "success": 6, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "taskfile taskfile:roles/update_cfgs/tasks/main.yaml", "tasks": ["task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[0]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[1]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[2]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[3]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[4]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[5]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[6]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[7]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[8]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[9]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[10]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[11]", "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[12]"], "role": "update_cfgs", "collection": "", "yaml_lines": "---\n### Setup\n\n- name: Create directory for KVM host's RHEL configuration files for installation.\n  tags: update_cfgs\n  file:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}\"\n    state: directory\n\n- name: Clean-up old cfg files.\n  tags: update_cfgs\n  shell: rm -rf {{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.*\n\n### Templating out RHEL configuration files for the KVM host to pull from the FTP server\n\n- name: Split iso_mount_dir variable on / for use in template\n  tags: update_cfgs\n  set_fact:\n    ins_dir: \"{{ env.file_server.iso_mount_dir.split('/') }}\"\n\n- name: Template RHEL configuration files out to FTP server.\n  tags: update_cfgs\n  template:\n    src: \"{{ item }}.j2\"\n    dest: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/{{ item }}\"\n  loop:\n    - kvm_host.prm\n    - kvm_host.ins\n    - kvm_host.cfg\n\n### Updating additional parameters in RHEL configuration files that are more variable.\n\n- name: Add FCP storage boot drive triplet info to KVM host's RHEL prm configuration file.\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.prm\"\n    insertafter: inst.repo\n    line: rd.zfcp=0.0.{{ lpar.storage_group_1.dev_num }},0x{{ lpar.storage_group_1.storage_wwpn[i] }},0x0000000000000000\n  with_sequence: start=0 end={{(lpar.storage_group_1.storage_wwpn | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n\n- name: Create list from nic1 device number, incremented twice for input in KVM host prm file for boot\n  set_fact:\n    nic_child_list:\n      - \"{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int ) }}\"\n      - \"{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int + 1 ) }}\"\n      - \"{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int + 2 ) }}\"\n\n- name: Add network device information to KVM host's RHEL prm file for boot\n  lineinfile:\n    path: \"{{env.file_server.cfgs_dir}}/{{ networking.hostname }}/kvm_host.prm\"\n    insertafter: ro ramdisk_size\n    line: rd.znet=qeth,0.0.{{nic_child_list[0]}},0.0.{{nic_child_list[1]}},0.0.{{nic_child_list[2]}},layer2=1,portno={{ lpar.networking.nic.card1.port }}\n\n- name: Create hash from KVM host root password to input in kickstart file\n  tags: update_cfgs\n  shell: echo \"{{ lpar.access.root_pass }}\" | openssl passwd -6 -in -\n  register: root_pass_hash\n\n- name: Add hashed root password to KVM host's RHEL kickstart config file\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg\"\n    insertafter: Root password\n    line: rootpw --iscrypted {{ root_pass_hash.stdout }}\n\n- name: Create hash from KVM user password to input in kickstart file\n  tags: update_cfgs\n  shell: echo \"{{ lpar.access.pass }}\" | openssl passwd -6 -in -\n  register: user_pass_hash\n\n- name: Add hashed user password to KVM host's RHEL kickstart config file\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg\"\n    insertafter: Users and Groups Definitions\n    line: user --groups=wheel,kvm,libvirt --name={{ ansible_user }} --password={{ user_pass_hash.stdout }} --iscrypted\n\n- name: Add network information in KVM hosts's RHEL kickstart file when there is only one network card defined.\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg\"\n    insertafter: Network information\n    line: network  --bootproto=static --device={{ networking.device1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1\n      }} {{ ('--nameserver=' + networking.nameserver2) if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{\n      networking.hostname }}\n  when: lpar.networking.nic.card2 is not defined\n\n- name: Add network information in KVM hosts's RHEL kickstart file when there are two network cards defined.\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg\"\n    insertafter: Network information\n    line: network  --bootproto=static --device={{ networking.device1 }} --bondslaves={{ lpar.networking.nic.card1.name }},{{ lpar.networking.nic.card2.name }}  --bondopts=mode=active-backup;primary={{\n      lpar.networking.nic.card1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1 }} {{ ('--nameserver=' + networking.nameserver2)\n      if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{ networking.hostname }}\n  when: lpar.networking.nic.card2.name is defined\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 13, "success": 13, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:update_ignition_files#taskfile:roles/update_ignition_files/tasks/main.yml", "name": "main.yml", "defined_in": "roles/update_ignition_files/tasks/main.yml", "local_key": "taskfile taskfile:roles/update_ignition_files/tasks/main.yml", "tasks": ["task role:update_ignition_files#taskfile:roles/update_ignition_files/tasks/main.yml#task:[0]", "task role:update_ignition_files#taskfile:roles/update_ignition_files/tasks/main.yml#task:[1]"], "role": "update_ignition_files", "collection": "", "yaml_lines": "---\n# Ignition file update\n- name: Update master and worker ignition files on bastion host\n  # Requires sudo access\n  become: true\n  block:\n    - name: Update master and worker ignition files on bastion\n      ansible.builtin.shell: |\n        echo \"Print machineconfigs:\"\n        oc get mc\n        echo \"Update worker ignition file ...\"\n        oc extract -n openshift-machine-api secret/worker-user-data --keys=userData --to=- > /var/www/html/ignition/worker.ign\n        echo \"Update master ignition file ...\"\n        oc extract -n openshift-machine-api secret/master-user-data --keys=userData --to=- > /var/www/html/ignition/master.ign\n      register: cmd_output\n    - name: Print above command output\n      ansible.builtin.debug:\n        var: cmd_output.stdout_lines\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/wait_for_bootstrap/tasks/main.yaml", "local_key": "taskfile taskfile:roles/wait_for_bootstrap/tasks/main.yaml", "tasks": ["task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[0]", "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[1]", "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[2]", "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[3]", "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[4]", "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[5]"], "role": "wait_for_bootstrap", "collection": "", "yaml_lines": "---\n- name: Start openshift-installer with 'wait-for bootstrap-complete' (async task)\n  tags: wait_for_bootstrap\n  ansible.builtin.command: openshift-install wait-for bootstrap-complete --dir=/root/ocpinst\n  # Set wait time to 75 min, because it depends highly on system performance and network speed\n  async: 4500\n  poll: 0\n  register: watch_bootstrap\n\n- name: Wait for first node-bootstrapper request. Takes < 10 min with good network connection (retry every 30s)...To watch progress, SSH to root@bastion, SSH to core@bootstrap-ip\n    and run 'journalctl -b -f -u release-image.service -u bootkube.service'\n  tags: wait_for_bootstrap\n  ansible.builtin.shell: |\n    set -o pipefail\n    oc get csr | grep \":node-bootstrapper\"\n  register: csr_check\n  until: (\":node-bootstrapper\" in csr_check.stdout)\n  retries: 60\n  delay: 30\n\n- name: Print first node-bootstrapper requests\n  tags: wait_for_bootstrap\n  ansible.builtin.debug:\n    var: csr_check.stdout_lines\n\n- name: Retry wait-for bootstrap-complete job ID check until it's finished. This may take some time... To watch progress, SSH to bastion, switch to root, from there,\n    SSH to core@bootstrap-ip and run 'journalctl -b -f -u release-image.service -u bootkube.service'\n  tags: wait_for_bootstrap\n  ansible.builtin.async_status:\n    jid: \"{{ watch_bootstrap.ansible_job_id }}\"\n  register: bootstrapping\n  until: bootstrapping.finished\n  # Set wait time to 60 min, because it depends highly on system performance and network speed\n  retries: 120\n  delay: 30\n\n- name: Make sure kubeconfig works properly\n  tags: wait_for_bootstrap\n  ansible.builtin.command: oc whoami\n  register: oc_whoami\n  until: (oc_whoami.stdout == \"system:admin\")\n  retries: 30\n  delay: 10\n\n- name: Print output of oc whoami, should be \"system:admin\" if previous task worked\n  tags: wait_for_bootstrap\n  ansible.builtin.debug:\n    var: oc_whoami.stdout\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 6, "success": 6, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml", "name": "check_co.yaml", "defined_in": "roles/wait_for_cluster_operators/tasks/check_co.yaml", "local_key": "taskfile taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml", "tasks": ["task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[0]", "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[1]", "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[2]", "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[3]"], "role": "wait_for_cluster_operators", "collection": "", "yaml_lines": "---\n- name: \"{{ loop_count }} round of checking cluster operators\"\n  tags: wait_for_cluster_operators\n  ansible.builtin.shell: |\n    set -o pipefail\n    # Get and print only cluster operators which are only in 'PROGRESSING' state\n    oc get co 2> /dev/null | grep '       True' || true\n  register: oc_get_co\n  when: not cluster_operators_ok\n\n- name: Print cluster operators which are only in 'PROGRESSING' state\n  tags: wait_for_cluster_operators\n  ansible.builtin.debug:\n    var: oc_get_co.stdout_lines\n  when: not cluster_operators_ok\n\n- name: \"{{ loop_count }} round of waiting for cluster operators. Trying 10 times before printing status again\"\n  tags: wait_for_cluster_operators\n  ansible.builtin.shell: |\n    set -o pipefail\n    # Check for 'PROGRESSING' state\n    oc get co 2> /dev/null | awk '{print $4}'\n  register: co_check\n  # Check for \"True\" and \"False\", in case output was empty for any reason\n  until: (\"True\" not in co_check.stdout) and (\"False\" in co_check.stdout)\n  retries: 10\n  delay: 30\n  ignore_errors: true\n  when: not cluster_operators_ok\n\n- name: Update local variable, if required\n  tags: wait_for_cluster_operators\n  ansible.builtin.set_fact:\n    cluster_operators_ok: true\n  # Check for \"True\" and \"False\", in case output was empty for any reason\n  when: not cluster_operators_ok and (\"True\" not in co_check.stdout) and (\"False\" in co_check.stdout)\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 4, "success": 4, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/wait_for_cluster_operators/tasks/main.yaml", "local_key": "taskfile taskfile:roles/wait_for_cluster_operators/tasks/main.yaml", "tasks": ["task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[0]", "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[1]", "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[2]"], "role": "wait_for_cluster_operators", "collection": "", "yaml_lines": "---\n- name: Wait for cluster operators\n  tags: wait_for_cluster_operators\n  ansible.builtin.include_tasks: check_co.yaml\n  with_items:\n    - First\n    - Second\n    - Third\n    - Fourth\n    - Fifth and last\n  loop_control:\n    loop_var: loop_count\n\n- name: Get and print final cluster operator status\n  tags: wait_for_cluster_operators\n  block:\n    - name: Get final cluster operators\n      ansible.builtin.command: oc get co\n      register: oc_get_co\n      changed_when: false\n\n    - name: Print final cluster operators\n      ansible.builtin.debug:\n        var: oc_get_co.stdout_lines\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "local_key": "taskfile taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "tasks": ["task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[0]", "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[1]", "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[2]", "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[3]", "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[4]", "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[5]", "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[6]", "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[7]"], "role": "wait_for_hc_to_complete_hypershift", "collection": "", "yaml_lines": "---\n- name: Wait for All Cluster Operators to be available\n  shell: oc get co --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig --no-headers| awk '$3 != \"True\" {print $1}' | wc -l\n  register: co\n  until: co.stdout == '0'\n  retries: 60\n  delay: 20\n\n- name: Wait for Hosted Control Plane to Complete\n  shell: oc get hc -n {{ hypershift.hcp.clusters_namespace }} --no-headers | awk  '{print $4}'\n  register: hc_status\n  until: hc_status.stdout == \"Completed\"\n  retries: 40\n  delay: 15\n\n- name: Get URL for Webconsole of Hosted Cluster\n  shell: oc whoami --show-console --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig\n  register: console_url\n\n- name: Get Password for Hosted Cluster\n  shell: oc get secret kubeadmin-password -n \"{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}\" -o yaml | grep -i 'password:'\n  register: cluster_password_encoded\n\n- name: Decode the Password\n  shell: echo \"{{cluster_password_encoded.stdout_lines[0].split(' ')[-1]}}\" | base64 --decode\n  register: cluster_password_decoded\n\n- name: Get api server of Hosted Cluster\n  shell: \"cat /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig | grep -i server:\"\n  register: api_server\n\n- name: Display Login Credentials\n  debug:\n    msg: \" You can access webconsole of Hosted Cluster here : {{ console_url.stdout }} | Username : 'kubeadmin' Password : {{ cluster_password_decoded.stdout_lines[0]\n      }} \"\n\n- name: Display oc login command for CLI\n  debug:\n    msg: \" You can access the Hosted Cluster using CLI : oc login {{ api_server.stdout_lines[0].split(': ')[-1] }} -u kubeadmin -p {{ cluster_password_decoded.stdout_lines[0]\n      }} \"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 8, "success": 8, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/wait_for_install_complete/tasks/main.yaml", "local_key": "taskfile taskfile:roles/wait_for_install_complete/tasks/main.yaml", "tasks": ["task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[0]", "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[1]", "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[2]", "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[3]", "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[4]"], "role": "wait_for_install_complete", "collection": "", "yaml_lines": "---\n- name: Almost there! Add host info to /etc/hosts so you can login to the cluster via web browser. Ansible Controller sudo password required\n  tags: wait_for_install_complete\n  become: true\n  blockinfile:\n    create: true\n    backup: true\n    marker: \"# {mark} ANSIBLE MANAGED BLOCK FOR OCP CLUSTER: {{ env.cluster.networking.metadata_name }}\"\n    path: /etc/hosts\n    block: |\n      {{ env.bastion.networking.ip }} oauth-openshift.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n      {{ env.bastion.networking.ip }} console-openshift-console.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n      {{ env.bastion.networking.ip }} api.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n  delegate_to: 127.0.0.1\n\n- name: Get OCP URL\n  tags: wait_for_install_complete\n  set_fact:\n    ocp_url: https://console-openshift-console.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n\n- name: Get OCP temporary password\n  tags: wait_for_install_complete\n  command: cat /root/ocpinst/auth/kubeadmin-password\n  register: ocp_passwd\n  changed_when: false\n\n- name: Additional step, if using NAT\n  tags: wait_for_install_complete\n  debug:\n    msg: \"NAT USERS ONLY: Create SSH tunnel to cluster, i.e run command in terminal window from controller: 'sshuttle -r {{ env.bastion.access.user }}@{{ env.bastion.networking.ip\n      }} 192.168.122.0/15 --dns'\"\n  when: ( env.network_mode | upper == \"NAT\" )\n  changed_when: false\n\n- name: Congratulations! OpenShift installation complete. Use the information below for first-time login via web browser.\n  tags: wait_for_install_complete\n  command: echo {{ item }}\n  loop:\n    - \" URL: {{ ocp_url }} \"\n    - \" Username: kubeadmin \"\n    - \" Password: {{ ocp_passwd.stdout }} \"\n  changed_when: false\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 5, "success": 5, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile role:wait_for_node#taskfile:roles/wait_for_node/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/wait_for_node/tasks/main.yaml", "local_key": "taskfile taskfile:roles/wait_for_node/tasks/main.yaml", "tasks": ["task role:wait_for_node#taskfile:roles/wait_for_node/tasks/main.yaml#task:[0]", "task role:wait_for_node#taskfile:roles/wait_for_node/tasks/main.yaml#task:[1]", "task role:wait_for_node#taskfile:roles/wait_for_node/tasks/main.yaml#task:[2]"], "role": "wait_for_node", "collection": "", "yaml_lines": "---\n- name: Get and print nodes status\n  ansible.builtin.include_tasks: \"{{ role_path }}/../common/tasks/print_ocp_node_status.yaml\"\n\n- name: Make sure node is 'Ready' (retry every 20s, wait for '{{ wait_for_node_name }}')\n  ansible.builtin.shell: |\n    set -o pipefail\n    oc get nodes --no-headers=true | grep \"^{{ wait_for_node_name | lower }}\" | awk '{print $2}'\n  register: cmd_output\n  until: (\"Ready\" == cmd_output.stdout)\n  retries: 30\n  delay: 20\n\n- name: Get and print nodes status\n  ansible.builtin.include_tasks: \"{{ role_path }}/../common/tasks/print_ocp_node_status.yaml\"\n", "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}], "modules": [], "playbooks": [{"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:roles/robertdebock.epel/molecule/default/converge.yml", "name": "converge.yml", "defined_in": "roles/robertdebock.epel/molecule/default/converge.yml", "local_key": "playbook playbook:roles/robertdebock.epel/molecule/default/converge.yml", "yaml_lines": "---\n- name: Converge\n  hosts: all\n  become: true\n  gather_facts: true\n\n  roles:\n    - role: ansible-role-epel\n", "role": "", "collection": "", "plays": ["play playbook:roles/robertdebock.epel/molecule/default/converge.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:roles/robertdebock.epel/molecule/default/prepare.yml", "name": "prepare.yml", "defined_in": "roles/robertdebock.epel/molecule/default/prepare.yml", "local_key": "playbook playbook:roles/robertdebock.epel/molecule/default/prepare.yml", "yaml_lines": "---\n- name: Prepare\n  hosts: all\n  gather_facts: false\n  become: true\n\n  roles:\n    - role: robertdebock.bootstrap\n", "role": "", "collection": "", "plays": ["play playbook:roles/robertdebock.epel/molecule/default/prepare.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:roles/robertdebock.epel/molecule/default/verify.yml", "name": "verify.yml", "defined_in": "roles/robertdebock.epel/molecule/default/verify.yml", "local_key": "playbook playbook:roles/robertdebock.epel/molecule/default/verify.yml", "yaml_lines": "---\n- name: Verify\n  hosts: all\n  become: true\n  gather_facts: false\n\n  tasks:\n    - name: install a package from epel\n      ansible.builtin.package:\n        name: aalib\n        state: present\n", "role": "", "collection": "", "plays": ["play playbook:roles/robertdebock.epel/molecule/default/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:roles/robertdebock.openvpn/molecule/default/converge.yml", "name": "converge.yml", "defined_in": "roles/robertdebock.openvpn/molecule/default/converge.yml", "local_key": "playbook playbook:roles/robertdebock.openvpn/molecule/default/converge.yml", "yaml_lines": "---\n- name: Converge\n  hosts: all\n  become: true\n  gather_facts: true\n\n  tasks:\n    - name: create openvpn server\n      ansible.builtin.include_role:\n        name: ansible-role-openvpn\n      vars:\n        openvpn_role: server\n\n    - name: copy certificates and keys from the server to the client\n      ansible.builtin.copy:\n        src: /etc/openvpn/easy-rsa/pki/{{ item }}\n        dest: /etc/openvpn/client/{{ item | basename }}\n        mode: \"0640\"\n        remote_src: true\n      loop:\n        - ca.crt\n        - issued/client.crt\n        - private/client.key\n        - ta.key\n\n    - name: create openvpn client\n      ansible.builtin.include_role:\n        name: ansible-role-openvpn\n      vars:\n        openvpn_role: client\n        openvpn_client_server: 127.0.0.1\n", "role": "", "collection": "", "plays": ["play playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:roles/robertdebock.openvpn/molecule/default/prepare.yml", "name": "prepare.yml", "defined_in": "roles/robertdebock.openvpn/molecule/default/prepare.yml", "local_key": "playbook playbook:roles/robertdebock.openvpn/molecule/default/prepare.yml", "yaml_lines": "---\n- name: Prepare server\n  hosts: all\n  gather_facts: false\n  become: true\n\n  roles:\n    - role: robertdebock.bootstrap\n    # - role: robertdebock.buildtools\n    - role: robertdebock.epel\n    # - role: robertdebock.python_pip\n    # - role: robertdebock.openssl\n", "role": "", "collection": "", "plays": ["play playbook:roles/robertdebock.openvpn/molecule/default/prepare.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:roles/robertdebock.openvpn/molecule/default/verify.yml", "name": "verify.yml", "defined_in": "roles/robertdebock.openvpn/molecule/default/verify.yml", "local_key": "playbook playbook:roles/robertdebock.openvpn/molecule/default/verify.yml", "yaml_lines": "---\n- name: Verify\n  hosts: all\n  become: true\n  gather_facts: false\n\n  tasks:\n    - name: check if connection still works\n      ansible.builtin.ping:\n", "role": "", "collection": "", "plays": ["play playbook:roles/robertdebock.openvpn/molecule/default/verify.yml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/0_setup.yaml", "name": "0_setup.yaml", "defined_in": "playbooks/0_setup.yaml", "local_key": "playbook playbook:playbooks/0_setup.yaml", "yaml_lines": "---\n- hosts: localhost\n  tags: localhost\n  connection: local\n  become: false\n  gather_facts: true\n  roles:\n    - set_inventory\n\n  post_tasks:\n    - name: Ensure Ansible Galaxy collections have been installed.\n      tags: galaxy\n      command: ansible-galaxy collection install {{ item }}\n      loop: \"{{ env.pkgs.galaxy }}\"\n\n    - name: Find ibm_zhmc collection install location, if automated LPAR creation is to be used.\n      tags: galaxy\n      shell: ansible-galaxy collection list ibm.ibm_zhmc | grep -i ansible | cut -c 3-\n      register: zhmc_path\n      when: env.z.lpar1.create == True or env.z.lpar2.create == True or env.z.lpar3.create == True\n\n    - name: Ensure zhmcclient requirements are installed.\n      tags: galaxy\n      pip:\n        requirements: \"{{ zhmc_path.stdout }}/ibm/ibm_zhmc/requirements.txt\"\n        executable: pip3\n        extra_args: --upgrade\n      when: env.z.lpar1.create == True or env.z.lpar2.create == True or env.z.lpar3.create == True\n\n    - name: Check to make sure that the KVM host has a corresponding inventory host_vars file named with matching hostname and .yaml extension.\n      tags: lpar_check\n      stat:\n        path: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n      when: env.z.lpar1.hostname is defined\n      register: lpar_host_vars\n      failed_when: lpar_host_vars.stat.exists == False\n\n    - name: Check to make sure the second KVM hosts have a corresponding inventory host_vars file named with matching hostname and .yaml extension, if defined.\n      tags: lpar_check\n      stat:\n        path: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.hostname is defined\n      register: lpar_host_vars\n      failed_when: lpar_host_vars.stat.exists == False\n\n    - name: Check to make sure the third KVM hosts have a corresponding inventory host_vars file named with matching hostname and .yaml extension, if defined.\n      tags: lpar_check\n      stat:\n        path: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.hostname is defined\n      register: lpar_host_vars\n      failed_when: lpar_host_vars.stat.exists == False\n\n- hosts: localhost\n  connection: local\n  become: false\n  gather_facts: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    packages: \"{{ env.pkgs.controller }}\"\n    ssh_target: [\"{{ env.file_server.ip }}\", \"{{ env.file_server.user }}\", \"{{ env.file_server.pass }}\", \"{{ path_to_key_pair }}\"]\n  roles:\n    - install_packages\n    - ssh_key_gen\n    - ssh_agent\n    - ssh_copy_id #to file server\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/0_setup.yaml#play:[0]", "play playbook:playbooks/0_setup.yaml#play:[1]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/1_create_lpar.yaml", "name": "1_create_lpar.yaml", "defined_in": "playbooks/1_create_lpar.yaml", "local_key": "playbook playbook:playbooks/1_create_lpar.yaml", "yaml_lines": "---\n#Create logical partition\n- hosts: localhost\n  tags: create_lpar, create, kvm_host_1\n  connection: local\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  tasks:\n    - name: Install required python packages.\n      ansible.builtin.pip:\n        name: \"{{ item }}\"\n      loop:\n        - requests\n        - zhmcclient\n        - cryptography\n        - packaging\n        - PyYAML\n\n    - name: Include vars for first LPAR if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n      when: env.z.lpar1.create == True\n\n    - name: Create an LPAR for the first KVM host.\n      import_role:\n        name: create_lpar\n      when: env.z.lpar1.create == True\n\n- hosts: localhost\n  tags: create_lpar, create, kvm_host_2\n  connection: local\n  tasks:\n    - name: Include vars for second LPAR if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.create == True\n\n    - name: Create an LPAR for the second KVM host.\n      import_role:\n        name: create_lpar\n      when: env.z.lpar2.create == True\n\n- hosts: localhost\n  tags: create_lpar, create, kvm_host_3\n  connection: local\n  tasks:\n    - name: Include vars for third LPAR if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.create == True\n\n    - name: Create an LPAR for a third KVM host.\n      import_role:\n        name: create_lpar\n      when: env.z.lpar3.create == True\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/1_create_lpar.yaml#play:[0]", "play playbook:playbooks/1_create_lpar.yaml#play:[1]", "play playbook:playbooks/1_create_lpar.yaml#play:[2]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/2_create_kvm_host.yaml", "name": "2_create_kvm_host.yaml", "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "playbook playbook:playbooks/2_create_kvm_host.yaml", "yaml_lines": "---\n#Template and update RHEL configuration files for KVM host to boot from\n- hosts: file_server\n  tags: update_cfgs, update, kvm_host_1\n  become: false\n  gather_facts: false\n  tasks:\n    - name: Include vars for the KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n      when: env.z.lpar1.create == True\n\n    - name: Update configuration files for the KVM host.\n      import_role:\n        name: update_cfgs\n      when: env.z.lpar1.create == True\n\n#Template and update RHEL configuration files for KVM host to boot from\n- hosts: file_server\n  tags: update_cfgs, update, kvm_host_2\n  become: false\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  tasks:\n    - name: Include vars for a second KVM host if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.create == True\n\n    - name: Update configuration files for a second KVM host, if cluster is to be highly available\n      import_role:\n        name: update_cfgs\n      when: env.z.lpar2.create == True\n\n#Template and update RHEL configuration files for KVM host to boot from\n- hosts: file_server\n  tags: update_cfgs, update, kvm_host_3\n  become: false\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  tasks:\n    - name: Include vars for third KVM host if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.create == True\n\n    - name: Update configuration files for a third KVM host, if cluster is to be highly available\n      import_role:\n        name: update_cfgs\n      when: env.z.lpar3.create == True\n\n- name: Boot RHEL on LPAR 1\n  hosts: localhost\n  tags: create_kvm_host, boot, kvm_host_1\n  connection: local\n  tasks:\n    - name: Include vars for first LPAR if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n      when: env.z.lpar1.create == True\n\n    - name: Boot and install RHEL for KVM host\n      import_role:\n        name: create_kvm_host\n      when: env.z.lpar1.create == True\n\n- name: Boot RHEL on LPAR 2\n  hosts: localhost\n  tags: create_kvm_host, boot, kvm_host_2\n  connection: local\n  tasks:\n    - name: Include vars for second KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.create == True\n\n    - name: Boot and install RHEL for a second KVM host.\n      import_role:\n        name: create_kvm_host\n      when: env.z.lpar2.create == True\n\n- name: Boot RHEL on LPAR 3\n  hosts: localhost\n  tags: create_kvm_host, boot, kvm_host_3\n  connection: local\n  tasks:\n    - name: Include vars for third KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.create == True\n\n    - name: Boot and install RHEL for a third KVM host.\n      import_role:\n        name: create_kvm_host\n      when: env.z.lpar3.create == True\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/2_create_kvm_host.yaml#play:[0]", "play playbook:playbooks/2_create_kvm_host.yaml#play:[1]", "play playbook:playbooks/2_create_kvm_host.yaml#play:[2]", "play playbook:playbooks/2_create_kvm_host.yaml#play:[3]", "play playbook:playbooks/2_create_kvm_host.yaml#play:[4]", "play playbook:playbooks/2_create_kvm_host.yaml#play:[5]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/3_setup_kvm_host.yaml", "name": "3_setup_kvm_host.yaml", "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "playbook playbook:playbooks/3_setup_kvm_host.yaml", "yaml_lines": "---\n- name: Copy SSH key to access KVM host 1\n  hosts: localhost\n  tags: ssh, ssh_copy_id, section_1, kvm_host_1\n  connection: local\n  become: false\n  gather_facts: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\"{{ env.z.lpar1.ip }}\", \"{{ env.z.lpar1.user }}\", \"{{ env.z.lpar1.pass }}\", \"{{ path_to_key_pair }}\"]\n  tasks:\n    - name: Include vars for the KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n\n    - name: Copy SSH key to KVM host.\n      import_role:\n        name: ssh_copy_id\n\n- name: Copy SSH key to access KVM host 2\n  hosts: localhost\n  tags: ssh, ssh_copy_id, section_1, kvm_host_2\n  connection: local\n  become: false\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\"{{ env.z.lpar2.ip }}\", \"{{ env.z.lpar2.user }}\", \"{{ env.z.lpar2.pass }}\", \"{{ path_to_key_pair }}\"]\n  tasks:\n    - name: Include vars for second KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.hostname is defined\n\n    - name: copy SSH key to second KVM host, if cluster is to be highly available.\n      tags: ssh_copy_id, ssh\n      import_role:\n        name: ssh_copy_id\n      when: env.z.lpar2.hostname is defined\n\n- name: Copy SSH key to access KVM host 3\n  hosts: localhost\n  tags: ssh, ssh_copy_id, section_1, kvm_host_3\n  connection: local\n  become: false\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\"{{ env.z.lpar3.ip }}\", \"{{ env.z.lpar3.user }}\", \"{{ env.z.lpar3.pass }}\", \"{{ path_to_key_pair }}\"]\n  tasks:\n    - name: Include vars for third KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.hostname is defined\n\n    - name: copy SSH key to third KVM host, if cluster is to be highly available.\n      tags: ssh_copy_id, ssh\n      import_role:\n        name: ssh_copy_id\n      when: env.z.lpar3.hostname is defined\n\n- name: Prepare KVM host(s)\n  hosts: kvm_host\n  tags: setup, section_2\n  gather_facts: true\n  become: true\n  vars:\n    packages: \"{{ env.pkgs.kvm }}\"\n  roles:\n    - { role: attach_subscription, when: env.redhat.username is defined and env.redhat.password is defined }\n    - install_packages\n    - httpd\n  post_tasks:\n    - name: Add ports to firewall\n      tags: firewall-libvirt, libvirt\n      ansible.posix.firewalld:\n        port: 80/tcp\n        permanent: true\n        state: enabled\n\n    - name: Start and enable libvirt\n      tags: firewall-libvirt, libvirt\n      ansible.builtin.service:\n        name: libvirtd\n        enabled: true\n        state: started\n\n    - name: Permit traffic in libvirt zone\n      tags: firewall-libvirt, libvirt\n      ansible.posix.firewalld:\n        service: http\n        permanent: true\n        state: enabled\n        zone: libvirt\n        immediate: true\n\n    - name: Set libvirt management to libvirt group instead of root.\n      tags: libvirt\n      ansible.builtin.lineinfile:\n        path: /etc/libvirt/qemu.conf\n        regexp: '#group = \"root\"'\n        line: group = \"libvirt\"\n        backup: true\n\n    - name: Create file for user's custom libvirt configurations.\n      tags: libvirt\n      ansible.builtin.file:\n        path: /home/{{ ansible_user }}/.config/libvirt/libvirt.conf\n        state: touch\n        owner: \"{{ ansible_user }}\"\n        group: \"{{ ansible_user }}\"\n\n    - name: Set default uri connection to qemu:///system.\n      tags: libvirt\n      ansible.builtin.lineinfile:\n        path: \"{{ item }}\"\n        regexp: '#uri_default = \"qemu:///system\"'\n        line: uri_default = \"qemu:///system\"\n        backup: true\n      loop:\n        - /etc/libvirt/qemu.conf\n        - /home/{{ ansible_user }}/.config/libvirt/libvirt.conf\n        - /etc/libvirt/libvirt.conf\n\n    - name: Ensure KVM admin user is part of groups 'kvm', 'libvirt'.\n      tags: groups, group, libvirt\n      ansible.builtin.user:\n        name: \"{{ ansible_user }}\"\n        append: true\n        groups: kvm,libvirt\n\n    - name: Restart libvirt\n      tags: firewall-libvirt, libvirt\n      ansible.builtin.service:\n        name: libvirtd\n        enabled: true\n        state: restarted\n\n    - name: Enable cockpit console\n      tags: cockpit\n      ansible.builtin.command: systemctl enable --now cockpit.socket\n\n- name: Configure ip_forward in case of NAT\n  hosts: kvm_host\n  tags: cfg_ip_forward, section_2\n  gather_facts: true\n  become: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  tasks:\n    - name: Configure ip_forward in case of network \"NAT\"\n      tags: cfg_ip_forward\n      ansible.posix.sysctl:\n        name: net.ipv4.ip_forward\n        value: \"{{ env.z.ip_forward }}\"\n        sysctl_set: true\n        state: present\n        reload: true\n      when: env.network_mode | upper == 'NAT'\n\n- hosts: kvm_host\n  tags: setup, section_3\n  become: true\n  roles:\n    - configure_storage\n    - { role: macvtap, when: env.network_mode | upper != 'NAT' }\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/3_setup_kvm_host.yaml#play:[0]", "play playbook:playbooks/3_setup_kvm_host.yaml#play:[1]", "play playbook:playbooks/3_setup_kvm_host.yaml#play:[2]", "play playbook:playbooks/3_setup_kvm_host.yaml#play:[3]", "play playbook:playbooks/3_setup_kvm_host.yaml#play:[4]", "play playbook:playbooks/3_setup_kvm_host.yaml#play:[5]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/4_create_bastion.yaml", "name": "4_create_bastion.yaml", "defined_in": "playbooks/4_create_bastion.yaml", "local_key": "playbook playbook:playbooks/4_create_bastion.yaml", "yaml_lines": "---\n# Assume we have an existing ftp/http server already\n- name: 4 create bastion\n  hosts: kvm_host[0]\n  become: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n    - \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n  roles:\n    - common\n    - { role: create_bastion, when: env.bastion.create == True }\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/4_create_bastion.yaml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/5_setup_bastion.yaml", "name": "5_setup_bastion.yaml", "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "playbook playbook:playbooks/5_setup_bastion.yaml", "yaml_lines": "---\n- name: Copy ssh key to jumphost if network is NAT and jumphost defined, and add jumphost section to ssh config.\n  hosts: localhost\n  tags: ssh, ssh_copy_id, section_1\n  connection: local\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\"{{ env.jumphost.ip }}\", \"{{ env.jumphost.user }}\", \"{{ env.jumphost.pass }}\", \"{{ path_to_key_pair }}\"]\n  roles:\n    - { role: ssh_copy_id, tags: ssh_copy_id, ssh: !!null \"\", when: (env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none ) }\n    - { role: ssh_add_config, tags: ssh_copy_id, ssh: !!null \"\", when: (env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none ) }\n\n- name: Configure jumphost if network mode == 'NAT'\n  hosts: jumphost\n  tags: ssh, ssh_copy_id, section_1\n  gather_facts: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\"{{ env.bastion.networking.ip }}\", \"{{ env.bastion.access.user }}\", \"{{ env.bastion.access.pass }}\", \"{{ env.jumphost.path_to_keypair }}\"]\n  pre_tasks:\n    - name: Generate an OpenSSH keypair with the default values (4096 bits, RSA), if using jumphost for NAT.\n      tags: ssh_key_gen, ssh, section_1\n      community.crypto.openssh_keypair:\n        path: \"{{ env.jumphost.path_to_keypair.split('.')[:-1] | join('.') }}\"\n        passphrase: \"\"\n        regenerate: never\n      when: (env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )\n    - block:\n        - name: Check if 'expect' is installed on jumphost, for use in ssh-copy-id role for NAT.\n          package_facts:\n          failed_when: \"'expect' not in ansible_facts.packages\"\n          when: (env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )\n      rescue:\n        - name: Package 'expect' must be installed on the jumphost, attempting to install it. #Using 'block' and 'rescue' to avoid running the 'package' module (which requires 'sudo') unless necessary.\n          become: true\n          package:\n            name: expect\n          when: (env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )\n  roles:\n    - { role: ssh_copy_id, ssh: !!null \"\", when: (env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none ) }\n  post_tasks:\n    - meta: clear_facts\n\n- name: 5 setup bastion - copy SSH key from localhost to access bastion.\n  hosts: localhost\n  tags: ssh, ssh_copy_id, section_1\n  gather_facts: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\"{{ env.bastion.networking.ip }}\", \"{{ env.bastion.access.user }}\", \"{{ env.bastion.access.pass }}\", \"{{ path_to_key_pair }}\"]\n  roles:\n    - ssh_copy_id\n\n- name: 5 setup bastion - configure bastion node with essential services\n  hosts: bastion\n  tags: services, section_2\n  become: true\n  vars:\n    packages: \"{{ env.pkgs.bastion }}\"\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  pre_tasks:\n    - import_role:\n        name: dns\n        tasks_from: initial-resolv.yaml\n  roles:\n    - { role: attach_subscription, when: env.redhat.username is defined and env.redhat.password is defined }\n    - install_packages\n    - ssh_ocp_key_gen\n    - set_firewall\n    - { role: dns, when: env.bastion.options.dns }\n    - check_dns\n    - { role: haproxy, when: env.bastion.options.loadbalancer.on_bastion }\n    - httpd\n\n- hosts: bastion\n  tags: services, section_2, openvpn\n  become: true\n  vars:\n    openvpn_role: server\n  roles:\n    #- { role: robertdebock.bootstrap, tags: openvpn, when: env.z.high_availability == True }\n    - { role: robertdebock.epel, tags: openvpn, when: env.z.high_availability == True }\n    - { role: robertdebock.openvpn, tags: openvpn, when: env.z.high_availability == True }\n\n- hosts: localhost\n  tags: services, section_2, openvpn\n  gather_facts: false\n  tasks:\n    - name: Create landing directories on controller for certificates and keys.\n      tags: openvpn\n      file:\n        state: directory\n        path: tmp\n      when: env.z.high_availability == True\n\n- hosts: bastion\n  tags: services, section_2, openvpn\n  become: true\n  tasks:\n    - name: Fetch certificates and keys from bastion.\n      tags: openvpn\n      fetch:\n        src: /etc/openvpn/easy-rsa/pki/{{ item }}\n        dest: tmp/\n        flat: true\n      loop:\n        - ca.crt\n        - issued/client.crt\n        - private/client.key\n        - ta.key\n      when: env.z.high_availability == True\n\n- name: setup OpenVPN on KVM host(s).\n  hosts: kvm_host\n  tags: services, section_3, openvpn\n  become: true\n  gather_facts: false\n  vars:\n    openvpn_role: client\n    openvpn_client_server: \"{{ env.bastion.networking.ip }}\"\n  pre_tasks:\n    - name: Gather facts.\n      setup:\n      when: env.z.high_availability == True\n\n    - name: Create landing directories for certificates and keys on KVM hosts.\n      tags: openvpn\n      file:\n        state: directory\n        path: /etc/openvpn/client/{{ item }}\n        mode: \"700\"\n      loop:\n        - issued\n        - private\n      when: env.z.high_availability == True\n\n    - name: Copy certificates and keys from controller to KVM hosts.\n      tags: openvpn\n      copy:\n        src: tmp/{{ item }}\n        dest: /etc/openvpn/client/{{ item }}\n        mode: \"600\"\n      loop:\n        - ca.crt\n        - client.crt\n        - client.key\n        - ta.key\n      when: env.z.high_availability == True\n  roles:\n    - { role: robertdebock.epel, tags: openvpn, when: env.z.high_availability == True }\n    - { role: robertdebock.openvpn, tags: openvpn, when: env.z.high_availability == True }\n\n- hosts: localhost\n  tags: services, section_2, openvpn\n  gather_facts: false\n  tasks:\n    - name: Clean up tmp directories on controller for certificates and keys.\n      tags: openvpn\n      file:\n        state: absent\n        path: tmp\n      when: env.z.high_availability == True\n\n- hosts: bastion\n  tags: get_ocp, section_3\n  become: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  roles:\n    - common\n    - get_ocp\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/5_setup_bastion.yaml#play:[0]", "play playbook:playbooks/5_setup_bastion.yaml#play:[1]", "play playbook:playbooks/5_setup_bastion.yaml#play:[2]", "play playbook:playbooks/5_setup_bastion.yaml#play:[3]", "play playbook:playbooks/5_setup_bastion.yaml#play:[4]", "play playbook:playbooks/5_setup_bastion.yaml#play:[5]", "play playbook:playbooks/5_setup_bastion.yaml#play:[6]", "play playbook:playbooks/5_setup_bastion.yaml#play:[7]", "play playbook:playbooks/5_setup_bastion.yaml#play:[8]", "play playbook:playbooks/5_setup_bastion.yaml#play:[9]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/6_create_nodes.yaml", "name": "6_create_nodes.yaml", "defined_in": "playbooks/6_create_nodes.yaml", "local_key": "playbook playbook:playbooks/6_create_nodes.yaml", "yaml_lines": "---\n# Prepare and then create the temporary bootstrap node and the control nodes\n- name: 6 create nodes - prepare KVM guests\n  hosts: kvm_host\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  roles:\n    - prep_kvm_guests\n    # Delete control, compute and infra nodes, if exists\n    - delete_nodes\n\n- name: 6 create nodes - create bootstrap\n  hosts: kvm_host[0]\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  roles:\n    - common\n    - create_bootstrap\n\n- name: 6 create nodes - create control nodes\n  hosts: kvm_host\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  roles:\n    - common\n    - create_control_nodes\n\n- name: 6 create nodes - wait for bootstrap to connect control plane (for non-root user)\n  hosts: bastion\n  become: true\n  environment:\n    KUBECONFIG: /home/{{ env.bastion.access.user }}/.kube/config\n  gather_facts: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  roles:\n    - { role: wait_for_bootstrap, when: env.bastion.access.user != \"root\" }\n\n- name: 6 create nodes - wait for bootstrap to connect to control plane (for root user)\n  hosts: bastion\n  become: true\n  environment:\n    KUBECONFIG: /{{ env.bastion.access.user }}/.kube/config\n  gather_facts: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  roles:\n    - { role: wait_for_bootstrap, when: env.bastion.access.user == \"root\" }\n\n- name: 6 create nodes - once bootstrapping is complete, tear down bootstrap.\n  hosts: kvm_host[0]\n  tags: create_nodes, teardown_bootstrap\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  tasks:\n    - name: Destroy bootstrap. Expect ignored errors if bootstrap is already destroyed.\n      tags: create_nodes, teardown_bootstrap\n      community.libvirt.virt:\n        name: \"{{ env.cluster.nodes.bootstrap.vm_name }}\"\n        command: destroy\n      ignore_errors: true\n\n    - name: Undefine bootstrap. Expect ignored errors if bootstrap is already undefined.\n      tags: create_nodes, teardown_bootstrap\n      community.libvirt.virt:\n        name: \"{{ env.cluster.nodes.bootstrap.vm_name }}\"\n        command: undefine\n      ignore_errors: true\n\n- name: 6 create nodes - once bootstrapping is complete, create compute nodes.\n  hosts: kvm_host\n  tags: create_compute_nodes\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  roles:\n    - common\n    - create_compute_nodes\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/6_create_nodes.yaml#play:[0]", "play playbook:playbooks/6_create_nodes.yaml#play:[1]", "play playbook:playbooks/6_create_nodes.yaml#play:[2]", "play playbook:playbooks/6_create_nodes.yaml#play:[3]", "play playbook:playbooks/6_create_nodes.yaml#play:[4]", "play playbook:playbooks/6_create_nodes.yaml#play:[5]", "play playbook:playbooks/6_create_nodes.yaml#play:[6]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/7_ocp_verification.yaml", "name": "7_ocp_verification.yaml", "defined_in": "playbooks/7_ocp_verification.yaml", "local_key": "playbook playbook:playbooks/7_ocp_verification.yaml", "yaml_lines": "---\n# Complete OpenShift verification\n- name: 7 OCP verification\n  hosts: bastion\n  become: true\n  environment:\n    KUBECONFIG: \"{{ '/home/' if (env.bastion.access.user != 'root') else '/'}}{{ env.bastion.access.user }}/.kube/config\"\n  gather_facts: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  roles:\n    - approve_certs\n    - check_nodes\n    - role: approve_certs\n      approve_certs_cleanup: true\n    - wait_for_cluster_operators\n    - wait_for_install_complete\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/7_ocp_verification.yaml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/create_agents_and_wait_for_install_complete.yaml", "name": "create_agents_and_wait_for_install_complete.yaml", "defined_in": "playbooks/create_agents_and_wait_for_install_complete.yaml", "local_key": "playbook playbook:playbooks/create_agents_and_wait_for_install_complete.yaml", "yaml_lines": "---\n- name: Create Agents\n  hosts: kvm_host_hypershift\n  become: true\n  roles:\n    - boot_agents_hypershift\n\n- name: Scale Nodepool & Configure Haproxy on bastion for hosted workers\n  hosts: bastion_hypershift\n  roles:\n    - scale_nodepool_and_wait_for_workers_hypershift\n    - add_hc_workers_to_haproxy_hypershift\n\n- name: Wait for all Console operators to come up\n  hosts: bastion_hypershift\n  roles:\n    - wait_for_hc_to_complete_hypershift\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/create_agents_and_wait_for_install_complete.yaml#play:[0]", "play playbook:playbooks/create_agents_and_wait_for_install_complete.yaml#play:[1]", "play playbook:playbooks/create_agents_and_wait_for_install_complete.yaml#play:[2]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/create_compute_node.yaml", "name": "create_compute_node.yaml", "defined_in": "playbooks/create_compute_node.yaml", "local_key": "playbook playbook:playbooks/create_compute_node.yaml", "yaml_lines": "---\n###################################################################################################\n#  To execute this playbook you need to create a node config yaml fiile with these parameters:\n# ---\n# day2_compute_node:\n#   vm_name: <your VM name>\n#   vm_hostname: <your VM host name>\n#   vm_ip: <your VM IP address>\n#   hostname: <KVM host name where the VM is created>\n#   host_arch: <KVM host architecture>\n#\n# rhcos_download_url: <your rhcos download url>\n# rhcos_live_kernel: <your live kernel filename>\n# rhcos_live_initrd: <your live initrd filename>\n# rhcos_live_rootfs: <your live rootfs filename>\n#\n# Execute the playbook with '--extra-vars' option.\n# E.g.:\n# ansible-playbook playbooks/add_compute_node.yaml --extra-vars \"@extra-cnode1.yml\"\n\n- name: Add an additional compute node\n  # Select bastion host\n  hosts: bastion\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  pre_tasks:\n    - name: Check required variables\n      when: (day2_compute_node is not defined)\n      block:\n        - name: Check required variables\n          ansible.builtin.debug:\n            msg:\n              - \"ERROR: Variable 'day2_compute_node' is not defined!\"\n              - \"Execute: 'ansible-playbook playbooks/add_compute_node.yaml --extra-vars \\\"@extra-cnode.yml\\\"'\"\n        - name: Abort playbook\n          ansible.builtin.fail:\n            msg: See above error!\n\n  roles:\n    - role: common\n    - role: print_node_status\n    - role: update_ignition_files\n\n    - role: dns_update\n      when: env.bastion.options.dns is defined and env.bastion.options.dns\n      param_dns_cmd: add\n      param_dns_hostname: \"{{ day2_compute_node.vm_hostname }}\"\n      param_dns_ip: \"{{ day2_compute_node.vm_ip }}\"\n\n    - role: create_compute_node\n      # Some tasks will be delegated to the bastion host and target KVM host\n      param_compute_node: \"{{ day2_compute_node }}\"\n\n    - role: approve_certs\n    - role: wait_for_node\n      wait_for_node_name: \"{{ day2_compute_node.vm_hostname }}\"\n    - role: approve_certs\n      approve_certs_cleanup: true\n    - role: print_node_status\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/create_compute_node.yaml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/create_hosted_cluster.yaml", "name": "create_hosted_cluster.yaml", "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "playbook playbook:playbooks/create_hosted_cluster.yaml", "yaml_lines": "---\n- name: Install Prerequisites on kvm_host\n  hosts: kvm_host_hypershift\n  become: true\n  vars_files:\n    - \"{{playbook_dir}}/secrets.yaml\"\n  tasks:\n    - name: Setting host\n      set_fact:\n        host: kvm_host_hypershift\n    - name: Install Prereqs on host\n      import_role:\n        name: install_prerequisites_host_hypershift\n\n- name: Create macvtap network\n  hosts: kvm_host_hypershift\n  become: true\n  tasks:\n    - name: Setting interface name\n      set_fact:\n        networking:\n          device1: \"{{ hypershift.networking_device }}\"\n    - name: Creating macvtap network\n      import_role:\n        name: macvtap\n\n- name: Create bastion for hypershift\n  hosts: kvm_host_hypershift\n  become: true\n  vars_files:\n    - \"{{playbook_dir}}/secrets.yaml\"\n  tasks:\n    - name: Creating Bastion\n      include_role:\n        name: create_bastion_hypershift\n      when: hypershift.create_bastion == true\n\n- name: Configuring Bastion\n  hosts: bastion_hypershift\n  become: true\n  vars_files:\n    - \"{{playbook_dir}}/secrets.yaml\"\n  tasks:\n    - name: Setting host\n      set_fact:\n        host: bastion_hypershift\n\n    - name: Install Prereqs\n      import_role:\n        name: install_prerequisites_host_hypershift\n\n    - name: Configure Bastion\n      import_role:\n        name: install_prereqs_bastion_hypershift\n\n    - name: Add ansible SSH key to ssh-agent\n      import_role:\n        name: ssh_agent\n\n- name: Create AgentServiceConfig Hosted Control Plane and InfraEnv\n  hosts: bastion_hypershift\n  vars_files:\n    - \"{{playbook_dir}}/secrets.yaml\"\n  roles:\n    - install_mce_operator\n    - create_agentserviceconfig_hypershift\n    - create_hcp_InfraEnv_hypershift\n\n- name: Download Required images for booting Agents\n  hosts: kvm_host_hypershift\n  become: true\n  roles:\n    - setup_for_agents_hypershift\n\n- name: Configure httpd on bastion for hosting rootfs\n  hosts: bastion_hypershift\n  roles:\n    - download_rootfs_hypershift\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/create_hosted_cluster.yaml#play:[0]", "play playbook:playbooks/create_hosted_cluster.yaml#play:[1]", "play playbook:playbooks/create_hosted_cluster.yaml#play:[2]", "play playbook:playbooks/create_hosted_cluster.yaml#play:[3]", "play playbook:playbooks/create_hosted_cluster.yaml#play:[4]", "play playbook:playbooks/create_hosted_cluster.yaml#play:[5]", "play playbook:playbooks/create_hosted_cluster.yaml#play:[6]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/delete_compute_node.yaml", "name": "delete_compute_node.yaml", "defined_in": "playbooks/delete_compute_node.yaml", "local_key": "playbook playbook:playbooks/delete_compute_node.yaml", "yaml_lines": "---\n###################################################################################################\n#  To execute this playbook you need to create a node config yaml fiile with these parameters:\n# ---\n# day2_compute_node:\n#   vm_name: <your VM name>\n#   vm_hostname: <your VM host name>\n#   vm_ip: <your VM IP address>\n#   hostname: <KVM host name where the VM is created>\n#   host_arch: <KVM host architecture>\n#\n# Execute the playbook with '--extra-vars' option.\n# E.g.:\n# ansible-playbook playbooks/delete_compute_node.yaml --extra-vars \"@extra-cnode1.yml\"\n\n- name: Delete compute node\n  hosts: bastion\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  pre_tasks:\n    - name: Check required variables\n      when: (day2_compute_node is not defined)\n      block:\n        - name: Check required variables\n          ansible.builtin.debug:\n            msg:\n              - \"ERROR: Variable 'day2_compute_node' is not defined!\"\n              - \"Execute: 'ansible-playbook playbooks/delete_compute_node.yaml --extra-vars \\\"@extra-cnode.yml\\\"'\"\n        - name: Abort playbook\n          ansible.builtin.fail:\n            msg: See above error!\n  roles:\n    - role: delete_compute_node\n      # Some tasks will be delegated to the bastion host and target KVM host\n      param_compute_node: \"{{ day2_compute_node }}\"\n\n    - role: dns_update\n      when: env.bastion.options.dns is defined and env.bastion.options.dns\n      param_dns_cmd: delete\n      param_dns_hostname: \"{{ day2_compute_node.vm_hostname }}\"\n      param_dns_ip: \"{{ day2_compute_node.vm_ip }}\"\n\n    - role: print_node_status\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/delete_compute_node.yaml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/destroy_cluster_hypershift.yaml", "name": "destroy_cluster_hypershift.yaml", "defined_in": "playbooks/destroy_cluster_hypershift.yaml", "local_key": "playbook playbook:playbooks/destroy_cluster_hypershift.yaml", "yaml_lines": "---\n- name: Delete Cluster Resources\n  hosts: bastion_hypershift\n  vars_files:\n    - \"{{playbook_dir}}/secrets.yaml\"\n  roles:\n    - delete_resources_bastion_hypershift\n\n- name: Delete Resources on kvm host\n  hosts: kvm_host_hypershift\n  become: true\n  roles:\n    - delete_resources_kvm_host_hypershift\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/destroy_cluster_hypershift.yaml#play:[0]", "play playbook:playbooks/destroy_cluster_hypershift.yaml#play:[1]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/hypershift.yaml", "name": "hypershift.yaml", "defined_in": "playbooks/hypershift.yaml", "local_key": "playbook playbook:playbooks/hypershift.yaml", "yaml_lines": "---\n- import_playbook: create_hosted_cluster.yaml\n- import_playbook: create_agents_and_wait_for_install_complete.yaml\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/hypershift.yaml#play:[0]", "play playbook:playbooks/hypershift.yaml#play:[1]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/pre-existing_site.yaml", "name": "pre-existing_site.yaml", "defined_in": "playbooks/pre-existing_site.yaml", "local_key": "playbook playbook:playbooks/pre-existing_site.yaml", "yaml_lines": "# If you are using a pre-existing LPAR with RHEL already installed, use this version of the master playbook.\n---\n- import_playbook: \"0_setup.yaml\"\n- import_playbook: 4_create_bastion.yaml\n- import_playbook: 5_setup_bastion.yaml\n- import_playbook: 6_create_nodes.yaml\n- import_playbook: 7_ocp_verification.yaml\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/pre-existing_site.yaml#play:[0]", "play playbook:playbooks/pre-existing_site.yaml#play:[1]", "play playbook:playbooks/pre-existing_site.yaml#play:[2]", "play playbook:playbooks/pre-existing_site.yaml#play:[3]", "play playbook:playbooks/pre-existing_site.yaml#play:[4]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/reinstall_cluster.yaml", "name": "reinstall_cluster.yaml", "defined_in": "playbooks/reinstall_cluster.yaml", "local_key": "playbook playbook:playbooks/reinstall_cluster.yaml", "yaml_lines": "# Use this if you want to re-install nodes with a new OCP version\n---\n- name: Re-Install cluster - Copy SSH key from localhost to access bastion\n  hosts: localhost\n  tags: ssh, ssh_copy_id, section_1\n  gather_facts: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\"{{ env.bastion.networking.ip }}\", \"{{ env.bastion.access.user }}\", \"{{ env.bastion.access.pass }}\", \"{{ path_to_key_pair }}\"]\n  roles:\n    - ssh_copy_id\n\n- name: Re-Install cluster - Copy SSH key to access KVM host 1\n  hosts: localhost\n  tags: ssh, ssh_copy_id, section_1, kvm_host_1\n  connection: local\n  become: false\n  gather_facts: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\"{{ env.z.lpar1.ip }}\", \"{{ env.z.lpar1.user }}\", \"{{ env.z.lpar1.pass }}\", \"{{ path_to_key_pair }}\"]\n  tasks:\n    - name: Include vars for the KVM host\n      ansible.builtin.include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n\n    - name: Copy SSH key to KVM host\n      ansible.builtin.import_role:\n        name: ssh_copy_id\n\n- name: Re-Install cluster - Copy SSH key to access KVM host 2\n  hosts: localhost\n  tags: ssh, ssh_copy_id, section_1, kvm_host_2\n  connection: local\n  become: false\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\"{{ env.z.lpar2.ip }}\", \"{{ env.z.lpar2.user }}\", \"{{ env.z.lpar2.pass }}\", \"{{ path_to_key_pair }}\"]\n  tasks:\n    - name: Include vars for second KVM host\n      ansible.builtin.include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.hostname is defined\n\n    - name: copy SSH key to second KVM host, if cluster is to be highly available\n      ansible.builtin.import_role:\n        name: ssh_copy_id\n      when: env.z.lpar2.hostname is defined\n\n- name: Re-Install cluster - Copy SSH key to access KVM host 3\n  hosts: localhost\n  tags: ssh, ssh_copy_id, section_1, kvm_host_3\n  connection: local\n  become: false\n  gather_facts: false\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  vars:\n    ssh_target: [\" {{ env.z.lpar3.ip }}\", \"{{ env.z.lpar3.user }}\", \"{{ env.z.lpar3.pass }}\", \"{{ path_to_key_pair }}\"]\n  tasks:\n    - name: Include vars for third KVM host\n      ansible.builtin.include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.hostname is defined\n\n    - name: copy SSH key to third KVM host, if cluster is to be highly available\n      ansible.builtin.import_role:\n        name: ssh_copy_id\n      when: env.z.lpar3.hostname is defined\n\n- name: Re-Install cluster - Update ignitions and other install files\n  hosts: bastion\n  become: true\n  vars_files:\n    - \"{{ inventory_dir }}/group_vars/all.yaml\"\n  roles:\n    - common\n    - get_ocp\n\n- import_playbook: 6_create_nodes.yaml\n- import_playbook: 7_ocp_verification.yaml\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/reinstall_cluster.yaml#play:[0]", "play playbook:playbooks/reinstall_cluster.yaml#play:[1]", "play playbook:playbooks/reinstall_cluster.yaml#play:[2]", "play playbook:playbooks/reinstall_cluster.yaml#play:[3]", "play playbook:playbooks/reinstall_cluster.yaml#play:[4]", "play playbook:playbooks/reinstall_cluster.yaml#play:[5]", "play playbook:playbooks/reinstall_cluster.yaml#play:[6]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/setup_for_hypershift.yaml", "name": "setup_for_hypershift.yaml", "defined_in": "playbooks/setup_for_hypershift.yaml", "local_key": "playbook playbook:playbooks/setup_for_hypershift.yaml", "yaml_lines": "---\n- name: Setup on localhost\n  hosts: localhost\n  vars_files:\n    - \"{{playbook_dir}}/secrets.yaml\"\n  roles:\n    - create_inventory_setup_hypershift\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/setup_for_hypershift.yaml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/site.yaml", "name": "site.yaml", "defined_in": "playbooks/site.yaml", "local_key": "playbook playbook:playbooks/site.yaml", "yaml_lines": "# Master playbook. If you want to do everything all in one, use this.\n---\n- import_playbook: \"0_setup.yaml\"\n- import_playbook: 1_create_lpar.yaml\n- import_playbook: 2_create_kvm_host.yaml\n- import_playbook: 3_setup_kvm_host.yaml\n- import_playbook: 4_create_bastion.yaml\n- import_playbook: 5_setup_bastion.yaml\n- import_playbook: 6_create_nodes.yaml\n- import_playbook: 7_ocp_verification.yaml\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/site.yaml#play:[0]", "play playbook:playbooks/site.yaml#play:[1]", "play playbook:playbooks/site.yaml#play:[2]", "play playbook:playbooks/site.yaml#play:[3]", "play playbook:playbooks/site.yaml#play:[4]", "play playbook:playbooks/site.yaml#play:[5]", "play playbook:playbooks/site.yaml#play:[6]", "play playbook:playbooks/site.yaml#play:[7]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}, {"py/object": "ansible_risk_insight.models.Playbook", "type": "playbook", "key": "playbook playbook:playbooks/test.yaml", "name": "test.yaml", "defined_in": "playbooks/test.yaml", "local_key": "playbook playbook:playbooks/test.yaml", "yaml_lines": "---\n- hosts: localhost\n  gather_facts: false\n  vars:\n    test_var: test\n  tasks:\n    - name: Test variables or anything here\n      debug:\n        msg: \"{{ test_var }}\"\n", "role": "", "collection": "", "plays": ["play playbook:playbooks/test.yaml#play:[0]"], "used_in": [], "annotations": {}, "variables": {}, "options": {}}], "plays": [{"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:roles/robertdebock.epel/molecule/default/converge.yml#play:[0]", "name": "Converge", "defined_in": "roles/robertdebock.epel/molecule/default/converge.yml", "index": 0, "local_key": "play playbook:roles/robertdebock.epel/molecule/default/converge.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ansible-role-epel", "options": {"role": "ansible-role-epel"}, "defined_in": "roles/robertdebock.epel/molecule/default/converge.yml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "all", "become": true, "gather_facts": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:roles/robertdebock.epel/molecule/default/prepare.yml#play:[0]", "name": "Prepare", "defined_in": "roles/robertdebock.epel/molecule/default/prepare.yml", "index": 0, "local_key": "play playbook:roles/robertdebock.epel/molecule/default/prepare.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "robertdebock.bootstrap", "options": {"role": "robertdebock.bootstrap"}, "defined_in": "roles/robertdebock.epel/molecule/default/prepare.yml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "all", "gather_facts": false, "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:roles/robertdebock.epel/molecule/default/verify.yml#play:[0]", "name": "Verify", "defined_in": "roles/robertdebock.epel/molecule/default/verify.yml", "index": 0, "local_key": "play playbook:roles/robertdebock.epel/molecule/default/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:roles/robertdebock.epel/molecule/default/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all", "become": true, "gather_facts": false}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]", "name": "Converge", "defined_in": "roles/robertdebock.openvpn/molecule/default/converge.yml", "index": 0, "local_key": "play playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]#task:[0]", "task playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]#task:[1]", "task playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]#task:[2]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all", "become": true, "gather_facts": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:roles/robertdebock.openvpn/molecule/default/prepare.yml#play:[0]", "name": "Prepare server", "defined_in": "roles/robertdebock.openvpn/molecule/default/prepare.yml", "index": 0, "local_key": "play playbook:roles/robertdebock.openvpn/molecule/default/prepare.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "robertdebock.bootstrap", "options": {"role": "robertdebock.bootstrap"}, "defined_in": "roles/robertdebock.openvpn/molecule/default/prepare.yml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "robertdebock.epel", "options": {"role": "robertdebock.epel"}, "defined_in": "roles/robertdebock.openvpn/molecule/default/prepare.yml", "role_index": 1, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "all", "gather_facts": false, "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:roles/robertdebock.openvpn/molecule/default/verify.yml#play:[0]", "name": "Verify", "defined_in": "roles/robertdebock.openvpn/molecule/default/verify.yml", "index": 0, "local_key": "play playbook:roles/robertdebock.openvpn/molecule/default/verify.yml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:roles/robertdebock.openvpn/molecule/default/verify.yml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "all", "become": true, "gather_facts": false}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/0_setup.yaml#play:[0]", "name": "", "defined_in": "playbooks/0_setup.yaml", "index": 0, "local_key": "play playbook:playbooks/0_setup.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": ["task playbook:playbooks/0_setup.yaml#play:[0]#task:[0]", "task playbook:playbooks/0_setup.yaml#play:[0]#task:[1]", "task playbook:playbooks/0_setup.yaml#play:[0]#task:[2]", "task playbook:playbooks/0_setup.yaml#play:[0]#task:[3]", "task playbook:playbooks/0_setup.yaml#play:[0]#task:[4]", "task playbook:playbooks/0_setup.yaml#play:[0]#task:[5]"], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "set_inventory", "options": {}, "defined_in": "playbooks/0_setup.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "localhost", "connection": "local", "become": false, "gather_facts": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "set_inventory", "path": "roles/set_inventory", "key": "role role:set_inventory"}, {"fqcn": "set_inventory", "path": "roles/set_inventory", "key": "role role:set_inventory"}, {"fqcn": "set_inventory", "path": "roles/set_inventory", "key": "role role:set_inventory"}], "task_loading": {"total": 6, "success": 6, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/0_setup.yaml#play:[1]", "name": "", "defined_in": "playbooks/0_setup.yaml", "index": 1, "local_key": "play playbook:playbooks/0_setup.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "install_packages", "options": {}, "defined_in": "playbooks/0_setup.yaml", "role_index": 0, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ssh_key_gen", "options": {}, "defined_in": "playbooks/0_setup.yaml", "role_index": 1, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ssh_agent", "options": {}, "defined_in": "playbooks/0_setup.yaml", "role_index": 2, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ssh_copy_id", "options": {}, "defined_in": "playbooks/0_setup.yaml", "role_index": 3, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "localhost", "connection": "local", "become": false, "gather_facts": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"packages": "{{ env.pkgs.controller }}", "ssh_target": ["{{ env.file_server.ip }}", "{{ env.file_server.user }}", "{{ env.file_server.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [{"fqcn": "install_packages", "path": "roles/install_packages", "key": "role role:install_packages"}, {"fqcn": "ssh_key_gen", "path": "roles/ssh_key_gen", "key": "role role:ssh_key_gen"}, {"fqcn": "ssh_agent", "path": "roles/ssh_agent", "key": "role role:ssh_agent"}, {"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, {"fqcn": "install_packages", "path": "roles/install_packages", "key": "role role:install_packages"}, {"fqcn": "ssh_key_gen", "path": "roles/ssh_key_gen", "key": "role role:ssh_key_gen"}, {"fqcn": "ssh_agent", "path": "roles/ssh_agent", "key": "role role:ssh_agent"}, {"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, {"fqcn": "install_packages", "path": "roles/install_packages", "key": "role role:install_packages"}, {"fqcn": "ssh_key_gen", "path": "roles/ssh_key_gen", "key": "role role:ssh_key_gen"}, {"fqcn": "ssh_agent", "path": "roles/ssh_agent", "key": "role role:ssh_agent"}, {"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/1_create_lpar.yaml#play:[0]", "name": "", "defined_in": "playbooks/1_create_lpar.yaml", "index": 0, "local_key": "play playbook:playbooks/1_create_lpar.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/1_create_lpar.yaml#play:[0]#task:[0]", "task playbook:playbooks/1_create_lpar.yaml#play:[0]#task:[1]", "task playbook:playbooks/1_create_lpar.yaml#play:[0]#task:[2]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "create_lpar, create, kvm_host_1", "connection": "local", "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/1_create_lpar.yaml#play:[1]", "name": "", "defined_in": "playbooks/1_create_lpar.yaml", "index": 1, "local_key": "play playbook:playbooks/1_create_lpar.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/1_create_lpar.yaml#play:[1]#task:[0]", "task playbook:playbooks/1_create_lpar.yaml#play:[1]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "create_lpar, create, kvm_host_2", "connection": "local"}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/1_create_lpar.yaml#play:[2]", "name": "", "defined_in": "playbooks/1_create_lpar.yaml", "index": 2, "local_key": "play playbook:playbooks/1_create_lpar.yaml#play:[2]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/1_create_lpar.yaml#play:[2]#task:[0]", "task playbook:playbooks/1_create_lpar.yaml#play:[2]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "create_lpar, create, kvm_host_3", "connection": "local"}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[0]", "name": "", "defined_in": "playbooks/2_create_kvm_host.yaml", "index": 0, "local_key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/2_create_kvm_host.yaml#play:[0]#task:[0]", "task playbook:playbooks/2_create_kvm_host.yaml#play:[0]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "file_server", "tags": "update_cfgs, update, kvm_host_1", "become": false, "gather_facts": false}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[1]", "name": "", "defined_in": "playbooks/2_create_kvm_host.yaml", "index": 1, "local_key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/2_create_kvm_host.yaml#play:[1]#task:[0]", "task playbook:playbooks/2_create_kvm_host.yaml#play:[1]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "file_server", "tags": "update_cfgs, update, kvm_host_2", "become": false, "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[2]", "name": "", "defined_in": "playbooks/2_create_kvm_host.yaml", "index": 2, "local_key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[2]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/2_create_kvm_host.yaml#play:[2]#task:[0]", "task playbook:playbooks/2_create_kvm_host.yaml#play:[2]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "file_server", "tags": "update_cfgs, update, kvm_host_3", "become": false, "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[3]", "name": "Boot RHEL on LPAR 1", "defined_in": "playbooks/2_create_kvm_host.yaml", "index": 3, "local_key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[3]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/2_create_kvm_host.yaml#play:[3]#task:[0]", "task playbook:playbooks/2_create_kvm_host.yaml#play:[3]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "create_kvm_host, boot, kvm_host_1", "connection": "local"}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[4]", "name": "Boot RHEL on LPAR 2", "defined_in": "playbooks/2_create_kvm_host.yaml", "index": 4, "local_key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[4]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/2_create_kvm_host.yaml#play:[4]#task:[0]", "task playbook:playbooks/2_create_kvm_host.yaml#play:[4]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "create_kvm_host, boot, kvm_host_2", "connection": "local"}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[5]", "name": "Boot RHEL on LPAR 3", "defined_in": "playbooks/2_create_kvm_host.yaml", "index": 5, "local_key": "play playbook:playbooks/2_create_kvm_host.yaml#play:[5]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/2_create_kvm_host.yaml#play:[5]#task:[0]", "task playbook:playbooks/2_create_kvm_host.yaml#play:[5]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "create_kvm_host, boot, kvm_host_3", "connection": "local"}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[0]", "name": "Copy SSH key to access KVM host 1", "defined_in": "playbooks/3_setup_kvm_host.yaml", "index": 0, "local_key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/3_setup_kvm_host.yaml#play:[0]#task:[0]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[0]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "ssh, ssh_copy_id, section_1, kvm_host_1", "connection": "local", "become": false, "gather_facts": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"ssh_target": ["{{ env.z.lpar1.ip }}", "{{ env.z.lpar1.user }}", "{{ env.z.lpar1.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[1]", "name": "Copy SSH key to access KVM host 2", "defined_in": "playbooks/3_setup_kvm_host.yaml", "index": 1, "local_key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/3_setup_kvm_host.yaml#play:[1]#task:[0]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[1]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "ssh, ssh_copy_id, section_1, kvm_host_2", "connection": "local", "become": false, "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"ssh_target": ["{{ env.z.lpar2.ip }}", "{{ env.z.lpar2.user }}", "{{ env.z.lpar2.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[2]", "name": "Copy SSH key to access KVM host 3", "defined_in": "playbooks/3_setup_kvm_host.yaml", "index": 2, "local_key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[2]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/3_setup_kvm_host.yaml#play:[2]#task:[0]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[2]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "ssh, ssh_copy_id, section_1, kvm_host_3", "connection": "local", "become": false, "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"ssh_target": ["{{ env.z.lpar3.ip }}", "{{ env.z.lpar3.user }}", "{{ env.z.lpar3.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[3]", "name": "Prepare KVM host(s)", "defined_in": "playbooks/3_setup_kvm_host.yaml", "index": 3, "local_key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[3]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": ["task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[0]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[1]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[2]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[3]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[4]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[5]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[6]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[7]", "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[8]"], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "attach_subscription", "options": {"role": "attach_subscription", "when": "env.redhat.username is defined and env.redhat.password is defined"}, "defined_in": "playbooks/3_setup_kvm_host.yaml", "role_index": 0, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "install_packages", "options": {}, "defined_in": "playbooks/3_setup_kvm_host.yaml", "role_index": 1, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "httpd", "options": {}, "defined_in": "playbooks/3_setup_kvm_host.yaml", "role_index": 2, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host", "tags": "setup, section_2", "gather_facts": true, "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"packages": "{{ env.pkgs.kvm }}"}, "roles_info": [{"fqcn": "attach_subscription", "path": "roles/attach_subscription", "key": "role role:attach_subscription"}, {"fqcn": "install_packages", "path": "roles/install_packages", "key": "role role:install_packages"}, {"fqcn": "httpd", "path": "roles/httpd", "key": "role role:httpd"}, {"fqcn": "attach_subscription", "path": "roles/attach_subscription", "key": "role role:attach_subscription"}, {"fqcn": "install_packages", "path": "roles/install_packages", "key": "role role:install_packages"}, {"fqcn": "httpd", "path": "roles/httpd", "key": "role role:httpd"}], "task_loading": {"total": 9, "success": 9, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[4]", "name": "Configure ip_forward in case of NAT", "defined_in": "playbooks/3_setup_kvm_host.yaml", "index": 4, "local_key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[4]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/3_setup_kvm_host.yaml#play:[4]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "kvm_host", "tags": "cfg_ip_forward, section_2", "gather_facts": true, "become": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[5]", "name": "", "defined_in": "playbooks/3_setup_kvm_host.yaml", "index": 5, "local_key": "play playbook:playbooks/3_setup_kvm_host.yaml#play:[5]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "configure_storage", "options": {}, "defined_in": "playbooks/3_setup_kvm_host.yaml", "role_index": 0, "play_index": 5, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "macvtap", "options": {"role": "macvtap", "when": "env.network_mode | upper != 'NAT'"}, "defined_in": "playbooks/3_setup_kvm_host.yaml", "role_index": 1, "play_index": 5, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host", "tags": "setup, section_3", "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "configure_storage", "path": "roles/configure_storage", "key": "role role:configure_storage"}, {"fqcn": "macvtap", "path": "roles/macvtap", "key": "role role:macvtap"}, {"fqcn": "configure_storage", "path": "roles/configure_storage", "key": "role role:configure_storage"}, {"fqcn": "macvtap", "path": "roles/macvtap", "key": "role role:macvtap"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/4_create_bastion.yaml#play:[0]", "name": "4 create bastion", "defined_in": "playbooks/4_create_bastion.yaml", "index": 0, "local_key": "play playbook:playbooks/4_create_bastion.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "common", "options": {}, "defined_in": "playbooks/4_create_bastion.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "create_bastion", "options": {"role": "create_bastion", "when": "env.bastion.create == True"}, "defined_in": "playbooks/4_create_bastion.yaml", "role_index": 1, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host[0]", "become": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml", "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_bastion", "path": "roles/create_bastion", "key": "role role:create_bastion"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_bastion", "path": "roles/create_bastion", "key": "role role:create_bastion"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_bastion", "path": "roles/create_bastion", "key": "role role:create_bastion"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[0]", "name": "Copy ssh key to jumphost if network is NAT and jumphost defined, and add jumphost section to ssh config.", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 0, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ssh_copy_id", "options": {"role": "ssh_copy_id", "tags": "ssh_copy_id", "ssh": null, "when": "(env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ssh_add_config", "options": {"role": "ssh_add_config", "tags": "ssh_copy_id", "ssh": null, "when": "(env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 1, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "ssh, ssh_copy_id, section_1", "connection": "local", "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {"ssh_target": ["{{ env.jumphost.ip }}", "{{ env.jumphost.user }}", "{{ env.jumphost.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [{"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, {"fqcn": "ssh_add_config", "path": "roles/ssh_add_config", "key": "role role:ssh_add_config"}, {"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, {"fqcn": "ssh_add_config", "path": "roles/ssh_add_config", "key": "role role:ssh_add_config"}, {"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, {"fqcn": "ssh_add_config", "path": "roles/ssh_add_config", "key": "role role:ssh_add_config"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[1]", "name": "Configure jumphost if network mode == 'NAT'", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 1, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": ["task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[0]", "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[1]", "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[2]"], "tasks": [], "post_tasks": ["task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[3]"], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ssh_copy_id", "options": {"role": "ssh_copy_id", "ssh": null, "when": "(env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 0, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "jumphost", "tags": "ssh, ssh_copy_id, section_1", "gather_facts": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {"ssh_target": ["{{ env.bastion.networking.ip }}", "{{ env.bastion.access.user }}", "{{ env.bastion.access.pass }}", "{{ env.jumphost.path_to_keypair }}"]}, "roles_info": [{"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, {"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, {"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}], "task_loading": {"total": 4, "success": 4, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[2]", "name": "5 setup bastion - copy SSH key from localhost to access bastion.", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 2, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[2]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ssh_copy_id", "options": {}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 0, "play_index": 2, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "ssh, ssh_copy_id, section_1", "gather_facts": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {"ssh_target": ["{{ env.bastion.networking.ip }}", "{{ env.bastion.access.user }}", "{{ env.bastion.access.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [{"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, {"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, {"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[3]", "name": "5 setup bastion - configure bastion node with essential services", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 3, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[3]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": ["task playbook:playbooks/5_setup_bastion.yaml#play:[3]#task:[0]"], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "attach_subscription", "options": {"role": "attach_subscription", "when": "env.redhat.username is defined and env.redhat.password is defined"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 0, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "install_packages", "options": {}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 1, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ssh_ocp_key_gen", "options": {}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 2, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "set_firewall", "options": {}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 3, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "dns", "options": {"role": "dns", "when": "env.bastion.options.dns"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 4, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "check_dns", "options": {}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 5, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "haproxy", "options": {"role": "haproxy", "when": "env.bastion.options.loadbalancer.on_bastion"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 6, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "httpd", "options": {}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 7, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion", "tags": "services, section_2", "become": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"packages": "{{ env.pkgs.bastion }}"}, "roles_info": [{"fqcn": "attach_subscription", "path": "roles/attach_subscription", "key": "role role:attach_subscription"}, {"fqcn": "install_packages", "path": "roles/install_packages", "key": "role role:install_packages"}, {"fqcn": "ssh_ocp_key_gen", "path": "roles/ssh_ocp_key_gen", "key": "role role:ssh_ocp_key_gen"}, {"fqcn": "set_firewall", "path": "roles/set_firewall", "key": "role role:set_firewall"}, {"fqcn": "dns", "path": "roles/dns", "key": "role role:dns"}, {"fqcn": "check_dns", "path": "roles/check_dns", "key": "role role:check_dns"}, {"fqcn": "haproxy", "path": "roles/haproxy", "key": "role role:haproxy"}, {"fqcn": "httpd", "path": "roles/httpd", "key": "role role:httpd"}, {"fqcn": "attach_subscription", "path": "roles/attach_subscription", "key": "role role:attach_subscription"}, {"fqcn": "install_packages", "path": "roles/install_packages", "key": "role role:install_packages"}, {"fqcn": "ssh_ocp_key_gen", "path": "roles/ssh_ocp_key_gen", "key": "role role:ssh_ocp_key_gen"}, {"fqcn": "set_firewall", "path": "roles/set_firewall", "key": "role role:set_firewall"}, {"fqcn": "dns", "path": "roles/dns", "key": "role role:dns"}, {"fqcn": "check_dns", "path": "roles/check_dns", "key": "role role:check_dns"}, {"fqcn": "haproxy", "path": "roles/haproxy", "key": "role role:haproxy"}, {"fqcn": "httpd", "path": "roles/httpd", "key": "role role:httpd"}, {"fqcn": "attach_subscription", "path": "roles/attach_subscription", "key": "role role:attach_subscription"}, {"fqcn": "install_packages", "path": "roles/install_packages", "key": "role role:install_packages"}, {"fqcn": "ssh_ocp_key_gen", "path": "roles/ssh_ocp_key_gen", "key": "role role:ssh_ocp_key_gen"}, {"fqcn": "set_firewall", "path": "roles/set_firewall", "key": "role role:set_firewall"}, {"fqcn": "dns", "path": "roles/dns", "key": "role role:dns"}, {"fqcn": "check_dns", "path": "roles/check_dns", "key": "role role:check_dns"}, {"fqcn": "haproxy", "path": "roles/haproxy", "key": "role role:haproxy"}, {"fqcn": "httpd", "path": "roles/httpd", "key": "role role:httpd"}], "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[4]", "name": "", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 4, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[4]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "robertdebock.epel", "options": {"role": "robertdebock.epel", "tags": "openvpn", "when": "env.z.high_availability == True"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 0, "play_index": 4, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "robertdebock.openvpn", "options": {"role": "robertdebock.openvpn", "tags": "openvpn", "when": "env.z.high_availability == True"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 1, "play_index": 4, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion", "tags": "services, section_2, openvpn", "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"openvpn_role": "server"}, "roles_info": [{"fqcn": "robertdebock.epel", "path": "roles/robertdebock.epel", "key": "role role:robertdebock.epel"}, {"fqcn": "robertdebock.openvpn", "path": "roles/robertdebock.openvpn", "key": "role role:robertdebock.openvpn"}, {"fqcn": "robertdebock.epel", "path": "roles/robertdebock.epel", "key": "role role:robertdebock.epel"}, {"fqcn": "robertdebock.openvpn", "path": "roles/robertdebock.openvpn", "key": "role role:robertdebock.openvpn"}, {"fqcn": "robertdebock.epel", "path": "roles/robertdebock.epel", "key": "role role:robertdebock.epel"}, {"fqcn": "robertdebock.openvpn", "path": "roles/robertdebock.openvpn", "key": "role role:robertdebock.openvpn"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[5]", "name": "", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 5, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[5]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/5_setup_bastion.yaml#play:[5]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "services, section_2, openvpn", "gather_facts": false}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[6]", "name": "", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 6, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[6]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/5_setup_bastion.yaml#play:[6]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "bastion", "tags": "services, section_2, openvpn", "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[7]", "name": "setup OpenVPN on KVM host(s).", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 7, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[7]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": ["task playbook:playbooks/5_setup_bastion.yaml#play:[7]#task:[0]", "task playbook:playbooks/5_setup_bastion.yaml#play:[7]#task:[1]", "task playbook:playbooks/5_setup_bastion.yaml#play:[7]#task:[2]"], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "robertdebock.epel", "options": {"role": "robertdebock.epel", "tags": "openvpn", "when": "env.z.high_availability == True"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 0, "play_index": 7, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "robertdebock.openvpn", "options": {"role": "robertdebock.openvpn", "tags": "openvpn", "when": "env.z.high_availability == True"}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 1, "play_index": 7, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host", "tags": "services, section_3, openvpn", "become": true, "gather_facts": false}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"openvpn_role": "client", "openvpn_client_server": "{{ env.bastion.networking.ip }}"}, "roles_info": [{"fqcn": "robertdebock.epel", "path": "roles/robertdebock.epel", "key": "role role:robertdebock.epel"}, {"fqcn": "robertdebock.openvpn", "path": "roles/robertdebock.openvpn", "key": "role role:robertdebock.openvpn"}, {"fqcn": "robertdebock.epel", "path": "roles/robertdebock.epel", "key": "role role:robertdebock.epel"}, {"fqcn": "robertdebock.openvpn", "path": "roles/robertdebock.openvpn", "key": "role role:robertdebock.openvpn"}, {"fqcn": "robertdebock.epel", "path": "roles/robertdebock.epel", "key": "role role:robertdebock.epel"}, {"fqcn": "robertdebock.openvpn", "path": "roles/robertdebock.openvpn", "key": "role role:robertdebock.openvpn"}], "task_loading": {"total": 3, "success": 3, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[8]", "name": "", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 8, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[8]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/5_setup_bastion.yaml#play:[8]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "services, section_2, openvpn", "gather_facts": false}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/5_setup_bastion.yaml#play:[9]", "name": "", "defined_in": "playbooks/5_setup_bastion.yaml", "index": 9, "local_key": "play playbook:playbooks/5_setup_bastion.yaml#play:[9]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "common", "options": {}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 0, "play_index": 9, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "get_ocp", "options": {}, "defined_in": "playbooks/5_setup_bastion.yaml", "role_index": 1, "play_index": 9, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion", "tags": "get_ocp, section_3", "become": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "get_ocp", "path": "roles/get_ocp", "key": "role role:get_ocp"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "get_ocp", "path": "roles/get_ocp", "key": "role role:get_ocp"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "get_ocp", "path": "roles/get_ocp", "key": "role role:get_ocp"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/6_create_nodes.yaml#play:[0]", "name": "6 create nodes - prepare KVM guests", "defined_in": "playbooks/6_create_nodes.yaml", "index": 0, "local_key": "play playbook:playbooks/6_create_nodes.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "prep_kvm_guests", "options": {}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "delete_nodes", "options": {}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 1, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host", "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "prep_kvm_guests", "path": "roles/prep_kvm_guests", "key": "role role:prep_kvm_guests"}, {"fqcn": "delete_nodes", "path": "roles/delete_nodes", "key": "role role:delete_nodes"}, {"fqcn": "prep_kvm_guests", "path": "roles/prep_kvm_guests", "key": "role role:prep_kvm_guests"}, {"fqcn": "delete_nodes", "path": "roles/delete_nodes", "key": "role role:delete_nodes"}, {"fqcn": "prep_kvm_guests", "path": "roles/prep_kvm_guests", "key": "role role:prep_kvm_guests"}, {"fqcn": "delete_nodes", "path": "roles/delete_nodes", "key": "role role:delete_nodes"}, {"fqcn": "prep_kvm_guests", "path": "roles/prep_kvm_guests", "key": "role role:prep_kvm_guests"}, {"fqcn": "delete_nodes", "path": "roles/delete_nodes", "key": "role role:delete_nodes"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/6_create_nodes.yaml#play:[1]", "name": "6 create nodes - create bootstrap", "defined_in": "playbooks/6_create_nodes.yaml", "index": 1, "local_key": "play playbook:playbooks/6_create_nodes.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "common", "options": {}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 0, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "create_bootstrap", "options": {}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 1, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host[0]", "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_bootstrap", "path": "roles/create_bootstrap", "key": "role role:create_bootstrap"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_bootstrap", "path": "roles/create_bootstrap", "key": "role role:create_bootstrap"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_bootstrap", "path": "roles/create_bootstrap", "key": "role role:create_bootstrap"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_bootstrap", "path": "roles/create_bootstrap", "key": "role role:create_bootstrap"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/6_create_nodes.yaml#play:[2]", "name": "6 create nodes - create control nodes", "defined_in": "playbooks/6_create_nodes.yaml", "index": 2, "local_key": "play playbook:playbooks/6_create_nodes.yaml#play:[2]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "common", "options": {}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 0, "play_index": 2, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "create_control_nodes", "options": {}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 1, "play_index": 2, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host", "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_control_nodes", "path": "roles/create_control_nodes", "key": "role role:create_control_nodes"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_control_nodes", "path": "roles/create_control_nodes", "key": "role role:create_control_nodes"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_control_nodes", "path": "roles/create_control_nodes", "key": "role role:create_control_nodes"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_control_nodes", "path": "roles/create_control_nodes", "key": "role role:create_control_nodes"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/6_create_nodes.yaml#play:[3]", "name": "6 create nodes - wait for bootstrap to connect control plane (for non-root user)", "defined_in": "playbooks/6_create_nodes.yaml", "index": 3, "local_key": "play playbook:playbooks/6_create_nodes.yaml#play:[3]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "wait_for_bootstrap", "options": {"role": "wait_for_bootstrap", "when": "env.bastion.access.user != \"root\""}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 0, "play_index": 3, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion", "become": true, "environment": {"KUBECONFIG": "/home/{{ env.bastion.access.user }}/.kube/config"}, "gather_facts": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "wait_for_bootstrap", "path": "roles/wait_for_bootstrap", "key": "role role:wait_for_bootstrap"}, {"fqcn": "wait_for_bootstrap", "path": "roles/wait_for_bootstrap", "key": "role role:wait_for_bootstrap"}, {"fqcn": "wait_for_bootstrap", "path": "roles/wait_for_bootstrap", "key": "role role:wait_for_bootstrap"}, {"fqcn": "wait_for_bootstrap", "path": "roles/wait_for_bootstrap", "key": "role role:wait_for_bootstrap"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/6_create_nodes.yaml#play:[4]", "name": "6 create nodes - wait for bootstrap to connect to control plane (for root user)", "defined_in": "playbooks/6_create_nodes.yaml", "index": 4, "local_key": "play playbook:playbooks/6_create_nodes.yaml#play:[4]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "wait_for_bootstrap", "options": {"role": "wait_for_bootstrap", "when": "env.bastion.access.user == \"root\""}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 0, "play_index": 4, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion", "become": true, "environment": {"KUBECONFIG": "/{{ env.bastion.access.user }}/.kube/config"}, "gather_facts": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "wait_for_bootstrap", "path": "roles/wait_for_bootstrap", "key": "role role:wait_for_bootstrap"}, {"fqcn": "wait_for_bootstrap", "path": "roles/wait_for_bootstrap", "key": "role role:wait_for_bootstrap"}, {"fqcn": "wait_for_bootstrap", "path": "roles/wait_for_bootstrap", "key": "role role:wait_for_bootstrap"}, {"fqcn": "wait_for_bootstrap", "path": "roles/wait_for_bootstrap", "key": "role role:wait_for_bootstrap"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/6_create_nodes.yaml#play:[5]", "name": "6 create nodes - once bootstrapping is complete, tear down bootstrap.", "defined_in": "playbooks/6_create_nodes.yaml", "index": 5, "local_key": "play playbook:playbooks/6_create_nodes.yaml#play:[5]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/6_create_nodes.yaml#play:[5]#task:[0]", "task playbook:playbooks/6_create_nodes.yaml#play:[5]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "kvm_host[0]", "tags": "create_nodes, teardown_bootstrap", "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/6_create_nodes.yaml#play:[6]", "name": "6 create nodes - once bootstrapping is complete, create compute nodes.", "defined_in": "playbooks/6_create_nodes.yaml", "index": 6, "local_key": "play playbook:playbooks/6_create_nodes.yaml#play:[6]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "common", "options": {}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 0, "play_index": 6, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "create_compute_nodes", "options": {}, "defined_in": "playbooks/6_create_nodes.yaml", "role_index": 1, "play_index": 6, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host", "tags": "create_compute_nodes", "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_compute_nodes", "path": "roles/create_compute_nodes", "key": "role role:create_compute_nodes"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_compute_nodes", "path": "roles/create_compute_nodes", "key": "role role:create_compute_nodes"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_compute_nodes", "path": "roles/create_compute_nodes", "key": "role role:create_compute_nodes"}, {"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "create_compute_nodes", "path": "roles/create_compute_nodes", "key": "role role:create_compute_nodes"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/7_ocp_verification.yaml#play:[0]", "name": "7 OCP verification", "defined_in": "playbooks/7_ocp_verification.yaml", "index": 0, "local_key": "play playbook:playbooks/7_ocp_verification.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "approve_certs", "options": {}, "defined_in": "playbooks/7_ocp_verification.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "check_nodes", "options": {}, "defined_in": "playbooks/7_ocp_verification.yaml", "role_index": 1, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "approve_certs", "options": {"role": "approve_certs", "approve_certs_cleanup": true}, "defined_in": "playbooks/7_ocp_verification.yaml", "role_index": 2, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "wait_for_cluster_operators", "options": {}, "defined_in": "playbooks/7_ocp_verification.yaml", "role_index": 3, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "wait_for_install_complete", "options": {}, "defined_in": "playbooks/7_ocp_verification.yaml", "role_index": 4, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion", "become": true, "environment": {"KUBECONFIG": "{{ '/home/' if (env.bastion.access.user != 'root') else '/'}}{{ env.bastion.access.user }}/.kube/config"}, "gather_facts": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "check_nodes", "path": "roles/check_nodes", "key": "role role:check_nodes"}, {"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "wait_for_cluster_operators", "path": "roles/wait_for_cluster_operators", "key": "role role:wait_for_cluster_operators"}, {"fqcn": "wait_for_install_complete", "path": "roles/wait_for_install_complete", "key": "role role:wait_for_install_complete"}, {"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "check_nodes", "path": "roles/check_nodes", "key": "role role:check_nodes"}, {"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "wait_for_cluster_operators", "path": "roles/wait_for_cluster_operators", "key": "role role:wait_for_cluster_operators"}, {"fqcn": "wait_for_install_complete", "path": "roles/wait_for_install_complete", "key": "role role:wait_for_install_complete"}, {"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "check_nodes", "path": "roles/check_nodes", "key": "role role:check_nodes"}, {"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "wait_for_cluster_operators", "path": "roles/wait_for_cluster_operators", "key": "role role:wait_for_cluster_operators"}, {"fqcn": "wait_for_install_complete", "path": "roles/wait_for_install_complete", "key": "role role:wait_for_install_complete"}, {"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "check_nodes", "path": "roles/check_nodes", "key": "role role:check_nodes"}, {"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "wait_for_cluster_operators", "path": "roles/wait_for_cluster_operators", "key": "role role:wait_for_cluster_operators"}, {"fqcn": "wait_for_install_complete", "path": "roles/wait_for_install_complete", "key": "role role:wait_for_install_complete"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_agents_and_wait_for_install_complete.yaml#play:[0]", "name": "Create Agents", "defined_in": "playbooks/create_agents_and_wait_for_install_complete.yaml", "index": 0, "local_key": "play playbook:playbooks/create_agents_and_wait_for_install_complete.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "boot_agents_hypershift", "options": {}, "defined_in": "playbooks/create_agents_and_wait_for_install_complete.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host_hypershift", "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "boot_agents_hypershift", "path": "roles/boot_agents_hypershift", "key": "role role:boot_agents_hypershift"}, {"fqcn": "boot_agents_hypershift", "path": "roles/boot_agents_hypershift", "key": "role role:boot_agents_hypershift"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_agents_and_wait_for_install_complete.yaml#play:[1]", "name": "Scale Nodepool & Configure Haproxy on bastion for hosted workers", "defined_in": "playbooks/create_agents_and_wait_for_install_complete.yaml", "index": 1, "local_key": "play playbook:playbooks/create_agents_and_wait_for_install_complete.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "scale_nodepool_and_wait_for_workers_hypershift", "options": {}, "defined_in": "playbooks/create_agents_and_wait_for_install_complete.yaml", "role_index": 0, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "add_hc_workers_to_haproxy_hypershift", "options": {}, "defined_in": "playbooks/create_agents_and_wait_for_install_complete.yaml", "role_index": 1, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion_hypershift"}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "scale_nodepool_and_wait_for_workers_hypershift", "path": "roles/scale_nodepool_and_wait_for_workers_hypershift", "key": "role role:scale_nodepool_and_wait_for_workers_hypershift"}, {"fqcn": "add_hc_workers_to_haproxy_hypershift", "path": "roles/add_hc_workers_to_haproxy_hypershift", "key": "role role:add_hc_workers_to_haproxy_hypershift"}, {"fqcn": "scale_nodepool_and_wait_for_workers_hypershift", "path": "roles/scale_nodepool_and_wait_for_workers_hypershift", "key": "role role:scale_nodepool_and_wait_for_workers_hypershift"}, {"fqcn": "add_hc_workers_to_haproxy_hypershift", "path": "roles/add_hc_workers_to_haproxy_hypershift", "key": "role role:add_hc_workers_to_haproxy_hypershift"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_agents_and_wait_for_install_complete.yaml#play:[2]", "name": "Wait for all Console operators to come up", "defined_in": "playbooks/create_agents_and_wait_for_install_complete.yaml", "index": 2, "local_key": "play playbook:playbooks/create_agents_and_wait_for_install_complete.yaml#play:[2]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "wait_for_hc_to_complete_hypershift", "options": {}, "defined_in": "playbooks/create_agents_and_wait_for_install_complete.yaml", "role_index": 0, "play_index": 2, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion_hypershift"}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "wait_for_hc_to_complete_hypershift", "path": "roles/wait_for_hc_to_complete_hypershift", "key": "role role:wait_for_hc_to_complete_hypershift"}, {"fqcn": "wait_for_hc_to_complete_hypershift", "path": "roles/wait_for_hc_to_complete_hypershift", "key": "role role:wait_for_hc_to_complete_hypershift"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_compute_node.yaml#play:[0]", "name": "Add an additional compute node", "defined_in": "playbooks/create_compute_node.yaml", "index": 0, "local_key": "play playbook:playbooks/create_compute_node.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": ["task playbook:playbooks/create_compute_node.yaml#play:[0]#task:[0]", "task playbook:playbooks/create_compute_node.yaml#play:[0]#task:[1]"], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "common", "options": {"role": "common"}, "defined_in": "playbooks/create_compute_node.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "print_node_status", "options": {"role": "print_node_status"}, "defined_in": "playbooks/create_compute_node.yaml", "role_index": 1, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "update_ignition_files", "options": {"role": "update_ignition_files"}, "defined_in": "playbooks/create_compute_node.yaml", "role_index": 2, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "dns_update", "options": {"role": "dns_update", "when": "env.bastion.options.dns is defined and env.bastion.options.dns", "param_dns_cmd": "add", "param_dns_hostname": "{{ day2_compute_node.vm_hostname }}", "param_dns_ip": "{{ day2_compute_node.vm_ip }}"}, "defined_in": "playbooks/create_compute_node.yaml", "role_index": 3, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "create_compute_node", "options": {"role": "create_compute_node", "param_compute_node": "{{ day2_compute_node }}"}, "defined_in": "playbooks/create_compute_node.yaml", "role_index": 4, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "approve_certs", "options": {"role": "approve_certs"}, "defined_in": "playbooks/create_compute_node.yaml", "role_index": 5, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "wait_for_node", "options": {"role": "wait_for_node", "wait_for_node_name": "{{ day2_compute_node.vm_hostname }}"}, "defined_in": "playbooks/create_compute_node.yaml", "role_index": 6, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "approve_certs", "options": {"role": "approve_certs", "approve_certs_cleanup": true}, "defined_in": "playbooks/create_compute_node.yaml", "role_index": 7, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "print_node_status", "options": {"role": "print_node_status"}, "defined_in": "playbooks/create_compute_node.yaml", "role_index": 8, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion", "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "print_node_status", "path": "roles/print_node_status", "key": "role role:print_node_status"}, {"fqcn": "update_ignition_files", "path": "roles/update_ignition_files", "key": "role role:update_ignition_files"}, {"fqcn": "dns_update", "path": "roles/dns_update", "key": "role role:dns_update"}, {"fqcn": "create_compute_node", "path": "roles/create_compute_node", "key": "role role:create_compute_node"}, {"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "wait_for_node", "path": "roles/wait_for_node", "key": "role role:wait_for_node"}, {"fqcn": "approve_certs", "path": "roles/approve_certs", "key": "role role:approve_certs"}, {"fqcn": "print_node_status", "path": "roles/print_node_status", "key": "role role:print_node_status"}], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[0]", "name": "Install Prerequisites on kvm_host", "defined_in": "playbooks/create_hosted_cluster.yaml", "index": 0, "local_key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/create_hosted_cluster.yaml#play:[0]#task:[0]", "task playbook:playbooks/create_hosted_cluster.yaml#play:[0]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "kvm_host_hypershift", "become": true, "vars_files": ["{{playbook_dir}}/secrets.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[1]", "name": "Create macvtap network", "defined_in": "playbooks/create_hosted_cluster.yaml", "index": 1, "local_key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/create_hosted_cluster.yaml#play:[1]#task:[0]", "task playbook:playbooks/create_hosted_cluster.yaml#play:[1]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "kvm_host_hypershift", "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[2]", "name": "Create bastion for hypershift", "defined_in": "playbooks/create_hosted_cluster.yaml", "index": 2, "local_key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[2]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/create_hosted_cluster.yaml#play:[2]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "kvm_host_hypershift", "become": true, "vars_files": ["{{playbook_dir}}/secrets.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[3]", "name": "Configuring Bastion", "defined_in": "playbooks/create_hosted_cluster.yaml", "index": 3, "local_key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[3]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[0]", "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[1]", "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[2]", "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[3]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "bastion_hypershift", "become": true, "vars_files": ["{{playbook_dir}}/secrets.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [], "task_loading": {"total": 4, "success": 4, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[4]", "name": "Create AgentServiceConfig Hosted Control Plane and InfraEnv", "defined_in": "playbooks/create_hosted_cluster.yaml", "index": 4, "local_key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[4]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "install_mce_operator", "options": {}, "defined_in": "playbooks/create_hosted_cluster.yaml", "role_index": 0, "play_index": 4, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "create_agentserviceconfig_hypershift", "options": {}, "defined_in": "playbooks/create_hosted_cluster.yaml", "role_index": 1, "play_index": 4, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "create_hcp_InfraEnv_hypershift", "options": {}, "defined_in": "playbooks/create_hosted_cluster.yaml", "role_index": 2, "play_index": 4, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion_hypershift", "vars_files": ["{{playbook_dir}}/secrets.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "install_mce_operator", "path": "roles/install_mce_operator", "key": "role role:install_mce_operator"}, {"fqcn": "create_agentserviceconfig_hypershift", "path": "roles/create_agentserviceconfig_hypershift", "key": "role role:create_agentserviceconfig_hypershift"}, {"fqcn": "create_hcp_InfraEnv_hypershift", "path": "roles/create_hcp_InfraEnv_hypershift", "key": "role role:create_hcp_InfraEnv_hypershift"}, {"fqcn": "install_mce_operator", "path": "roles/install_mce_operator", "key": "role role:install_mce_operator"}, {"fqcn": "create_agentserviceconfig_hypershift", "path": "roles/create_agentserviceconfig_hypershift", "key": "role role:create_agentserviceconfig_hypershift"}, {"fqcn": "create_hcp_InfraEnv_hypershift", "path": "roles/create_hcp_InfraEnv_hypershift", "key": "role role:create_hcp_InfraEnv_hypershift"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[5]", "name": "Download Required images for booting Agents", "defined_in": "playbooks/create_hosted_cluster.yaml", "index": 5, "local_key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[5]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "setup_for_agents_hypershift", "options": {}, "defined_in": "playbooks/create_hosted_cluster.yaml", "role_index": 0, "play_index": 5, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host_hypershift", "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "setup_for_agents_hypershift", "path": "roles/setup_for_agents_hypershift", "key": "role role:setup_for_agents_hypershift"}, {"fqcn": "setup_for_agents_hypershift", "path": "roles/setup_for_agents_hypershift", "key": "role role:setup_for_agents_hypershift"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[6]", "name": "Configure httpd on bastion for hosting rootfs", "defined_in": "playbooks/create_hosted_cluster.yaml", "index": 6, "local_key": "play playbook:playbooks/create_hosted_cluster.yaml#play:[6]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "download_rootfs_hypershift", "options": {}, "defined_in": "playbooks/create_hosted_cluster.yaml", "role_index": 0, "play_index": 6, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion_hypershift"}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "download_rootfs_hypershift", "path": "roles/download_rootfs_hypershift", "key": "role role:download_rootfs_hypershift"}, {"fqcn": "download_rootfs_hypershift", "path": "roles/download_rootfs_hypershift", "key": "role role:download_rootfs_hypershift"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/delete_compute_node.yaml#play:[0]", "name": "Delete compute node", "defined_in": "playbooks/delete_compute_node.yaml", "index": 0, "local_key": "play playbook:playbooks/delete_compute_node.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": ["task playbook:playbooks/delete_compute_node.yaml#play:[0]#task:[0]", "task playbook:playbooks/delete_compute_node.yaml#play:[0]#task:[1]"], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "delete_compute_node", "options": {"role": "delete_compute_node", "param_compute_node": "{{ day2_compute_node }}"}, "defined_in": "playbooks/delete_compute_node.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "dns_update", "options": {"role": "dns_update", "when": "env.bastion.options.dns is defined and env.bastion.options.dns", "param_dns_cmd": "delete", "param_dns_hostname": "{{ day2_compute_node.vm_hostname }}", "param_dns_ip": "{{ day2_compute_node.vm_ip }}"}, "defined_in": "playbooks/delete_compute_node.yaml", "role_index": 1, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "print_node_status", "options": {"role": "print_node_status"}, "defined_in": "playbooks/delete_compute_node.yaml", "role_index": 2, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion", "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "delete_compute_node", "path": "roles/delete_compute_node", "key": "role role:delete_compute_node"}, {"fqcn": "dns_update", "path": "roles/dns_update", "key": "role role:dns_update"}, {"fqcn": "print_node_status", "path": "roles/print_node_status", "key": "role role:print_node_status"}], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/destroy_cluster_hypershift.yaml#play:[0]", "name": "Delete Cluster Resources", "defined_in": "playbooks/destroy_cluster_hypershift.yaml", "index": 0, "local_key": "play playbook:playbooks/destroy_cluster_hypershift.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "delete_resources_bastion_hypershift", "options": {}, "defined_in": "playbooks/destroy_cluster_hypershift.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion_hypershift", "vars_files": ["{{playbook_dir}}/secrets.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "delete_resources_bastion_hypershift", "path": "roles/delete_resources_bastion_hypershift", "key": "role role:delete_resources_bastion_hypershift"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/destroy_cluster_hypershift.yaml#play:[1]", "name": "Delete Resources on kvm host", "defined_in": "playbooks/destroy_cluster_hypershift.yaml", "index": 1, "local_key": "play playbook:playbooks/destroy_cluster_hypershift.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "delete_resources_kvm_host_hypershift", "options": {}, "defined_in": "playbooks/destroy_cluster_hypershift.yaml", "role_index": 0, "play_index": 1, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "kvm_host_hypershift", "become": true}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "delete_resources_kvm_host_hypershift", "path": "roles/delete_resources_kvm_host_hypershift", "key": "role role:delete_resources_kvm_host_hypershift"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/hypershift.yaml#play:[0]", "name": "", "defined_in": "playbooks/hypershift.yaml", "index": 0, "local_key": "play playbook:playbooks/hypershift.yaml#play:[0]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "create_hosted_cluster.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/hypershift.yaml#play:[1]", "name": "", "defined_in": "playbooks/hypershift.yaml", "index": 1, "local_key": "play playbook:playbooks/hypershift.yaml#play:[1]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "create_agents_and_wait_for_install_complete.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/pre-existing_site.yaml#play:[0]", "name": "", "defined_in": "playbooks/pre-existing_site.yaml", "index": 0, "local_key": "play playbook:playbooks/pre-existing_site.yaml#play:[0]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "0_setup.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/pre-existing_site.yaml#play:[1]", "name": "", "defined_in": "playbooks/pre-existing_site.yaml", "index": 1, "local_key": "play playbook:playbooks/pre-existing_site.yaml#play:[1]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "4_create_bastion.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/pre-existing_site.yaml#play:[2]", "name": "", "defined_in": "playbooks/pre-existing_site.yaml", "index": 2, "local_key": "play playbook:playbooks/pre-existing_site.yaml#play:[2]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "5_setup_bastion.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/pre-existing_site.yaml#play:[3]", "name": "", "defined_in": "playbooks/pre-existing_site.yaml", "index": 3, "local_key": "play playbook:playbooks/pre-existing_site.yaml#play:[3]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "6_create_nodes.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/pre-existing_site.yaml#play:[4]", "name": "", "defined_in": "playbooks/pre-existing_site.yaml", "index": 4, "local_key": "play playbook:playbooks/pre-existing_site.yaml#play:[4]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "7_ocp_verification.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/reinstall_cluster.yaml#play:[0]", "name": "Re-Install cluster - Copy SSH key from localhost to access bastion", "defined_in": "playbooks/reinstall_cluster.yaml", "index": 0, "local_key": "play playbook:playbooks/reinstall_cluster.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "ssh_copy_id", "options": {}, "defined_in": "playbooks/reinstall_cluster.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "ssh, ssh_copy_id, section_1", "gather_facts": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": null, "variables": {"ssh_target": ["{{ env.bastion.networking.ip }}", "{{ env.bastion.access.user }}", "{{ env.bastion.access.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [{"fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/reinstall_cluster.yaml#play:[1]", "name": "Re-Install cluster - Copy SSH key to access KVM host 1", "defined_in": "playbooks/reinstall_cluster.yaml", "index": 1, "local_key": "play playbook:playbooks/reinstall_cluster.yaml#play:[1]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/reinstall_cluster.yaml#play:[1]#task:[0]", "task playbook:playbooks/reinstall_cluster.yaml#play:[1]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "ssh, ssh_copy_id, section_1, kvm_host_1", "connection": "local", "become": false, "gather_facts": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"ssh_target": ["{{ env.z.lpar1.ip }}", "{{ env.z.lpar1.user }}", "{{ env.z.lpar1.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/reinstall_cluster.yaml#play:[2]", "name": "Re-Install cluster - Copy SSH key to access KVM host 2", "defined_in": "playbooks/reinstall_cluster.yaml", "index": 2, "local_key": "play playbook:playbooks/reinstall_cluster.yaml#play:[2]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/reinstall_cluster.yaml#play:[2]#task:[0]", "task playbook:playbooks/reinstall_cluster.yaml#play:[2]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "ssh, ssh_copy_id, section_1, kvm_host_2", "connection": "local", "become": false, "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"ssh_target": ["{{ env.z.lpar2.ip }}", "{{ env.z.lpar2.user }}", "{{ env.z.lpar2.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/reinstall_cluster.yaml#play:[3]", "name": "Re-Install cluster - Copy SSH key to access KVM host 3", "defined_in": "playbooks/reinstall_cluster.yaml", "index": 3, "local_key": "play playbook:playbooks/reinstall_cluster.yaml#play:[3]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/reinstall_cluster.yaml#play:[3]#task:[0]", "task playbook:playbooks/reinstall_cluster.yaml#play:[3]#task:[1]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "tags": "ssh, ssh_copy_id, section_1, kvm_host_3", "connection": "local", "become": false, "gather_facts": false, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {"ssh_target": [" {{ env.z.lpar3.ip }}", "{{ env.z.lpar3.user }}", "{{ env.z.lpar3.pass }}", "{{ path_to_key_pair }}"]}, "roles_info": [], "task_loading": {"total": 2, "success": 2, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/reinstall_cluster.yaml#play:[4]", "name": "Re-Install cluster - Update ignitions and other install files", "defined_in": "playbooks/reinstall_cluster.yaml", "index": 4, "local_key": "play playbook:playbooks/reinstall_cluster.yaml#play:[4]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "common", "options": {}, "defined_in": "playbooks/reinstall_cluster.yaml", "role_index": 0, "play_index": 4, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}, {"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "get_ocp", "options": {}, "defined_in": "playbooks/reinstall_cluster.yaml", "role_index": 1, "play_index": 4, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "bastion", "become": true, "vars_files": ["{{ inventory_dir }}/group_vars/all.yaml"]}, "collections_in_play": [], "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "roles_info": [{"fqcn": "common", "path": "roles/common", "key": "role role:common"}, {"fqcn": "get_ocp", "path": "roles/get_ocp", "key": "role role:get_ocp"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/reinstall_cluster.yaml#play:[5]", "name": "", "defined_in": "playbooks/reinstall_cluster.yaml", "index": 5, "local_key": "play playbook:playbooks/reinstall_cluster.yaml#play:[5]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "6_create_nodes.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/reinstall_cluster.yaml#play:[6]", "name": "", "defined_in": "playbooks/reinstall_cluster.yaml", "index": 6, "local_key": "play playbook:playbooks/reinstall_cluster.yaml#play:[6]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "7_ocp_verification.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/setup_for_hypershift.yaml#play:[0]", "name": "Setup on localhost", "defined_in": "playbooks/setup_for_hypershift.yaml", "index": 0, "local_key": "play playbook:playbooks/setup_for_hypershift.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [{"py/object": "ansible_risk_insight.models.RoleInPlay", "type": "roleinplay", "key": "", "name": "create_inventory_setup_hypershift", "options": {}, "defined_in": "playbooks/setup_for_hypershift.yaml", "role_index": 0, "play_index": 0, "role": "", "collection": "", "resolved_name": "", "possible_candidates": [], "annotations": {}, "collections_in_play": []}], "module_defaults": {}, "options": {"hosts": "localhost", "vars_files": ["{{playbook_dir}}/secrets.yaml"]}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [{"fqcn": "create_inventory_setup_hypershift", "path": "roles/create_inventory_setup_hypershift", "key": "role role:create_inventory_setup_hypershift"}], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/site.yaml#play:[0]", "name": "", "defined_in": "playbooks/site.yaml", "index": 0, "local_key": "play playbook:playbooks/site.yaml#play:[0]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "0_setup.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/site.yaml#play:[1]", "name": "", "defined_in": "playbooks/site.yaml", "index": 1, "local_key": "play playbook:playbooks/site.yaml#play:[1]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "1_create_lpar.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/site.yaml#play:[2]", "name": "", "defined_in": "playbooks/site.yaml", "index": 2, "local_key": "play playbook:playbooks/site.yaml#play:[2]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "2_create_kvm_host.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/site.yaml#play:[3]", "name": "", "defined_in": "playbooks/site.yaml", "index": 3, "local_key": "play playbook:playbooks/site.yaml#play:[3]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "3_setup_kvm_host.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/site.yaml#play:[4]", "name": "", "defined_in": "playbooks/site.yaml", "index": 4, "local_key": "play playbook:playbooks/site.yaml#play:[4]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "4_create_bastion.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/site.yaml#play:[5]", "name": "", "defined_in": "playbooks/site.yaml", "index": 5, "local_key": "play playbook:playbooks/site.yaml#play:[5]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "5_setup_bastion.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/site.yaml#play:[6]", "name": "", "defined_in": "playbooks/site.yaml", "index": 6, "local_key": "play playbook:playbooks/site.yaml#play:[6]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "6_create_nodes.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/site.yaml#play:[7]", "name": "", "defined_in": "playbooks/site.yaml", "index": 7, "local_key": "play playbook:playbooks/site.yaml#play:[7]", "role": "", "collection": "", "import_module": "import_playbook", "import_playbook": "7_ocp_verification.yaml", "pre_tasks": [], "tasks": [], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {}, "collections_in_play": [], "become": null, "variables": {}, "roles_info": [], "task_loading": {"total": 0, "success": 0, "failure": 0, "errors": []}}, {"py/object": "ansible_risk_insight.models.Play", "type": "play", "key": "play playbook:playbooks/test.yaml#play:[0]", "name": "", "defined_in": "playbooks/test.yaml", "index": 0, "local_key": "play playbook:playbooks/test.yaml#play:[0]", "role": "", "collection": "", "import_module": "", "import_playbook": "", "pre_tasks": [], "tasks": ["task playbook:playbooks/test.yaml#play:[0]#task:[0]"], "post_tasks": [], "roles": [], "module_defaults": {}, "options": {"hosts": "localhost", "gather_facts": false}, "collections_in_play": [], "become": null, "variables": {"test_var": "test"}, "roles_info": [], "task_loading": {"total": 1, "success": 1, "failure": 0, "errors": []}}], "tasks": [{"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[0]", "name": "Get the IPs of Hosted Cluster Workers", "module": "shell", "index": 0, "play_index": -1, "defined_in": "roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[0]", "role": "add_hc_workers_to_haproxy_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"hosted_workers": "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get the IPs of Hosted Cluster Workers", "register": "hosted_workers"}, "module_options": "oc get no -o wide  --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig --no-headers|grep -i worker| awk '{print $6}'", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get the IPs of Hosted Cluster Workers\n  shell: oc get no -o wide  --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig --no-headers|grep -i worker| awk '{print $6}'\n  register: hosted_workers\n", "line_num_in_file": [2, 5], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["hosted_workers"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[1]", "name": "Configuring HAproxy for Hosted Cluster", "module": "blockinfile", "index": 1, "play_index": -1, "defined_in": "roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[1]", "role": "add_hc_workers_to_haproxy_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Configuring HAproxy for Hosted Cluster"}, "module_options": {"path": "/etc/haproxy/haproxy.cfg", "block": "listen {{ hypershift.hcp.hosted_cluster_name }}-console\n    mode tcp\n    bind {{ hypershift.bastion_hypershift }}:443\n    bind {{ hypershift.bastion_hypershift }}:80\n"}, "executable": "blockinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Configuring HAproxy for Hosted Cluster\n  blockinfile:\n    path: /etc/haproxy/haproxy.cfg\n    block: |\n      listen {{ hypershift.hcp.hosted_cluster_name }}-console\n          mode tcp\n          bind {{ hypershift.bastion_hypershift }}:443\n          bind {{ hypershift.bastion_hypershift }}:80\n", "line_num_in_file": [6, 14], "resolved_name": "ansible.builtin.blockinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "blockinfile", "fqcn": "ansible.builtin.blockinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.blockinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.blockinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.blockinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block", "content", "create", "group", "insertafter", "insertbefore", "marker", "marker_begin", "marker_end", "mode", "owner", "path", "dest", "destfile", "name", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "block", "value": "listen {{ hypershift.hcp.hosted_cluster_name }}-console\n    mode tcp\n    bind {{ hypershift.bastion_hypershift }}:443\n    bind {{ hypershift.bastion_hypershift }}:80\n", "undefined_variables": ["hypershift.hcp.hosted_cluster_name", "hypershift.bastion_hypershift"]}], "unknown_type_values": [{"key": "block", "expected_type": "str", "unknown_type_value": "listen {{ hypershift.hcp.hosted_cluster_name }}-console\n    mode tcp\n    bind {{ hypershift.bastion_hypershift }}:443\n    bind {{ hypershift.bastion_hypershift }}:80\n"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["hosted_workers"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name", "hypershift.bastion_hypershift"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[2]", "name": "Add Hosted Cluster Worker IPs to Haproxy", "module": "lineinfile", "index": 2, "play_index": -1, "defined_in": "roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[2]", "role": "add_hc_workers_to_haproxy_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Add Hosted Cluster Worker IPs to Haproxy", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": {"path": "/etc/haproxy/haproxy.cfg", "line": "    server {{ hypershift.hcp.hosted_cluster_name }}-worker-{{item}} {{ hosted_workers.stdout_lines[item]}}"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add Hosted Cluster Worker IPs to Haproxy\n  lineinfile:\n    path: /etc/haproxy/haproxy.cfg\n    line: \"    server {{ hypershift.hcp.hosted_cluster_name }}-worker-{{item}} {{ hosted_workers.stdout_lines[item]}}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [15, 20], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "    server {{ hypershift.hcp.hosted_cluster_name }}-worker-{{item}} {{ hosted_workers.stdout_lines[item]}}", "undefined_variables": ["hypershift.hcp.hosted_cluster_name", "hosted_workers.stdout_lines[item]"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "    server {{ hypershift.hcp.hosted_cluster_name }}-worker-{{item}} {{ hosted_workers.stdout_lines[item]}}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name", "hypershift.bastion_hypershift"], "vars_defined_in_previous_tasks": ["hosted_workers"], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name", "hosted_workers.stdout_lines[item]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[3]", "name": "Kill the process on 443 port if present", "module": "shell", "index": 3, "play_index": -1, "defined_in": "roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[3]", "role": "add_hc_workers_to_haproxy_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Kill the process on 443 port if present"}, "module_options": "kill $(netstat -tlnp | grep \":443 \" | awk '{print $7}' | awk -F '/' '{print $1}')", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Kill the process on 443 port if present\n  shell: kill $(netstat -tlnp | grep \":443 \" | awk '{print $7}' | awk -F '/' '{print $1}')\n", "line_num_in_file": [21, 23], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name", "hypershift.bastion_hypershift", "item", "range(hypershift.agents_parms.agents_count", "hosted_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["hosted_workers"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:add_hc_workers_to_haproxy_hypershift#taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[4]", "name": "restart haproxy", "module": "service", "index": 4, "play_index": -1, "defined_in": "roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/add_hc_workers_to_haproxy_hypershift/tasks/main.yaml#task:[4]", "role": "add_hc_workers_to_haproxy_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "restart haproxy"}, "module_options": {"name": "haproxy.service", "state": "restarted", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: restart haproxy\n  service:\n    name: haproxy.service\n    state: restarted\n    enabled: true", "line_num_in_file": [24, 29], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name", "hypershift.bastion_hypershift", "item", "range(hypershift.agents_parms.agents_count", "hosted_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["hosted_workers"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:approve_certs#taskfile:roles/approve_certs/tasks/main.yaml#task:[0]", "name": "Cancel async 'approve_certs_task', if exists", "module": "ansible.builtin.async_status", "index": 0, "play_index": -1, "defined_in": "roles/approve_certs/tasks/main.yaml", "local_key": "task taskfile:roles/approve_certs/tasks/main.yaml#task:[0]", "role": "approve_certs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Cancel async 'approve_certs_task', if exists", "tags": "approve_certs", "failed_when": false, "when": "approve_certs_task is defined and approve_certs_cleanup"}, "module_options": {"jid": "{{ approve_certs_task.ansible_job_id }}", "mode": "cleanup"}, "executable": "ansible.builtin.async_status", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Cancel async 'approve_certs_task', if exists\n  tags: approve_certs\n  ansible.builtin.async_status:\n    jid: \"{{ approve_certs_task.ansible_job_id }}\"\n    mode: cleanup\n  failed_when: false\n  when: approve_certs_task is defined and approve_certs_cleanup\n", "line_num_in_file": [2, 9], "resolved_name": "ansible.builtin.async_status", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "async_status", "fqcn": "ansible.builtin.async_status", "key": "module collection:ansible.builtin#module:ansible.builtin.async_status"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.async_status", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.async_status", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["jid", "mode"], "required_arg_keys": [{"key": "jid", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "jid", "value": "{{ approve_certs_task.ansible_job_id }}", "undefined_variables": ["approve_certs_task.ansible_job_id"]}], "unknown_type_values": [{"key": "jid", "expected_type": "str", "unknown_type_value": "{{ approve_certs_task.ansible_job_id }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["approve_certs_cleanup"], "vars_used_in_target_task": ["approve_certs_task.ansible_job_id"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:approve_certs#taskfile:roles/approve_certs/tasks/main.yaml#task:[1]", "name": "Approve all pending CSRs in the next 30 min (async task)", "module": "ansible.builtin.shell", "index": 1, "play_index": -1, "defined_in": "roles/approve_certs/tasks/main.yaml", "local_key": "task taskfile:roles/approve_certs/tasks/main.yaml#task:[1]", "role": "approve_certs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"approve_certs_task": "task role:approve_certs#taskfile:roles/approve_certs/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Approve all pending CSRs in the next 30 min (async task)", "tags": "approve_certs", "async": 1800, "poll": 0, "register": "approve_certs_task", "when": "not approve_certs_cleanup"}, "module_options": "set -o pipefail\nfor i in {1..120} ; do\n    # Approve all pending requests\n    LIST=$(oc get csr 2> /dev/null | grep -i pending | awk '{print $1}')\n    [ ! -z \"${LIST}\" ] && echo \"${LIST}\" | xargs oc adm certificate approve || true\n    sleep 15\ndone\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Approve all pending CSRs in the next 30 min (async task)\n  tags: approve_certs\n  ansible.builtin.shell: |\n    set -o pipefail\n    for i in {1..120} ; do\n        # Approve all pending requests\n        LIST=$(oc get csr 2> /dev/null | grep -i pending | awk '{print $1}')\n        [ ! -z \"${LIST}\" ] && echo \"${LIST}\" | xargs oc adm certificate approve || true\n        sleep 15\n    done\n  # Run for 30 min\n  async: 1800\n  poll: 0\n  register: approve_certs_task\n  when: not approve_certs_cleanup", "line_num_in_file": [10, 25], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["approve_certs_task.ansible_job_id"], "vars_defined_in_previous_tasks": ["approve_certs_cleanup", "approve_certs_task"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:attach_subscription#taskfile:roles/attach_subscription/tasks/main.yaml#task:[0]", "name": "Register server with Red Hat", "module": "community.general.redhat_subscription", "index": 0, "play_index": -1, "defined_in": "roles/attach_subscription/tasks/main.yaml", "local_key": "task taskfile:roles/attach_subscription/tasks/main.yaml#task:[0]", "role": "attach_subscription", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"registration": "task role:attach_subscription#taskfile:roles/attach_subscription/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Register server with Red Hat", "tags": "attach_subscription", "register": "registration", "retries": 2, "delay": 30, "until": "registration is not failed"}, "module_options": {"state": "present", "username": "{{ env.redhat.username }}", "password": "{{ env.redhat.password }}", "auto_attach": true}, "executable": "community.general.redhat_subscription", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Register server with Red Hat\n  tags: attach_subscription\n  community.general.redhat_subscription:\n    state: present\n    username: \"{{ env.redhat.username }}\"\n    password: \"{{ env.redhat.password }}\"\n    auto_attach: true\n  register: registration\n  retries: 2\n  delay: 30\n  until: registration is not failed", "line_num_in_file": [2, 13], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.general.redhat_subscription", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["registration"], "vars_used_in_target_task": ["env.redhat.username", "env.redhat.password"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:boot_agents_hypershift#taskfile:roles/boot_agents_hypershift/tasks/main.yaml#task:[0]", "name": "Create qemu image for agents", "module": "command", "index": 0, "play_index": -1, "defined_in": "roles/boot_agents_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/boot_agents_hypershift/tasks/main.yaml#task:[0]", "role": "boot_agents_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Create qemu image for agents", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": "qemu-img create -f qcow2 /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-agent{{ item }}.qcow2 {{ hypershift.agents_parms.disk_size }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create qemu image for agents\n  command: qemu-img create -f qcow2 /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-agent{{ item }}.qcow2 {{ hypershift.agents_parms.disk_size }}\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [2, 5], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name", "hypershift.agents_parms.disk_size"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:boot_agents_hypershift#taskfile:roles/boot_agents_hypershift/tasks/main.yaml#task:[1]", "name": "Boot Agents", "module": "shell", "index": 1, "play_index": -1, "defined_in": "roles/boot_agents_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/boot_agents_hypershift/tasks/main.yaml#task:[1]", "role": "boot_agents_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Boot Agents", "async": 3600, "poll": 0, "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": "{% if hypershift.agents_parms.static_ip_parms.static_ip == true %}\nmac_address=$(oc get NmStateConfig static-ip-nmstate-config-{{ hypershift.hcp.hosted_cluster_name }}-{{ item }} -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} -o json | jq -r '.spec.interfaces[] | .macAddress')\n{% else %}\nmac_address=\"{{ hypershift.agents_parms.agent_mac_addr[item] }}\"\n{% endif %}\n\nvirt-install \\\n--name \"{{ hypershift.hcp.hosted_cluster_name }}-agent-{{ item }}\" \\\n--autostart \\\n--ram=\"{{ hypershift.agents_parms.ram }}\" \\\n--cpu host \\\n--vcpus=\"{{ hypershift.agents_parms.vcpus }}\"  \\\n--location \"/var/lib/libvirt/images/pxeboot/,kernel=kernel.img,initrd=initrd.img\" \\\n--disk /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-agent{{ item }}.qcow2 \\\n--network network:{{ env.bridge_name }},mac=$mac_address \\\n--graphics none \\\n--noautoconsole  \\\n--wait=-1 \\\n--extra-args \"rd.neednet=1 nameserver={{ hypershift.agents_parms.nameserver }}   coreos.live.rootfs_url=http://{{ hypershift.bastion_hypershift }}:8080/rootfs.img random.trust_cpu=on rd.luks.options=discard ignition.firstboot ignition.platform.id=metal console=tty1 console=ttyS1,115200n8 coreos.inst.persistent-kargs=console=tty1 console=ttyS1,115200n8\"\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Boot Agents\n  shell: |\n    {% if hypershift.agents_parms.static_ip_parms.static_ip == true %}\n    mac_address=$(oc get NmStateConfig static-ip-nmstate-config-{{ hypershift.hcp.hosted_cluster_name }}-{{ item }} -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} -o json | jq -r '.spec.interfaces[] | .macAddress')\n    {% else %}\n    mac_address=\"{{ hypershift.agents_parms.agent_mac_addr[item] }}\"\n    {% endif %}\n\n    virt-install \\\n    --name \"{{ hypershift.hcp.hosted_cluster_name }}-agent-{{ item }}\" \\\n    --autostart \\\n    --ram=\"{{ hypershift.agents_parms.ram }}\" \\\n    --cpu host \\\n    --vcpus=\"{{ hypershift.agents_parms.vcpus }}\"  \\\n    --location \"/var/lib/libvirt/images/pxeboot/,kernel=kernel.img,initrd=initrd.img\" \\\n    --disk /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-agent{{ item }}.qcow2 \\\n    --network network:{{ env.bridge_name }},mac=$mac_address \\\n    --graphics none \\\n    --noautoconsole  \\\n    --wait=-1 \\\n    --extra-args \"rd.neednet=1 nameserver={{ hypershift.agents_parms.nameserver }}   coreos.live.rootfs_url=http://{{ hypershift.bastion_hypershift }}:8080/rootfs.img random.trust_cpu=on rd.luks.options=discard ignition.firstboot ignition.platform.id=metal console=tty1 console=ttyS1,115200n8 coreos.inst.persistent-kargs=console=tty1 console=ttyS1,115200n8\"\n  async: 3600\n  poll: 0\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"", "line_num_in_file": [6, 30], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name", "hypershift.agents_parms.disk_size"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name", "hypershift.hcp.clusters_namespace", "hypershift.agents_parms.agent_mac_addr[item]", "hypershift.agents_parms.ram", "hypershift.agents_parms.vcpus", "env.bridge_name", "hypershift.agents_parms.nameserver", "hypershift.bastion_hypershift"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[0]", "name": "Check internal cluster DNS resolution for the bastion", "module": "shell", "index": 0, "play_index": -1, "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "task taskfile:roles/check_dns/tasks/main.yaml#task:[0]", "role": "check_dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"bastion_lookup": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check internal cluster DNS resolution for the bastion", "tags": "check_dns, dns", "register": "bastion_lookup", "failed_when": "env.bastion.networking.ip != bastion_lookup.stdout"}, "module_options": "dig +short {{ env.bastion.networking.hostname }}.{{ env.bastion.networking.base_domain }} | tail -n1", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check internal cluster DNS resolution for the bastion\n  tags: check_dns, dns\n  shell: dig +short {{ env.bastion.networking.hostname }}.{{ env.bastion.networking.base_domain }} | tail -n1\n  register: bastion_lookup\n  failed_when: env.bastion.networking.ip != bastion_lookup.stdout\n", "line_num_in_file": [2, 7], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["bastion_lookup"], "vars_used_in_target_task": ["env.bastion.networking.hostname", "env.bastion.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[1]", "name": "Check internal cluster DNS resolution for external API and apps services", "module": "shell", "index": 1, "play_index": -1, "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "task taskfile:roles/check_dns/tasks/main.yaml#task:[1]", "role": "check_dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"services_lookup": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {"item": ["api.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}", "apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}", "test.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}"]}, "options": {"name": "Check internal cluster DNS resolution for external API and apps services", "tags": "check_dns, dns", "loop": ["api.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}", "apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}", "test.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}"], "register": "services_lookup", "failed_when": "((env.bastion.options.loadbalancer.on_bastion == True) and (env.bastion.networking.ip != services_lookup.stdout)) or ((env.bastion.options.loadbalancer.on_bastion == False) and (env.bastion.options.loadbalancer.public_ip != services_lookup.stdout) )"}, "module_options": "dig +short {{ item }} | tail -n1", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check internal cluster DNS resolution for external API and apps services\n  tags: check_dns, dns\n  shell: dig +short {{ item }} | tail -n1\n  loop:\n    - api.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n    - apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n    - test.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n  register: services_lookup\n  failed_when: ((env.bastion.options.loadbalancer.on_bastion == True) and (env.bastion.networking.ip != services_lookup.stdout)) or ((env.bastion.options.loadbalancer.on_bastion\n    == False) and (env.bastion.options.loadbalancer.public_ip != services_lookup.stdout) )\n", "line_num_in_file": [8, 18], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.hostname", "env.bastion.networking.base_domain"], "vars_defined_in_previous_tasks": ["bastion_lookup", "services_lookup"], "vars_used_in_target_task": ["item", "env.cluster.networking.metadata_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[2]", "name": "Check internal cluster DNS resolution for internal API services", "module": "shell", "index": 2, "play_index": -1, "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "task taskfile:roles/check_dns/tasks/main.yaml#task:[2]", "role": "check_dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"api_int_lookup": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check internal cluster DNS resolution for internal API services", "tags": "check_dns, dns", "register": "api_int_lookup", "failed_when": "((env.bastion.options.loadbalancer.on_bastion == True) and (env.bastion.networking.ip != api_int_lookup.stdout)) or ((env.bastion.options.loadbalancer.on_bastion == False) and (env.bastion.options.loadbalancer.private_ip != api_int_lookup.stdout) )"}, "module_options": "dig +short api-int.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }} | tail -n1", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check internal cluster DNS resolution for internal API services\n  tags: check_dns, dns\n  shell: dig +short api-int.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }} | tail -n1\n  register: api_int_lookup\n  failed_when: ((env.bastion.options.loadbalancer.on_bastion == True) and (env.bastion.networking.ip != api_int_lookup.stdout)) or ((env.bastion.options.loadbalancer.on_bastion\n    == False) and (env.bastion.options.loadbalancer.private_ip != api_int_lookup.stdout) )\n", "line_num_in_file": [19, 25], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.hostname", "env.bastion.networking.base_domain", "item", "env.cluster.networking.metadata_name"], "vars_defined_in_previous_tasks": ["bastion_lookup", "services_lookup", "api_int_lookup"], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[3]", "name": "Check internal cluster DNS resolution for bootstrap", "module": "shell", "index": 3, "play_index": -1, "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "task taskfile:roles/check_dns/tasks/main.yaml#task:[3]", "role": "check_dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"bootstrap_lookup": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check internal cluster DNS resolution for bootstrap", "tags": "check_dns, dns", "register": "bootstrap_lookup", "failed_when": "env.cluster.nodes.bootstrap.ip != bootstrap_lookup.stdout"}, "module_options": "dig +short {{ env.cluster.nodes.bootstrap.hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }} | tail -n1", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check internal cluster DNS resolution for bootstrap\n  tags: check_dns, dns\n  shell: dig +short {{ env.cluster.nodes.bootstrap.hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }} | tail -n1\n  register: bootstrap_lookup\n  failed_when: env.cluster.nodes.bootstrap.ip != bootstrap_lookup.stdout\n", "line_num_in_file": [26, 31], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.hostname", "env.bastion.networking.base_domain", "item", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"], "vars_defined_in_previous_tasks": ["bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup"], "vars_used_in_target_task": ["env.cluster.nodes.bootstrap.hostname", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[4]", "name": "Print results from bootstrap lookup", "module": "debug", "index": 4, "play_index": -1, "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "task taskfile:roles/check_dns/tasks/main.yaml#task:[4]", "role": "check_dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print results from bootstrap lookup", "tags": "check_dns, dns"}, "module_options": {"var": "bootstrap_lookup.stdout"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print results from bootstrap lookup\n  tags: check_dns, dns\n  debug:\n    var: bootstrap_lookup.stdout\n", "line_num_in_file": [32, 36], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.hostname", "env.bastion.networking.base_domain", "item", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "env.cluster.nodes.bootstrap.hostname"], "vars_defined_in_previous_tasks": ["bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[5]", "name": "Check control nodes DNS resolution", "module": "shell", "index": 5, "play_index": -1, "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "task taskfile:roles/check_dns/tasks/main.yaml#task:[5]", "role": "check_dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"control_lookup": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[5]"}, "set_facts": {}, "loop": {"item": "start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1"}, "options": {"name": "Check control nodes DNS resolution", "tags": "check_dns, dns", "register": "control_lookup", "failed_when": "env.cluster.nodes.control.ip[i] != control_lookup.stdout", "with_sequence": "start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": "dig +short {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}  | tail -n1", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check control nodes DNS resolution\n  tags: check_dns, dns\n  shell: dig +short {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}  | tail -n1\n  register: control_lookup\n  failed_when: env.cluster.nodes.control.ip[i] != control_lookup.stdout\n  with_sequence: start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [37, 46], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.hostname", "env.bastion.networking.base_domain", "item", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "env.cluster.nodes.bootstrap.hostname"], "vars_defined_in_previous_tasks": ["bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup"], "vars_used_in_target_task": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[6]", "name": "Check compute nodes DNS resolution", "module": "shell", "index": 6, "play_index": -1, "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "task taskfile:roles/check_dns/tasks/main.yaml#task:[6]", "role": "check_dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"compute_lookup": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[6]"}, "set_facts": {}, "loop": {"item": "start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1"}, "options": {"name": "Check compute nodes DNS resolution", "tags": "check_dns, dns", "register": "compute_lookup", "failed_when": "env.cluster.nodes.compute.ip[i] != compute_lookup.stdout", "with_sequence": "start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": "dig +short {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}  | tail -n1", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check compute nodes DNS resolution\n  tags: check_dns, dns\n  shell: dig +short {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}  | tail -n1\n  register: compute_lookup\n  failed_when: env.cluster.nodes.compute.ip[i] != compute_lookup.stdout\n  with_sequence: start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [47, 56], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.hostname", "env.bastion.networking.base_domain", "item", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "env.cluster.nodes.bootstrap.hostname", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]"], "vars_defined_in_previous_tasks": ["bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup", "compute_lookup"], "vars_used_in_target_task": ["item", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[7]", "name": "Check infrastructure nodes DNS resolution", "module": "shell", "index": 7, "play_index": -1, "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "task taskfile:roles/check_dns/tasks/main.yaml#task:[7]", "role": "check_dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"infra_lookup": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[7]"}, "set_facts": {}, "loop": {"item": "start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1"}, "options": {"name": "Check infrastructure nodes DNS resolution", "tags": "check_dns, dns", "register": "infra_lookup", "failed_when": "env.cluster.nodes.infra.ip[i] != infra_lookup.stdout", "with_sequence": "start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.cluster.nodes.infra.hostname is defined"}, "module_options": "dig +short {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}  | tail -n1", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check infrastructure nodes DNS resolution\n  tags: check_dns, dns\n  shell: dig +short {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}  | tail -n1\n  register: infra_lookup\n  failed_when: env.cluster.nodes.infra.ip[i] != infra_lookup.stdout\n  with_sequence: start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n", "line_num_in_file": [57, 67], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.hostname", "env.bastion.networking.base_domain", "item", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "env.cluster.nodes.bootstrap.hostname", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]"], "vars_defined_in_previous_tasks": ["bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup", "compute_lookup", "infra_lookup"], "vars_used_in_target_task": ["item", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[8]", "name": "Check external DNS resolution from forwarder", "module": "command", "index": 8, "play_index": -1, "defined_in": "roles/check_dns/tasks/main.yaml", "local_key": "task taskfile:roles/check_dns/tasks/main.yaml#task:[8]", "role": "check_dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"external_dns_check": "task role:check_dns#taskfile:roles/check_dns/tasks/main.yaml#task:[8]"}, "set_facts": {}, "loop": {"item": ["www.google.com", "www.ibm.com", "www.redhat.com"]}, "options": {"name": "Check external DNS resolution from forwarder", "tags": "check_dns, dns", "register": "external_dns_check", "failed_when": "\"server can\" in external_dns_check.stdout", "loop": ["www.google.com", "www.ibm.com", "www.redhat.com"]}, "module_options": "nslookup {{ item }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check external DNS resolution from forwarder\n  tags: check_dns, dns\n  register: external_dns_check\n  failed_when: '\"server can\" in external_dns_check.stdout'\n  command: nslookup {{ item }}\n  loop:\n    - www.google.com\n    - www.ibm.com\n    - www.redhat.com", "line_num_in_file": [68, 77], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.hostname", "env.bastion.networking.base_domain", "item", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "env.cluster.nodes.bootstrap.hostname", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]"], "vars_defined_in_previous_tasks": ["bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup", "compute_lookup", "infra_lookup", "external_dns_check"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_nodes#taskfile:roles/check_nodes/tasks/main.yaml#task:[0]", "name": "Get and print nodes status", "module": "ansible.builtin.include_tasks", "index": 0, "play_index": -1, "defined_in": "roles/check_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/check_nodes/tasks/main.yaml#task:[0]", "role": "check_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Get and print nodes status"}, "module_options": "{{ role_path }}/../common/tasks/print_ocp_node_status.yaml", "executable": "{{ role_path }}/../common/tasks/print_ocp_node_status.yaml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- name: Get and print nodes status\n  ansible.builtin.include_tasks: \"{{ role_path }}/../common/tasks/print_ocp_node_status.yaml\"\n", "line_num_in_file": [2, 4], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:check_nodes#taskfile:roles/check_nodes/tasks/main.yaml#task:[1]", "name": "Make sure control and compute nodes are 'Ready' before continuing (retry every 20s)", "module": "ansible.builtin.shell", "index": 1, "play_index": -1, "defined_in": "roles/check_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/check_nodes/tasks/main.yaml#task:[1]", "role": "check_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_output": "task role:check_nodes#taskfile:roles/check_nodes/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {"node": "{{ env.cluster.nodes.control.hostname + env.cluster.nodes.compute.hostname }}"}, "options": {"name": "Make sure control and compute nodes are 'Ready' before continuing (retry every 20s)", "tags": "check_nodes", "loop": "{{ env.cluster.nodes.control.hostname + env.cluster.nodes.compute.hostname }}", "loop_control": {"loop_var": "node"}, "register": "cmd_output", "until": "(\"Ready\" == cmd_output.stdout)", "retries": 90, "delay": 20}, "module_options": "set -o pipefail\noc get nodes | grep \"^{{ node | lower }}\" | awk '{print $2}'\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Make sure control and compute nodes are 'Ready' before continuing (retry every 20s)\n  tags: check_nodes\n  ansible.builtin.shell: |\n    set -o pipefail\n    oc get nodes | grep \"^{{ node | lower }}\" | awk '{print $2}'\n  loop: \"{{ env.cluster.nodes.control.hostname + env.cluster.nodes.compute.hostname }}\"\n  loop_control:\n    loop_var: node\n  register: cmd_output\n  until: (\"Ready\" == cmd_output.stdout)\n  retries: 90\n  delay: 20", "line_num_in_file": [5, 17], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["role_path"], "vars_defined_in_previous_tasks": ["cmd_output"], "vars_used_in_target_task": ["node", "env.cluster.nodes.control.hostname+env.cluster.nodes.compute.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:common#taskfile:roles/common/tasks/main.yaml#task:[0]", "name": "Gather facts", "module": "ansible.builtin.gather_facts", "index": 0, "play_index": -1, "defined_in": "roles/common/tasks/main.yaml", "local_key": "task taskfile:roles/common/tasks/main.yaml#task:[0]", "role": "common", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Gather facts", "when": "ansible_architecture is not defined"}, "module_options": null, "executable": "ansible.builtin.gather_facts", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Gather facts\n  when: ansible_architecture is not defined\n  ansible.builtin.gather_facts:", "line_num_in_file": [2, 4], "resolved_name": "ansible.builtin.gather_facts", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "gather_facts", "fqcn": "ansible.builtin.gather_facts", "key": "module collection:ansible.builtin#module:ansible.builtin.gather_facts"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.gather_facts", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.gather_facts", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["parallel"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["_vm_console"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:common#taskfile:roles/common/tasks/main.yaml#task:[1]", "name": "Load variables based on architecture", "module": "ansible.builtin.include_vars", "index": 1, "play_index": -1, "defined_in": "roles/common/tasks/main.yaml", "local_key": "task taskfile:roles/common/tasks/main.yaml#task:[1]", "role": "common", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Load variables based on architecture"}, "module_options": "../vars/{{ ansible_architecture }}/vars.yaml", "executable": "ansible.builtin.include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Load variables based on architecture\n  ansible.builtin.include_vars: ../vars/{{ ansible_architecture }}/vars.yaml", "line_num_in_file": [5, 7], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["_vm_console"], "vars_used_in_target_task": ["ansible_architecture"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:common#taskfile:roles/common/tasks/print_ocp_node_status.yaml#task:[0]", "name": "Get OCP nodes status", "module": "ansible.builtin.shell", "index": 0, "play_index": -1, "defined_in": "roles/common/tasks/print_ocp_node_status.yaml", "local_key": "task taskfile:roles/common/tasks/print_ocp_node_status.yaml#task:[0]", "role": "common", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"oc_get_nodes": "task role:common#taskfile:roles/common/tasks/print_ocp_node_status.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get OCP nodes status", "register": "oc_get_nodes", "changed_when": false}, "module_options": "set -o pipefail\noc get nodes -o wide | awk -F '  +' '{ printf \"%-24s %-26s %-22s %-7s %-17s %-29s %-15s\\n\", $1, $2, $3, $4, $5, $9, $6 }'\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Get OCP nodes status\n      # Print oc node status in such format:\n      # NAME        STATUS                     ROLES                  AGE     VERSION           KERNEL-VERSION                INTERNAL-IP\n      # master-1    Ready                      control-plane,master   35h     v1.25.4+77bec7a   4.18.0-372.40.1.el8_6.s390x   172.23.232.131\n      ansible.builtin.shell: |\n        set -o pipefail\n        oc get nodes -o wide | awk -F '  +' '{ printf \"%-24s %-26s %-22s %-7s %-17s %-29s %-15s\\n\", $1, $2, $3, $4, $5, $9, $6 }'\n      register: oc_get_nodes\n      changed_when: false\n", "line_num_in_file": [4, 13], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["oc_get_nodes"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:common#taskfile:roles/common/tasks/print_ocp_node_status.yaml#task:[1]", "name": "Print OCP nodes status", "module": "ansible.builtin.debug", "index": 1, "play_index": -1, "defined_in": "roles/common/tasks/print_ocp_node_status.yaml", "local_key": "task taskfile:roles/common/tasks/print_ocp_node_status.yaml#task:[1]", "role": "common", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print OCP nodes status"}, "module_options": {"var": "oc_get_nodes.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Print OCP nodes status\n      ansible.builtin.debug:\n        var: oc_get_nodes.stdout_lines", "line_num_in_file": [14, 17], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["oc_get_nodes"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[0]", "name": "Create directory in <storage.pool_path> for this cluster's storage pool.", "module": "ansible.builtin.file", "index": 0, "play_index": -1, "defined_in": "roles/configure_storage/tasks/main.yaml", "local_key": "task taskfile:roles/configure_storage/tasks/main.yaml#task:[0]", "role": "configure_storage", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create directory in <storage.pool_path> for this cluster's storage pool.", "tags": "configure_storage, pool"}, "module_options": {"path": "{{ storage.pool_path }}/{{ env.cluster.networking.metadata_name }}", "state": "directory", "owner": "{{ ansible_user }}", "group": "qemu", "seuser": "system_u", "setype": "virt_image_t", "mode": "0770", "recurse": true}, "executable": "ansible.builtin.file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create directory in <storage.pool_path> for this cluster's storage pool.\n  tags: configure_storage, pool\n  ansible.builtin.file:\n    path: \"{{ storage.pool_path }}/{{ env.cluster.networking.metadata_name }}\"\n    state: directory\n    owner: \"{{ ansible_user }}\"\n    group: qemu\n    seuser: system_u\n    setype: virt_image_t\n    mode: \"0770\"\n    recurse: true\n", "line_num_in_file": [44, 55], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ storage.pool_path }}/{{ env.cluster.networking.metadata_name }}", "undefined_variables": ["storage.pool_path", "env.cluster.networking.metadata_name"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ storage.pool_path }}/{{ env.cluster.networking.metadata_name }}"}, {"key": "owner", "expected_type": "str", "unknown_type_value": "{{ ansible_user }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["storage.pool_path", "env.cluster.networking.metadata_name", "ansible_user"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[1]", "name": "Ensure qemu has execute permissions for all parent directories of the directory that will be used as a storage pool for this cluster.", "module": "file", "index": 1, "play_index": -1, "defined_in": "roles/configure_storage/tasks/main.yaml", "local_key": "task taskfile:roles/configure_storage/tasks/main.yaml#task:[1]", "role": "configure_storage", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range( 0, storage.pool_path.split('/') | length + 1 ) }}"}, "options": {"name": "Ensure qemu has execute permissions for all parent directories of the directory that will be used as a storage pool for this cluster.", "tags": "configure_storage, pool", "loop": "{{ range( 0, storage.pool_path.split('/') | length + 1 ) }}", "loop_control": {"extended": true, "index_var": "i", "extended_allitems": false, "label": "{{ storage.pool_path.split('/')[:i] | join('/') }}"}, "when": "storage.pool_path.split('/')[:i] | join('/') != ''"}, "module_options": {"path": "{{ storage.pool_path.split('/')[:i] | join('/') }}", "state": "directory", "group": "qemu", "mode": "g+x", "recurse": false}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Ensure qemu has execute permissions for all parent directories of the directory that will be used as a storage pool for this cluster.\n  tags: configure_storage, pool\n  file:\n    path: \"{{ storage.pool_path.split('/')[:i] | join('/') }}\"\n    state: directory\n    group: qemu\n    mode: g+x\n    recurse: false\n  loop: \"{{ range( 0, storage.pool_path.split('/') | length + 1 ) }}\"\n  loop_control:\n    extended: true\n    index_var: i\n    extended_allitems: false\n    label: \"{{ storage.pool_path.split('/')[:i] | join('/') }}\"\n  when: storage.pool_path.split('/')[:i] | join('/') != ''\n", "line_num_in_file": [56, 71], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ storage.pool_path.split('/')[:i] | join('/') }}", "undefined_variables": ["storage.pool_path.split('/')[:i]"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ storage.pool_path.split('/')[:i] | join('/') }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["storage.pool_path", "env.cluster.networking.metadata_name", "ansible_user"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "range(0,storage.pool_path.split('/')", "storage.pool_path.split('/')[:i]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[2]", "name": "Define a new storage pool", "module": "community.libvirt.virt_pool", "index": 2, "play_index": -1, "defined_in": "roles/configure_storage/tasks/main.yaml", "local_key": "task taskfile:roles/configure_storage/tasks/main.yaml#task:[2]", "role": "configure_storage", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Define a new storage pool", "tags": "configure_storage, pool"}, "module_options": {"command": "define", "name": "{{ env.cluster.networking.metadata_name }}-vdisk", "xml": "{{ lookup ( \"template\", \"vdisk.xml.j2\" ) }}"}, "executable": "community.libvirt.virt_pool", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Define a new storage pool\n  tags: configure_storage, pool\n  community.libvirt.virt_pool:\n    command: define\n    name: \"{{ env.cluster.networking.metadata_name }}-vdisk\"\n    xml: '{{ lookup ( \"template\", \"vdisk.xml.j2\" ) }}'\n", "line_num_in_file": [72, 78], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.libvirt.virt_pool", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["storage.pool_path", "env.cluster.networking.metadata_name", "ansible_user", "item", "range(0,storage.pool_path.split('/')", "storage.pool_path.split('/')[:i]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "lookup(\"template\",\"vdisk.xml.j2\")"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[3]", "name": "Set storage pool to active.", "module": "community.libvirt.virt_pool", "index": 3, "play_index": -1, "defined_in": "roles/configure_storage/tasks/main.yaml", "local_key": "task taskfile:roles/configure_storage/tasks/main.yaml#task:[3]", "role": "configure_storage", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Set storage pool to active.", "tags": "configure_storage, pool"}, "module_options": {"name": "{{ env.cluster.networking.metadata_name }}-vdisk", "state": "active"}, "executable": "community.libvirt.virt_pool", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set storage pool to active.\n  tags: configure_storage, pool\n  community.libvirt.virt_pool:\n    name: \"{{ env.cluster.networking.metadata_name }}-vdisk\"\n    state: active\n", "line_num_in_file": [79, 84], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.libvirt.virt_pool", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["storage.pool_path", "env.cluster.networking.metadata_name", "ansible_user", "item", "range(0,storage.pool_path.split('/')", "storage.pool_path.split('/')[:i]", "lookup(\"template\",\"vdisk.xml.j2\")"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:configure_storage#taskfile:roles/configure_storage/tasks/main.yaml#task:[4]", "name": "Set storage pool to autostart.", "module": "community.libvirt.virt_pool", "index": 4, "play_index": -1, "defined_in": "roles/configure_storage/tasks/main.yaml", "local_key": "task taskfile:roles/configure_storage/tasks/main.yaml#task:[4]", "role": "configure_storage", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Set storage pool to autostart.", "tags": "configure_storage, pool"}, "module_options": {"name": "{{ env.cluster.networking.metadata_name }}-vdisk", "autostart": true}, "executable": "community.libvirt.virt_pool", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set storage pool to autostart.\n  tags: configure_storage, pool\n  community.libvirt.virt_pool:\n    name: \"{{ env.cluster.networking.metadata_name }}-vdisk\"\n    autostart: true", "line_num_in_file": [85, 90], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.libvirt.virt_pool", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["storage.pool_path", "env.cluster.networking.metadata_name", "ansible_user", "item", "range(0,storage.pool_path.split('/')", "storage.pool_path.split('/')[:i]", "lookup(\"template\",\"vdisk.xml.j2\")"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[0]", "name": "Get OCP Release Version", "module": "shell", "index": 0, "play_index": -1, "defined_in": "roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[0]", "role": "create_agentserviceconfig_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ocp_release_version": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get OCP Release Version", "register": "ocp_release_version"}, "module_options": "curl -s {{ hypershift.asc.url_for_ocp_release_file }}  | awk '/machine-os / { print $2 }'", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get OCP Release Version\n  shell: curl -s {{ hypershift.asc.url_for_ocp_release_file }}  | awk '/machine-os / { print $2 }'\n  register: ocp_release_version\n", "line_num_in_file": [2, 5], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ocp_release_version"], "vars_used_in_target_task": ["hypershift.asc.url_for_ocp_release_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[1]", "name": "Create Config map mirror-config ( For updating AgentServiceConfig with the brew mirror information )", "module": "template", "index": 1, "play_index": -1, "defined_in": "roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[1]", "role": "create_agentserviceconfig_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create Config map mirror-config ( For updating AgentServiceConfig with the brew mirror information )"}, "module_options": {"src": "mirror-config.yml.j2", "dest": "/root/ansible_workdir/mirror-config.yaml"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create Config map mirror-config ( For updating AgentServiceConfig with the brew mirror information )\n  template:\n    src: mirror-config.yml.j2\n    dest: /root/ansible_workdir/mirror-config.yaml\n", "line_num_in_file": [6, 10], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.url_for_ocp_release_file"], "vars_defined_in_previous_tasks": ["ocp_release_version"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[2]", "name": "Deploy Config map - mirror config", "module": "shell", "index": 2, "play_index": -1, "defined_in": "roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[2]", "role": "create_agentserviceconfig_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Deploy Config map - mirror config"}, "module_options": "oc apply -f /root/ansible_workdir/mirror-config.yaml", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Deploy Config map - mirror config\n  shell: oc apply -f /root/ansible_workdir/mirror-config.yaml\n", "line_num_in_file": [11, 13], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.url_for_ocp_release_file"], "vars_defined_in_previous_tasks": ["ocp_release_version"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[3]", "name": "Create agenterviceconfig.yaml", "module": "template", "index": 3, "play_index": -1, "defined_in": "roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[3]", "role": "create_agentserviceconfig_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create agenterviceconfig.yaml"}, "module_options": {"src": "agent_service_config.yaml.j2", "dest": "/root/ansible_workdir/agentserviceconfig.yaml"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create agenterviceconfig.yaml\n  template:\n    src: agent_service_config.yaml.j2\n    dest: /root/ansible_workdir/agentserviceconfig.yaml\n", "line_num_in_file": [14, 18], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.url_for_ocp_release_file"], "vars_defined_in_previous_tasks": ["ocp_release_version"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[4]", "name": "Deploy AgentServiceConfig", "module": "command", "index": 4, "play_index": -1, "defined_in": "roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[4]", "role": "create_agentserviceconfig_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Deploy AgentServiceConfig"}, "module_options": "oc apply -f /root/ansible_workdir/agentserviceconfig.yaml", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Deploy AgentServiceConfig\n  command: oc apply -f /root/ansible_workdir/agentserviceconfig.yaml\n", "line_num_in_file": [19, 21], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.url_for_ocp_release_file"], "vars_defined_in_previous_tasks": ["ocp_release_version"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[5]", "name": "Wait for Agent Service Deployment to be Succeeded", "module": "shell", "index": 5, "play_index": -1, "defined_in": "roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[5]", "role": "create_agentserviceconfig_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"asc": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[5]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for Agent Service Deployment to be Succeeded", "register": "asc", "until": "asc.stdout == '0'", "retries": 60, "delay": 20}, "module_options": "oc get AgentServiceConfig agent -o json | jq -r '.status|.conditions[]|.status' | grep False | wc -l", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for Agent Service Deployment to be Succeeded\n  shell: oc get AgentServiceConfig agent -o json | jq -r '.status|.conditions[]|.status' | grep False | wc -l\n  register: asc\n  until: asc.stdout == '0'\n  retries: 60\n  delay: 20\n", "line_num_in_file": [22, 28], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.url_for_ocp_release_file"], "vars_defined_in_previous_tasks": ["ocp_release_version", "asc"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[6]", "name": "Wait for MCE to be available", "module": "shell", "index": 6, "play_index": -1, "defined_in": "roles/create_agentserviceconfig_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[6]", "role": "create_agentserviceconfig_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"mce_status": "task role:create_agentserviceconfig_hypershift#taskfile:roles/create_agentserviceconfig_hypershift/tasks/main.yaml#task:[6]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for MCE to be available", "register": "mce_status", "until": "mce_status.stdout == \"Available\"", "retries": 40, "delay": 10}, "module_options": "oc get mce --no-headers | awk  '{print $2}'", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for MCE to be available\n  shell: oc get mce --no-headers | awk  '{print $2}'\n  register: mce_status\n  until: mce_status.stdout == \"Available\"\n  retries: 40\n  delay: 10", "line_num_in_file": [29, 35], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.url_for_ocp_release_file"], "vars_defined_in_previous_tasks": ["ocp_release_version", "asc", "mce_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[0]", "name": "Create a directory on the KVM host server for bastion configuration files", "module": "ansible.builtin.file", "index": 0, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[0]", "role": "create_bastion", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create a directory on the KVM host server for bastion configuration files", "become": false, "tags": "create_bastion"}, "module_options": {"path": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}", "mode": "0755", "state": "directory"}, "executable": "ansible.builtin.file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create a directory on the KVM host server for bastion configuration files\n  become: false\n  tags: create_bastion\n  ansible.builtin.file:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}\"\n    mode: \"0755\"\n    state: directory\n", "line_num_in_file": [2, 9], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}", "undefined_variables": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[1]", "name": "Copy template kickstart file to KVM host server", "module": "ansible.builtin.template", "index": 1, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[1]", "role": "create_bastion", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Copy template kickstart file to KVM host server", "tags": "create_bastion", "become": false}, "module_options": {"src": "bastion-ks.cfg.j2", "dest": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg", "mode": "0644", "force": true}, "executable": "ansible.builtin.template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Copy template kickstart file to KVM host server\n  tags: create_bastion\n  become: false\n  ansible.builtin.template:\n    src: bastion-ks.cfg.j2\n    dest: \"{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg\"\n    mode: \"0644\"\n    force: true\n", "line_num_in_file": [10, 18], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg", "undefined_variables": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[2]", "name": "Create hash from bastion's root password to input in kickstart file", "module": "ansible.builtin.shell", "index": 2, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[2]", "role": "create_bastion", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"root_pass_hash": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Create hash from bastion's root password to input in kickstart file", "tags": "create_bastion", "register": "root_pass_hash"}, "module_options": "set -o pipefail\necho \"{{ env.bastion.access.root_pass }}\" | openssl passwd -6 -in -\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create hash from bastion's root password to input in kickstart file\n  tags: create_bastion\n  ansible.builtin.shell: |\n    set -o pipefail\n    echo \"{{ env.bastion.access.root_pass }}\" | openssl passwd -6 -in -\n  register: root_pass_hash\n", "line_num_in_file": [19, 25], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname"], "vars_defined_in_previous_tasks": ["root_pass_hash"], "vars_used_in_target_task": ["env.bastion.access.root_pass"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[3]", "name": "Add hashed root password to bastion's RHEL kickstart config file", "module": "ansible.builtin.lineinfile", "index": 3, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[3]", "role": "create_bastion", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add hashed root password to bastion's RHEL kickstart config file", "tags": "create_bastion", "become": false}, "module_options": {"path": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg", "insertafter": "Root password", "line": "rootpw --iscrypted {{ root_pass_hash.stdout }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add hashed root password to bastion's RHEL kickstart config file\n  tags: create_bastion\n  become: false\n  ansible.builtin.lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg\"\n    insertafter: Root password\n    line: rootpw --iscrypted {{ root_pass_hash.stdout }}\n", "line_num_in_file": [26, 33], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg", "undefined_variables": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname"]}, {"key": "line", "value": "rootpw --iscrypted {{ root_pass_hash.stdout }}", "undefined_variables": ["root_pass_hash.stdout"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg"}, {"key": "line", "expected_type": "str", "unknown_type_value": "rootpw --iscrypted {{ root_pass_hash.stdout }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname", "env.bastion.access.root_pass"], "vars_defined_in_previous_tasks": ["root_pass_hash"], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname", "root_pass_hash.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[4]", "name": "Create hash from bastion user password to input in kickstart file", "module": "ansible.builtin.shell", "index": 4, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[4]", "role": "create_bastion", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"user_pass_hash": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "Create hash from bastion user password to input in kickstart file", "tags": "create_bastion", "register": "user_pass_hash"}, "module_options": "set -o pipefail\necho \"{{ env.bastion.access.pass }}\" | openssl passwd -6 -in -\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create hash from bastion user password to input in kickstart file\n  tags: create_bastion\n  ansible.builtin.shell: |\n    set -o pipefail\n    echo \"{{ env.bastion.access.pass }}\" | openssl passwd -6 -in -\n  register: user_pass_hash\n", "line_num_in_file": [34, 40], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname", "env.bastion.access.root_pass", "root_pass_hash.stdout"], "vars_defined_in_previous_tasks": ["root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": ["env.bastion.access.pass"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[5]", "name": "Add hashed user password to bastion's RHEL kickstart config file", "module": "ansible.builtin.lineinfile", "index": 5, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[5]", "role": "create_bastion", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add hashed user password to bastion's RHEL kickstart config file", "tags": "create_bastion", "become": false}, "module_options": {"path": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg", "insertafter": "Users and Groups Definitions", "line": "user --groups=wheel --name={{ env.bastion.access.user }} --password={{ user_pass_hash.stdout }} --iscrypted"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add hashed user password to bastion's RHEL kickstart config file\n  tags: create_bastion\n  become: false\n  ansible.builtin.lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg\"\n    insertafter: Users and Groups Definitions\n    line: user --groups=wheel --name={{ env.bastion.access.user }} --password={{ user_pass_hash.stdout }} --iscrypted\n", "line_num_in_file": [41, 48], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg", "undefined_variables": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname"]}, {"key": "line", "value": "user --groups=wheel --name={{ env.bastion.access.user }} --password={{ user_pass_hash.stdout }} --iscrypted", "undefined_variables": ["env.bastion.access.user", "user_pass_hash.stdout"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg"}, {"key": "line", "expected_type": "str", "unknown_type_value": "user --groups=wheel --name={{ env.bastion.access.user }} --password={{ user_pass_hash.stdout }} --iscrypted"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname", "env.bastion.access.root_pass", "root_pass_hash.stdout", "env.bastion.access.pass"], "vars_defined_in_previous_tasks": ["root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname", "env.bastion.access.user", "user_pass_hash.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[6]", "name": "Get KVM host home for use in next step", "module": "ansible.builtin.command", "index": 6, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[6]", "role": "create_bastion", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {"kvm_host_home": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[6]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get KVM host home for use in next step", "tags": "create_bastion, virt-install", "become": false, "register": "kvm_host_home"}, "module_options": "pwd", "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get KVM host home for use in next step\n  tags: create_bastion, virt-install\n  become: false\n  ansible.builtin.command: pwd\n  register: kvm_host_home\n", "line_num_in_file": [49, 54], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname", "env.bastion.access.root_pass", "root_pass_hash.stdout", "env.bastion.access.pass", "env.bastion.access.user", "user_pass_hash.stdout"], "vars_defined_in_previous_tasks": ["root_pass_hash", "user_pass_hash", "kvm_host_home"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[7]", "name": "Boot and kickstart bastion. To monitor, login to your KVM host and run 'virsh console <bastion VM name>'", "module": "ansible.builtin.shell", "index": 7, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[7]", "role": "create_bastion", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_output": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[7]"}, "set_facts": {}, "loop": {}, "options": {"name": "Boot and kickstart bastion. To monitor, login to your KVM host and run 'virsh console <bastion VM name>'", "tags": "create_bastion, virt-install", "timeout": 420, "register": "cmd_output"}, "module_options": "virsh destroy {{ env.bastion.vm_name }} || true\nvirsh undefine {{ env.bastion.vm_name }} --remove-all-storage || true\nvirt-install \\\n--name {{ env.bastion.vm_name }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--memory={{ env.bastion.resources.ram }} \\\n--vcpus={{ env.bastion.resources.vcpu }} \\\n--location {{ env.file_server.protocol }}://{{ env.file_server.user + ':' + env.file_server.pass + '@' if env.file_server.protocol == 'ftp' else '' }}{{ env.file_server.ip }}/{{ env.file_server.iso_mount_dir }} \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.bastion.resources.disk_size }} \\\n--network network={{ env.bridge_name }} \\\n--graphics none \\\n--console pty,target_type=serial \\\n--noautoconsole --wait=-1 \\\n--initrd-inject \"/{{ kvm_host_home.stdout }}/{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg\" \\\n--extra-args \"inst.ks=file:/bastion-ks.cfg ip={{ env.bastion.networking.ip }}::{{ env.bastion.networking.gateway }}\\\n:{{ env.bastion.networking.subnetmask }}:{{ env.bastion.networking.hostname }}::none {{ _vm_console }}\"\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Boot and kickstart bastion. To monitor, login to your KVM host and run 'virsh console <bastion VM name>'\n  tags: create_bastion, virt-install\n  ansible.builtin.shell: |\n    virsh destroy {{ env.bastion.vm_name }} || true\n    virsh undefine {{ env.bastion.vm_name }} --remove-all-storage || true\n    virt-install \\\n    --name {{ env.bastion.vm_name }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --memory={{ env.bastion.resources.ram }} \\\n    --vcpus={{ env.bastion.resources.vcpu }} \\\n    --location {{ env.file_server.protocol }}://{{ env.file_server.user + ':' + env.file_server.pass + '@' if env.file_server.protocol == 'ftp' else '' }}{{ env.file_server.ip }}/{{ env.file_server.iso_mount_dir }} \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.bastion.resources.disk_size }} \\\n    --network network={{ env.bridge_name }} \\\n    --graphics none \\\n    --console pty,target_type=serial \\\n    --noautoconsole --wait=-1 \\\n    --initrd-inject \"/{{ kvm_host_home.stdout }}/{{ env.file_server.cfgs_dir }}/{{ env.bastion.networking.hostname }}/bastion-ks.cfg\" \\\n    --extra-args \"inst.ks=file:/bastion-ks.cfg ip={{ env.bastion.networking.ip }}::{{ env.bastion.networking.gateway }}\\\n    :{{ env.bastion.networking.subnetmask }}:{{ env.bastion.networking.hostname }}::none {{ _vm_console }}\"\n  timeout: 420\n  register: cmd_output\n", "line_num_in_file": [55, 77], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname", "env.bastion.access.root_pass", "root_pass_hash.stdout", "env.bastion.access.pass", "env.bastion.access.user", "user_pass_hash.stdout"], "vars_defined_in_previous_tasks": ["root_pass_hash", "user_pass_hash", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": ["env.bastion.vm_name", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.bastion.resources.ram", "env.bastion.resources.vcpu", "env.file_server.protocol", "env.file_server.user+':'+env.file_server.pass+'@'ifenv.file_server.protocol=='ftp'else''", "env.file_server.ip", "env.file_server.iso_mount_dir", "env.cluster.networking.metadata_name", "env.bastion.resources.disk_size", "env.bridge_name", "kvm_host_home.stdout", "env.file_server.cfgs_dir", "env.bastion.networking.hostname", "env.bastion.networking.ip", "env.bastion.networking.gateway", "env.bastion.networking.subnetmask", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[8]", "name": "Debug, print above command output", "module": "ansible.builtin.debug", "index": 8, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[8]", "role": "create_bastion", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Debug, print above command output", "tags": "create_bastion, virt-install"}, "module_options": {"var": "cmd_output"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Debug, print above command output\n  tags: create_bastion, virt-install\n  ansible.builtin.debug:\n    var: cmd_output\n", "line_num_in_file": [78, 82], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname", "env.bastion.access.root_pass", "root_pass_hash.stdout", "env.bastion.access.pass", "env.bastion.access.user", "user_pass_hash.stdout", "env.bastion.vm_name", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.bastion.resources.ram", "env.bastion.resources.vcpu", "env.file_server.protocol", "env.file_server.user+':'+env.file_server.pass+'@'ifenv.file_server.protocol=='ftp'else''", "env.file_server.ip", "env.file_server.iso_mount_dir", "env.cluster.networking.metadata_name", "env.bastion.resources.disk_size", "env.bridge_name", "kvm_host_home.stdout", "env.bastion.networking.ip", "env.bastion.networking.gateway", "env.bastion.networking.subnetmask", "_vm_console"], "vars_defined_in_previous_tasks": ["root_pass_hash", "user_pass_hash", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion#taskfile:roles/create_bastion/tasks/main.yaml#task:[9]", "name": "Waiting 1 minute for automated bastion installation and configuration to complete", "module": "ansible.builtin.pause", "index": 9, "play_index": -1, "defined_in": "roles/create_bastion/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion/tasks/main.yaml#task:[9]", "role": "create_bastion", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Waiting 1 minute for automated bastion installation and configuration to complete", "tags": "create_bastion, virt-install"}, "module_options": {"minutes": 1}, "executable": "ansible.builtin.pause", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Waiting 1 minute for automated bastion installation and configuration to complete\n  tags: create_bastion, virt-install\n  ansible.builtin.pause:\n    minutes: 1", "line_num_in_file": [83, 87], "resolved_name": "ansible.builtin.pause", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "pause", "fqcn": "ansible.builtin.pause", "key": "module collection:ansible.builtin#module:ansible.builtin.pause"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.pause", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.pause", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["echo", "minutes", "prompt", "seconds"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "env.bastion.networking.hostname", "env.bastion.access.root_pass", "root_pass_hash.stdout", "env.bastion.access.pass", "env.bastion.access.user", "user_pass_hash.stdout", "env.bastion.vm_name", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.bastion.resources.ram", "env.bastion.resources.vcpu", "env.file_server.protocol", "env.file_server.user+':'+env.file_server.pass+'@'ifenv.file_server.protocol=='ftp'else''", "env.file_server.ip", "env.file_server.iso_mount_dir", "env.cluster.networking.metadata_name", "env.bastion.resources.disk_size", "env.bridge_name", "kvm_host_home.stdout", "env.bastion.networking.ip", "env.bastion.networking.gateway", "env.bastion.networking.subnetmask", "_vm_console"], "vars_defined_in_previous_tasks": ["root_pass_hash", "user_pass_hash", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[0]", "name": "Get ssh key of local host", "module": "ansible.builtin.shell", "index": 0, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[0]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_output": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get ssh key of local host", "register": "ssh_output", "delegate_to": "localhost"}, "module_options": "cat {{ lookup('env', 'HOME') }}/.ssh/{{ env.ansible_key_name }}.pub", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get ssh key of local host\n  ansible.builtin.shell: cat {{ lookup('env', 'HOME') }}/.ssh/{{ env.ansible_key_name }}.pub\n  register: ssh_output\n  delegate_to: localhost\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ssh_output"], "vars_used_in_target_task": ["lookup('env','HOME')", "env.ansible_key_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[1]", "name": "Load ssh_key into a variable", "module": "set_fact", "index": 1, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[1]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"ssh_key": "{{ ssh_output.stdout_lines[0] }}"}, "loop": {}, "options": {"name": "Load ssh_key into a variable"}, "module_options": {"ssh_key": "{{ ssh_output.stdout_lines[0] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Load ssh_key into a variable\n  set_fact:\n    ssh_key: \"{{ ssh_output.stdout_lines[0] }}\"\n", "line_num_in_file": [7, 10], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": ["ssh_output.stdout_lines[0]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[2]", "name": "Create Directory for images and bastion.ks", "module": "file", "index": 2, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[2]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create Directory for images and bastion.ks"}, "module_options": {"path": "/home/libvirt/images/", "recurse": true, "state": "directory"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create Directory for images and bastion.ks\n  file:\n    path: /home/libvirt/images/\n    recurse: true\n    state: directory\n", "line_num_in_file": [11, 16], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name", "ssh_output.stdout_lines[0]"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[3]", "name": "Create bastion.ks file", "module": "template", "index": 3, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[3]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create bastion.ks file"}, "module_options": {"src": "../create_bastion/templates/bastion-ks.cfg.j2", "dest": "/home/libvirt/bastion.ks"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create bastion.ks file\n  template:\n    src: ../create_bastion/templates/bastion-ks.cfg.j2\n    dest: /home/libvirt/bastion.ks\n", "line_num_in_file": [17, 21], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name", "ssh_output.stdout_lines[0]"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[4]", "name": "Removing network configurations", "module": "lineinfile", "index": 4, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[4]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Removing network configurations"}, "module_options": {"path": "/home/libvirt/bastion.ks", "state": "absent", "regexp": "^network*"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Removing network configurations\n  lineinfile:\n    path: /home/libvirt/bastion.ks\n    state: absent\n    regexp: ^network*\n", "line_num_in_file": [22, 27], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name", "ssh_output.stdout_lines[0]"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[5]", "name": "Adding root password for bastion to bastion.ks", "module": "lineinfile", "index": 5, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[5]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Adding root password for bastion to bastion.ks"}, "module_options": {"path": "/home/libvirt/bastion.ks", "insertafter": "^lang.*", "line": "rootpw {{ bastion_root_pw }}"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Adding root password for bastion to bastion.ks\n  lineinfile:\n    path: /home/libvirt/bastion.ks\n    insertafter: ^lang.*\n    line: rootpw {{ bastion_root_pw }}\n", "line_num_in_file": [28, 33], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "rootpw {{ bastion_root_pw }}", "undefined_variables": ["bastion_root_pw"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "rootpw {{ bastion_root_pw }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name", "ssh_output.stdout_lines[0]"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": ["bastion_root_pw"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[6]", "name": "Adding ssh key to bastion", "module": "blockinfile", "index": 6, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[6]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Adding ssh key to bastion"}, "module_options": {"path": "/home/libvirt/bastion.ks", "insertafter": "^echo.*", "block": "mkdir -p /root/.ssh\necho \"{{ ssh_key }}\" > /root/.ssh/authorized_keys\nchmod 0700 /root/.ssh\nchmod 0600 /root/.ssh/authorized_keys\n"}, "executable": "blockinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Adding ssh key to bastion\n  blockinfile:\n    path: /home/libvirt/bastion.ks\n    insertafter: ^echo.*\n    block: |\n      mkdir -p /root/.ssh\n      echo \"{{ ssh_key }}\" > /root/.ssh/authorized_keys\n      chmod 0700 /root/.ssh\n      chmod 0600 /root/.ssh/authorized_keys\n", "line_num_in_file": [34, 43], "resolved_name": "ansible.builtin.blockinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "blockinfile", "fqcn": "ansible.builtin.blockinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.blockinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.blockinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.blockinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block", "content", "create", "group", "insertafter", "insertbefore", "marker", "marker_begin", "marker_end", "mode", "owner", "path", "dest", "destfile", "name", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "block", "expected_type": "str", "unknown_type_value": "mkdir -p /root/.ssh\necho \"{{ ssh_output.stdout_lines[0] }}\" > /root/.ssh/authorized_keys\nchmod 0700 /root/.ssh\nchmod 0600 /root/.ssh/authorized_keys\n"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "bastion_root_pw"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": ["ssh_key"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[7]", "name": "Create qemu image for bastion", "module": "command", "index": 7, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[7]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create qemu image for bastion"}, "module_options": "qemu-img create -f qcow2 /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-bastion.qcow2 100G", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create qemu image for bastion\n  command: qemu-img create -f qcow2 /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-bastion.qcow2 100G\n", "line_num_in_file": [44, 46], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "bastion_root_pw", "ssh_key"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[8]", "name": "Create bastion", "module": "shell", "index": 8, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[8]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create bastion"}, "module_options": "virt-install \\ \n--name {{ hypershift.hcp.hosted_cluster_name }}-bastion \\\n--memory 4096 \\\n--vcpus sockets=1,cores=4,threads=1 \\\n--disk /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-bastion.qcow2,format=qcow2,bus=virtio,cache=none \\\n--os-variant \"rhel{{hypershift.bastion_parms.os_variant}}\" \\\n--network network:{{ env.bridge_name }} \\\n--location '{{ env.file_server.protocol }}://{{ env.file_server.user + ':' + env.file_server.pass + '@' if env.file_server.protocol == 'ftp' else '' }}{{ env.file_server.ip }}/{{ env.file_server.iso_mount_dir }}/' \\\n--rng=/dev/urandom --initrd-inject /home/libvirt/bastion.ks \\\n--extra-args=\"ks=file:/bastion.ks ip={{ hypershift.bastion_hypershift }}::{{hypershift.bastion_parms.gateway}}:{{hypershift.bastion_parms.subnet_mask}}:{{ hypershift.bastion_parms.hostname }}.{{ hypershift.bastion_parms.base_domain }}:{{ hypershift.bastion_parms.interface }}:none console=ttysclp0 nameserver={{hypershift.bastion_parms.nameserver}}\" \\\n--noautoconsole \\\n--wait -1\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create bastion\n  shell: |\n    virt-install \\ \n    --name {{ hypershift.hcp.hosted_cluster_name }}-bastion \\\n    --memory 4096 \\\n    --vcpus sockets=1,cores=4,threads=1 \\\n    --disk /home/libvirt/images/{{ hypershift.hcp.hosted_cluster_name }}-bastion.qcow2,format=qcow2,bus=virtio,cache=none \\\n    --os-variant \"rhel{{hypershift.bastion_parms.os_variant}}\" \\\n    --network network:{{ env.bridge_name }} \\\n    --location '{{ env.file_server.protocol }}://{{ env.file_server.user + ':' + env.file_server.pass + '@' if env.file_server.protocol == 'ftp' else '' }}{{ env.file_server.ip }}/{{ env.file_server.iso_mount_dir }}/' \\\n    --rng=/dev/urandom --initrd-inject /home/libvirt/bastion.ks \\\n    --extra-args=\"ks=file:/bastion.ks ip={{ hypershift.bastion_hypershift }}::{{hypershift.bastion_parms.gateway}}:{{hypershift.bastion_parms.subnet_mask}}:{{ hypershift.bastion_parms.hostname }}.{{ hypershift.bastion_parms.base_domain }}:{{ hypershift.bastion_parms.interface }}:none console=ttysclp0 nameserver={{hypershift.bastion_parms.nameserver}}\" \\\n    --noautoconsole \\\n    --wait -1\n", "line_num_in_file": [47, 61], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "bastion_root_pw", "ssh_key", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name", "hypershift.bastion_parms.os_variant", "env.bridge_name", "env.file_server.protocol", "env.file_server.user+':'+env.file_server.pass+'@'ifenv.file_server.protocol=='ftp'else''", "env.file_server.ip", "env.file_server.iso_mount_dir", "hypershift.bastion_hypershift", "hypershift.bastion_parms.gateway", "hypershift.bastion_parms.subnet_mask", "hypershift.bastion_parms.hostname", "hypershift.bastion_parms.base_domain", "hypershift.bastion_parms.interface", "hypershift.bastion_parms.nameserver"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[9]", "name": "Waiting 1 minute for automated bastion installation and configuration to complete", "module": "ansible.builtin.pause", "index": 9, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[9]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Waiting 1 minute for automated bastion installation and configuration to complete"}, "module_options": {"minutes": 1}, "executable": "ansible.builtin.pause", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Waiting 1 minute for automated bastion installation and configuration to complete\n  ansible.builtin.pause:\n    minutes: 1\n", "line_num_in_file": [62, 65], "resolved_name": "ansible.builtin.pause", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "pause", "fqcn": "ansible.builtin.pause", "key": "module collection:ansible.builtin#module:ansible.builtin.pause"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.pause", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.pause", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["echo", "minutes", "prompt", "seconds"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "bastion_root_pw", "ssh_key", "hypershift.hcp.hosted_cluster_name", "hypershift.bastion_parms.os_variant", "env.bridge_name", "env.file_server.protocol", "env.file_server.user+':'+env.file_server.pass+'@'ifenv.file_server.protocol=='ftp'else''", "env.file_server.ip", "env.file_server.iso_mount_dir", "hypershift.bastion_hypershift", "hypershift.bastion_parms.gateway", "hypershift.bastion_parms.subnet_mask", "hypershift.bastion_parms.hostname", "hypershift.bastion_parms.base_domain", "hypershift.bastion_parms.interface", "hypershift.bastion_parms.nameserver"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bastion_hypershift#taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[10]", "name": "Add route to bastion from kvm_host", "module": "command", "index": 10, "play_index": -1, "defined_in": "roles/create_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_bastion_hypershift/tasks/main.yaml#task:[10]", "role": "create_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add route to bastion from kvm_host", "ignore_errors": true}, "module_options": "ip route add {{ hypershift.bastion_hypershift }} via {{ hypershift.gateway }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add route to bastion from kvm_host\n  command: ip route add {{ hypershift.bastion_hypershift }} via {{ hypershift.gateway }}\n  ignore_errors: true", "line_num_in_file": [66, 69], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["lookup('env','HOME')", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "bastion_root_pw", "ssh_key", "hypershift.hcp.hosted_cluster_name", "hypershift.bastion_parms.os_variant", "env.bridge_name", "env.file_server.protocol", "env.file_server.user+':'+env.file_server.pass+'@'ifenv.file_server.protocol=='ftp'else''", "env.file_server.ip", "env.file_server.iso_mount_dir", "hypershift.bastion_hypershift", "hypershift.bastion_parms.gateway", "hypershift.bastion_parms.subnet_mask", "hypershift.bastion_parms.hostname", "hypershift.bastion_parms.base_domain", "hypershift.bastion_parms.interface", "hypershift.bastion_parms.nameserver"], "vars_defined_in_previous_tasks": ["ssh_output", "ssh_key"], "vars_used_in_target_task": ["hypershift.bastion_hypershift", "hypershift.gateway"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bootstrap#taskfile:roles/create_bootstrap/tasks/main.yaml#task:[0]", "name": "Start bootstrap installation", "module": "ansible.builtin.shell", "index": 0, "play_index": -1, "defined_in": "roles/create_bootstrap/tasks/main.yaml", "local_key": "task taskfile:roles/create_bootstrap/tasks/main.yaml#task:[0]", "role": "create_bootstrap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_output": "task role:create_bootstrap#taskfile:roles/create_bootstrap/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Start bootstrap installation", "tags": "create_bootstrap", "timeout": 300, "register": "cmd_output"}, "module_options": "virsh destroy {{ env.cluster.nodes.bootstrap.vm_name }} || true\nvirsh undefine {{ env.cluster.nodes.bootstrap.vm_name }} --remove-all-storage || true\nvirt-install \\\n--name {{ env.cluster.nodes.bootstrap.vm_name }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.bootstrap.disk_size }}  \\\n--ram {{ env.cluster.nodes.bootstrap.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.bootstrap.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \\\ncoreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} \\\nip={{ env.cluster.nodes.bootstrap.ip }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.bootstrap.hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}::none:1500 \\\nnameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} \\\ncoreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/bootstrap.ign {{ _vm_console }}\" \\\n--graphics none \\\n--console pty,target_type=serial \\\n--wait=-1 \\\n--noautoconsole\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Start bootstrap installation\n  tags: create_bootstrap\n  ansible.builtin.shell: |\n    virsh destroy {{ env.cluster.nodes.bootstrap.vm_name }} || true\n    virsh undefine {{ env.cluster.nodes.bootstrap.vm_name }} --remove-all-storage || true\n    virt-install \\\n    --name {{ env.cluster.nodes.bootstrap.vm_name }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.bootstrap.disk_size }}  \\\n    --ram {{ env.cluster.nodes.bootstrap.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.bootstrap.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \\\n    coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} \\\n    ip={{ env.cluster.nodes.bootstrap.ip }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.bootstrap.hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}::none:1500 \\\n    nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} \\\n    coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/bootstrap.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --console pty,target_type=serial \\\n    --wait=-1 \\\n    --noautoconsole\n  timeout: 300\n  register: cmd_output\n", "line_num_in_file": [3, 29], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["cmd_output"], "vars_used_in_target_task": ["env.cluster.nodes.bootstrap.vm_name", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.bootstrap.disk_size", "env.cluster.nodes.bootstrap.ram", "env.cluster.nodes.bootstrap.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.bootstrap.ip", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.bootstrap.hostname", "env.cluster.networking.base_domain", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_bootstrap#taskfile:roles/create_bootstrap/tasks/main.yaml#task:[1]", "name": "Debug, print above command output", "module": "ansible.builtin.debug", "index": 1, "play_index": -1, "defined_in": "roles/create_bootstrap/tasks/main.yaml", "local_key": "task taskfile:roles/create_bootstrap/tasks/main.yaml#task:[1]", "role": "create_bootstrap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Debug, print above command output", "tags": "create_bootstrap"}, "module_options": {"var": "cmd_output"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Debug, print above command output\n  tags: create_bootstrap\n  ansible.builtin.debug:\n    var: cmd_output", "line_num_in_file": [30, 34], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.nodes.bootstrap.vm_name", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.bootstrap.disk_size", "env.cluster.nodes.bootstrap.ram", "env.cluster.nodes.bootstrap.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.bootstrap.ip", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.bootstrap.hostname", "env.cluster.networking.base_domain", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"], "vars_defined_in_previous_tasks": ["cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[0]", "name": "Check role/task parameters", "module": "ansible.builtin.fail", "index": 0, "play_index": -1, "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_node/tasks/main.yaml#task:[0]", "role": "create_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Check role/task parameters", "tags": "create_compute_node", "when": "((ansible_play_hosts | length)  > 1)"}, "module_options": {"msg": "Error: too many hosts defined in ansible play: {{ ansible_play_hosts }}"}, "executable": "ansible.builtin.fail", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check role/task parameters\n  tags: create_compute_node\n  ansible.builtin.fail:\n    msg: \"Error: too many hosts defined in ansible play: {{ ansible_play_hosts }}\"\n  when: ((ansible_play_hosts | length)  > 1)\n", "line_num_in_file": [3, 8], "resolved_name": "ansible.builtin.fail", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "fail", "fqcn": "ansible.builtin.fail", "key": "module collection:ansible.builtin#module:ansible.builtin.fail"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.fail", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.fail", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "msg", "expected_type": "str", "unknown_type_value": "Error: too many hosts defined in ansible play: {{ ansible_play_hosts }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["param_compute_node"], "vars_used_in_target_task": ["ansible_play_hosts"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[1]", "name": "Load variables based on target architecture", "module": "ansible.builtin.include_vars", "index": 1, "play_index": -1, "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_node/tasks/main.yaml#task:[1]", "role": "create_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Load variables based on target architecture"}, "module_options": "{{ role_path }}/../common/vars/{{ param_compute_node.host_arch }}/vars.yaml", "executable": "ansible.builtin.include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Load variables based on target architecture\n      ansible.builtin.include_vars: \"{{ role_path }}/../common/vars/{{ param_compute_node.host_arch }}/vars.yaml\"\n", "line_num_in_file": [15, 17], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_play_hosts"], "vars_defined_in_previous_tasks": ["param_compute_node"], "vars_used_in_target_task": ["role_path", "param_compute_node.host_arch"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[2]", "name": "If not available, download Red Hat CoreOS rootfs file {{ rhcos_live_rootfs }}", "module": "ansible.builtin.get_url", "index": 2, "play_index": -1, "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_node/tasks/main.yaml#task:[2]", "role": "create_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": [{"baseurl": "{{ rhcos_download_url }}", "file": "{{ rhcos_live_rootfs }}"}]}, "options": {"name": "If not available, download Red Hat CoreOS rootfs file {{ rhcos_live_rootfs }}", "loop": [{"baseurl": "{{ rhcos_download_url }}", "file": "{{ rhcos_live_rootfs }}"}]}, "module_options": {"url": "{{ item.baseurl }}{{ item.file }}", "dest": "/var/www/html/bin/{{ item.file }}", "mode": "0644"}, "executable": "ansible.builtin.get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: If not available, download Red Hat CoreOS rootfs file {{ rhcos_live_rootfs }}\n      ansible.builtin.get_url:\n        url: \"{{ item.baseurl }}{{ item.file }}\"\n        dest: /var/www/html/bin/{{ item.file }}\n        mode: \"0644\"\n      loop:\n        - { baseurl: \"{{ rhcos_download_url }}\", file: \"{{ rhcos_live_rootfs }}\" }\n", "line_num_in_file": [18, 25], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "get_url", "fqcn": "ansible.builtin.get_url", "key": "module collection:ansible.builtin#module:ansible.builtin.get_url"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "{{ rhcos_download_url }}{{ rhcos_live_rootfs }}"}, {"key": "dest", "expected_type": "str", "unknown_type_value": "/var/www/html/bin/{{ rhcos_live_rootfs }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_play_hosts", "role_path", "param_compute_node.host_arch"], "vars_defined_in_previous_tasks": ["param_compute_node"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[3]", "name": "Delete compute node VM, if already exists", "module": "ansible.builtin.shell", "index": 3, "play_index": -1, "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_node/tasks/main.yaml#task:[3]", "role": "create_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete compute node VM, if already exists", "tags": "create_compute_node"}, "module_options": "virsh destroy {{ param_compute_node.vm_name }} || true\nvirsh undefine {{ param_compute_node.vm_name }} --remove-all-storage || true\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Delete compute node VM, if already exists\n      tags: create_compute_node\n      ansible.builtin.shell: |\n        virsh destroy {{ param_compute_node.vm_name }} || true\n        virsh undefine {{ param_compute_node.vm_name }} --remove-all-storage || true\n", "line_num_in_file": [30, 35], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_play_hosts", "role_path", "param_compute_node.host_arch", "item"], "vars_defined_in_previous_tasks": ["param_compute_node"], "vars_used_in_target_task": ["param_compute_node.vm_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[4]", "name": "Get virsh list", "module": "community.libvirt.virt", "index": 4, "play_index": -1, "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_node/tasks/main.yaml#task:[4]", "role": "create_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_virsh_list": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get virsh list", "register": "cmd_virsh_list"}, "module_options": {"command": "list_vms"}, "executable": "community.libvirt.virt", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Get virsh list\n          community.libvirt.virt:\n            command: list_vms\n          register: cmd_virsh_list", "line_num_in_file": [38, 41], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.libvirt.virt", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_play_hosts", "role_path", "param_compute_node.host_arch", "item", "param_compute_node.vm_name"], "vars_defined_in_previous_tasks": ["param_compute_node", "cmd_virsh_list"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[5]", "name": "Print virsh list", "module": "ansible.builtin.debug", "index": 5, "play_index": -1, "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_node/tasks/main.yaml#task:[5]", "role": "create_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print virsh list"}, "module_options": {"var": "cmd_virsh_list"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Print virsh list\n          ansible.builtin.debug:\n            var: cmd_virsh_list\n", "line_num_in_file": [42, 45], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_play_hosts", "role_path", "param_compute_node.host_arch", "item", "param_compute_node.vm_name"], "vars_defined_in_previous_tasks": ["param_compute_node", "cmd_virsh_list"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[6]", "name": "Load variables based on architecture", "module": "ansible.builtin.include_vars", "index": 6, "play_index": -1, "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_node/tasks/main.yaml#task:[6]", "role": "create_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Load variables based on architecture"}, "module_options": "{{ role_path }}/../common/vars/{{ param_compute_node.host_arch }}/vars.yaml", "executable": "ansible.builtin.include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Load variables based on architecture\n          ansible.builtin.include_vars: \"{{ role_path }}/../common/vars/{{ param_compute_node.host_arch }}/vars.yaml\"\n", "line_num_in_file": [48, 50], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_play_hosts", "role_path", "param_compute_node.host_arch", "item", "param_compute_node.vm_name"], "vars_defined_in_previous_tasks": ["param_compute_node", "cmd_virsh_list"], "vars_used_in_target_task": ["role_path", "param_compute_node.host_arch"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[7]", "name": "Create compute node VM on {{ param_compute_node.host_arch }}", "module": "ansible.builtin.shell", "index": 7, "play_index": -1, "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_node/tasks/main.yaml#task:[7]", "role": "create_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_output": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[7]"}, "set_facts": {}, "loop": {}, "options": {"name": "Create compute node VM on {{ param_compute_node.host_arch }}", "timeout": 300, "register": "cmd_output"}, "module_options": "virt-install \\\n--name {{ param_compute_node.vm_name }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.compute.disk_size }}  \\\n--ram {{ env.cluster.nodes.compute.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.compute.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--graphics none \\\n--console pty,target_type=serial \\\n--wait -1 \\\n--noautoconsole \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \\\nip={{ param_compute_node.vm_ip }}::{{ env.bastion.networking.gateway }}:{{ env.bastion.networking.subnetmask }}:{{ param_compute_node.vm_hostname }}::none:1500 \\\nnameserver={{ env.cluster.networking.nameserver1 }}{{ (',' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} \\\ncoreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} \\\ncoreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\"\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Create compute node VM on {{ param_compute_node.host_arch }}\n          ansible.builtin.shell: |\n            virt-install \\\n            --name {{ param_compute_node.vm_name }} \\\n            --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n            --autostart \\\n            --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.compute.disk_size }}  \\\n            --ram {{ env.cluster.nodes.compute.ram }} \\\n            --cpu host \\\n            --vcpus {{ env.cluster.nodes.compute.vcpu }} \\\n            --network network={{ env.bridge_name }} \\\n            --graphics none \\\n            --console pty,target_type=serial \\\n            --wait -1 \\\n            --noautoconsole \\\n            --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n            --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \\\n            ip={{ param_compute_node.vm_ip }}::{{ env.bastion.networking.gateway }}:{{ env.bastion.networking.subnetmask }}:{{ param_compute_node.vm_hostname }}::none:1500 \\\n            nameserver={{ env.cluster.networking.nameserver1 }}{{ (',' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} \\\n            coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} \\\n            coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\"\n          timeout: 300\n          register: cmd_output", "line_num_in_file": [51, 73], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_play_hosts", "role_path", "param_compute_node.host_arch", "item", "param_compute_node.vm_name"], "vars_defined_in_previous_tasks": ["param_compute_node", "cmd_virsh_list", "cmd_output"], "vars_used_in_target_task": ["param_compute_node.vm_name", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.compute.disk_size", "env.cluster.nodes.compute.ram", "env.cluster.nodes.compute.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "param_compute_node.vm_ip", "env.bastion.networking.gateway", "env.bastion.networking.subnetmask", "param_compute_node.vm_hostname", "env.cluster.networking.nameserver1", "(','+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "env.bastion.networking.ip", "rhcos_live_rootfs", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_node#taskfile:roles/create_compute_node/tasks/main.yaml#task:[8]", "name": "Debug, print above command output", "module": "ansible.builtin.debug", "index": 8, "play_index": -1, "defined_in": "roles/create_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_node/tasks/main.yaml#task:[8]", "role": "create_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Debug, print above command output"}, "module_options": {"var": "cmd_output"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Debug, print above command output\n          ansible.builtin.debug:\n            var: cmd_output", "line_num_in_file": [74, 77], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_play_hosts", "role_path", "param_compute_node.host_arch", "item", "param_compute_node.vm_name", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.compute.disk_size", "env.cluster.nodes.compute.ram", "env.cluster.nodes.compute.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "param_compute_node.vm_ip", "env.bastion.networking.gateway", "env.bastion.networking.subnetmask", "param_compute_node.vm_hostname", "env.cluster.networking.nameserver1", "(','+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "env.bastion.networking.ip", "rhcos_live_rootfs", "_vm_console"], "vars_defined_in_previous_tasks": ["param_compute_node", "cmd_virsh_list", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[0]", "name": "Install CoreOS on compute nodes", "module": "shell", "index": 0, "play_index": -1, "defined_in": "roles/create_compute_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[0]", "role": "create_compute_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1"}, "options": {"name": "Install CoreOS on compute nodes", "tags": "create_compute_nodes", "timeout": 300, "with_sequence": "start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname"}, "module_options": "virsh destroy {{ env.cluster.nodes.compute.vm_name[i] }} || true\nvirsh undefine {{ env.cluster.nodes.compute.vm_name[i] }} --remove-all-storage || true\nvirt-install \\\n--name {{ env.cluster.nodes.compute.vm_name[i] }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.compute.disk_size }}  \\\n--ram {{ env.cluster.nodes.compute.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.compute.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.compute.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.compute.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n--wait=-1 \\\n--noautoconsole\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Install CoreOS on compute nodes\n  tags: create_compute_nodes\n  shell: |\n    virsh destroy {{ env.cluster.nodes.compute.vm_name[i] }} || true\n    virsh undefine {{ env.cluster.nodes.compute.vm_name[i] }} --remove-all-storage || true\n    virt-install \\\n    --name {{ env.cluster.nodes.compute.vm_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.compute.disk_size }}  \\\n    --ram {{ env.cluster.nodes.compute.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.compute.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.compute.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.compute.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n    --wait=-1 \\\n    --noautoconsole\n  timeout: 300\n  with_sequence: start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname\n", "line_num_in_file": [2, 26], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.vm_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.compute.disk_size", "env.cluster.nodes.compute.ram", "env.cluster.nodes.compute.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.compute.ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[1]", "name": "Install CoreOS on infra nodes", "module": "shell", "index": 1, "play_index": -1, "defined_in": "roles/create_compute_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[1]", "role": "create_compute_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{ ( env.cluster.nodes.infra.hostname | length ) - 1}} stride=1"}, "options": {"name": "Install CoreOS on infra nodes", "tags": "create_compute_nodes", "with_sequence": "start=0 end={{ ( env.cluster.nodes.infra.hostname | length ) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.cluster.nodes.infra.hostname is defined and env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname"}, "module_options": "virt-install \\\n--name {{ env.cluster.nodes.infra.vm_name[i] }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.infra.disk_size }}  \\\n--ram {{ env.cluster.nodes.infra.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.infra.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.infra.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.infra.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n--wait=-1 \\\n--noautoconsole\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Install CoreOS on infra nodes\n  tags: create_compute_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.infra.vm_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.infra.disk_size }}  \\\n    --ram {{ env.cluster.nodes.infra.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.infra.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.infra.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.infra.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n    --wait=-1 \\\n    --noautoconsole\n  with_sequence: start=0 end={{ ( env.cluster.nodes.infra.hostname | length ) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined and env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname\n\n#If cluster is to be highly available, split control and infra nodes into lists corresponding to their future KVM hosts.\n", "line_num_in_file": [27, 50], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.vm_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.compute.disk_size", "env.cluster.nodes.compute.ram", "env.cluster.nodes.compute.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.compute.ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.vm_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.infra.disk_size", "env.cluster.nodes.infra.ram", "env.cluster.nodes.infra.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.infra.ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[2]", "name": "Split information from compute nodes into groups. The number of groups being equal to the number of KVM hosts there are.", "module": "set_fact", "index": 2, "play_index": -1, "defined_in": "roles/create_compute_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[2]", "role": "create_compute_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"compute_name": "{{ env.cluster.nodes.compute.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}", "compute_hostname": "{{ env.cluster.nodes.compute.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}", "compute_ip": "{{ env.cluster.nodes.compute.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"}, "loop": {}, "options": {"name": "Split information from compute nodes into groups. The number of groups being equal to the number of KVM hosts there are.", "tags": "create_compute_nodes", "when": "env.z.high_availability == True"}, "module_options": {"compute_name": "{{ env.cluster.nodes.compute.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}", "compute_hostname": "{{ env.cluster.nodes.compute.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}", "compute_ip": "{{ env.cluster.nodes.compute.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Split information from compute nodes into groups. The number of groups being equal to the number of KVM hosts there are.\n  tags: create_compute_nodes\n  set_fact:\n    compute_name: \"{{ env.cluster.nodes.compute.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n    compute_hostname: \"{{ env.cluster.nodes.compute.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n    compute_ip: \"{{ env.cluster.nodes.compute.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n  when: env.z.high_availability == True\n", "line_num_in_file": [51, 58], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.vm_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.compute.disk_size", "env.cluster.nodes.compute.ram", "env.cluster.nodes.compute.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.compute.ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.vm_name[i]", "env.cluster.nodes.infra.disk_size", "env.cluster.nodes.infra.ram", "env.cluster.nodes.infra.vcpu", "env.cluster.nodes.infra.ip[i]", "env.cluster.nodes.infra.hostname[i]"], "vars_defined_in_previous_tasks": ["compute_name", "compute_hostname", "compute_ip"], "vars_used_in_target_task": ["env.cluster.nodes.compute.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host']", "env.cluster.nodes.compute.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host']", "env.cluster.nodes.compute.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[3]", "name": "Split information for infra nodes into groups. The number of groups being equal to the number of KVM hosts there are.", "module": "set_fact", "index": 3, "play_index": -1, "defined_in": "roles/create_compute_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[3]", "role": "create_compute_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"infra_name": "{{ env.cluster.nodes.infra.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}", "infra_hostname": "{{ env.cluster.nodes.infra.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}", "infra_ip": "{{ env.cluster.nodes.infra.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"}, "loop": {}, "options": {"name": "Split information for infra nodes into groups. The number of groups being equal to the number of KVM hosts there are.", "tags": "create_compute_nodes", "when": "env.z.high_availability == True and env.cluster.nodes.infra.hostname is defined"}, "module_options": {"infra_name": "{{ env.cluster.nodes.infra.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}", "infra_hostname": "{{ env.cluster.nodes.infra.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}", "infra_ip": "{{ env.cluster.nodes.infra.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Split information for infra nodes into groups. The number of groups being equal to the number of KVM hosts there are.\n  tags: create_compute_nodes\n  set_fact:\n    infra_name: \"{{ env.cluster.nodes.infra.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n    infra_hostname: \"{{ env.cluster.nodes.infra.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n    infra_ip: \"{{ env.cluster.nodes.infra.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host'] | length] }}\"\n  when: env.z.high_availability == True and env.cluster.nodes.infra.hostname is defined\n", "line_num_in_file": [59, 66], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["compute_name", "compute_hostname", "compute_ip", "infra_name", "infra_hostname", "infra_ip"], "vars_used_in_target_task": ["env.cluster.nodes.infra.vm_name[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host']", "env.cluster.nodes.infra.hostname[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host']", "env.cluster.nodes.infra.ip[groups['kvm_host'].index(inventory_hostname)::groups['kvm_host']"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[4]", "name": "Create CoreOS compute nodes on KVM hosts, if cluster is to be highly available.", "module": "shell", "index": 4, "play_index": -1, "defined_in": "roles/create_compute_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[4]", "role": "create_compute_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ compute_name | zip(compute_hostname, compute_ip) | list }}"}, "options": {"name": "Create CoreOS compute nodes on KVM hosts, if cluster is to be highly available.", "tags": "create_compute_nodes", "loop": "{{ compute_name | zip(compute_hostname, compute_ip) | list }}", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.z.high_availability == True and compute_hostname[i] is defined"}, "module_options": "virt-install \\\n--name {{ compute_name[i] }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.compute.disk_size }}  \\\n--ram {{ env.cluster.nodes.compute.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.compute.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ compute_ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ compute_hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n--wait=-1 \\\n--noautoconsole\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create CoreOS compute nodes on KVM hosts, if cluster is to be highly available.\n  tags: create_compute_nodes\n  shell: |\n    virt-install \\\n    --name {{ compute_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.compute.disk_size }}  \\\n    --ram {{ env.cluster.nodes.compute.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.compute.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ compute_ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ compute_hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n    --wait=-1 \\\n    --noautoconsole\n  loop: \"{{ compute_name | zip(compute_hostname, compute_ip) | list }}\"\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.z.high_availability == True and compute_hostname[i] is defined\n", "line_num_in_file": [67, 88], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["compute_name", "compute_hostname", "compute_ip", "infra_name", "infra_hostname", "infra_ip"], "vars_used_in_target_task": ["item", "compute_name", "compute_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.compute.disk_size", "env.cluster.nodes.compute.ram", "env.cluster.nodes.compute.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "compute_ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "compute_hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_compute_nodes#taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[5]", "name": "Create CoreOS infra nodes on KVM hosts, if cluster is to be highly available.", "module": "shell", "index": 5, "play_index": -1, "defined_in": "roles/create_compute_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_compute_nodes/tasks/main.yaml#task:[5]", "role": "create_compute_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ infra_name | zip(infra_hostname, infra_ip) | list }}"}, "options": {"name": "Create CoreOS infra nodes on KVM hosts, if cluster is to be highly available.", "tags": "create_compute_nodes", "loop": "{{ infra_name | zip(infra_hostname, infra_ip) | list }}", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.cluster.nodes.infra.hostname is defined and infra_hostname[i] is defined and env.z.high_availability == True"}, "module_options": "virt-install \\\n--name {{ infra_name[i] }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.infra.disk_size }}  \\\n--ram {{ env.cluster.nodes.infra.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.infra.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ infra_ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ infra_hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n--wait=-1 \\\n--noautoconsole\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create CoreOS infra nodes on KVM hosts, if cluster is to be highly available.\n  tags: create_compute_nodes\n  shell: |\n    virt-install \\\n    --name {{ infra_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.infra.disk_size }}  \\\n    --ram {{ env.cluster.nodes.infra.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.infra.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ infra_ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ infra_hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/worker.ign {{ _vm_console }}\" \\\n    --wait=-1 \\\n    --noautoconsole\n  loop: \"{{ infra_name | zip(infra_hostname, infra_ip) | list }}\"\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined and infra_hostname[i] is defined and env.z.high_availability == True", "line_num_in_file": [89, 110], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["compute_name", "compute_hostname", "compute_ip", "infra_name", "infra_hostname", "infra_ip"], "vars_used_in_target_task": ["item", "infra_name", "infra_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.infra.disk_size", "env.cluster.nodes.infra.ram", "env.cluster.nodes.infra.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "infra_ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "infra_hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml#task:[0]", "name": "Create CoreOS control nodes on the the KVM host.", "module": "shell", "index": 0, "play_index": -1, "defined_in": "roles/create_control_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_control_nodes/tasks/main.yaml#task:[0]", "role": "create_control_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1"}, "options": {"name": "Create CoreOS control nodes on the the KVM host.", "tags": "create_control_nodes", "timeout": 300, "with_sequence": "start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname"}, "module_options": "virt-install \\\n--name {{ env.cluster.nodes.control.vm_name[i] }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }} \\\n--ram {{ env.cluster.nodes.control.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.control.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n--graphics none \\\n--console pty,target_type=serial \\\n--wait=-1 \\\n--noautoconsole\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create CoreOS control nodes on the the KVM host.\n  tags: create_control_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.control.vm_name[i] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }} \\\n    --ram {{ env.cluster.nodes.control.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.control.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[i] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[i] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --console pty,target_type=serial \\\n    --wait=-1 \\\n    --noautoconsole\n  timeout: 300\n  with_sequence: start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.z.high_availability == False and inventory_hostname == env.z.lpar1.hostname\n", "line_num_in_file": [2, 26], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.vm_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.control.disk_size", "env.cluster.nodes.control.ram", "env.cluster.nodes.control.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.control.ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml#task:[1]", "name": "Create the first CoreOS control node on the first KVM host, if cluster is to be highly available.", "module": "shell", "index": 1, "play_index": -1, "defined_in": "roles/create_control_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_control_nodes/tasks/main.yaml#task:[1]", "role": "create_control_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create the first CoreOS control node on the first KVM host, if cluster is to be highly available.", "tags": "create_control_nodes", "when": "env.z.high_availability == True and inventory_hostname == env.z.lpar1.hostname"}, "module_options": "virt-install \\\n--name {{ env.cluster.nodes.control.vm_name[0] }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }}  \\\n--ram {{ env.cluster.nodes.control.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.control.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[0] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[0] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n--graphics none \\\n--wait=-1 \\\n--noautoconsole\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create the first CoreOS control node on the first KVM host, if cluster is to be highly available.\n  tags: create_control_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.control.vm_name[0] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }}  \\\n    --ram {{ env.cluster.nodes.control.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.control.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[0] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[0] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --wait=-1 \\\n    --noautoconsole\n  when: env.z.high_availability == True and inventory_hostname == env.z.lpar1.hostname\n", "line_num_in_file": [27, 45], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.vm_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.control.disk_size", "env.cluster.nodes.control.ram", "env.cluster.nodes.control.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.control.ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.nodes.control.vm_name[0]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.control.disk_size", "env.cluster.nodes.control.ram", "env.cluster.nodes.control.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.control.ip[0]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.control.hostname[0]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml#task:[2]", "name": "Create the second CoreOS control node on the second KVM host, if cluster is to be highly available.", "module": "shell", "index": 2, "play_index": -1, "defined_in": "roles/create_control_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_control_nodes/tasks/main.yaml#task:[2]", "role": "create_control_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create the second CoreOS control node on the second KVM host, if cluster is to be highly available.", "tags": "create_control_nodes", "when": "env.z.high_availability == True and inventory_hostname == env.z.lpar2.hostname"}, "module_options": "virt-install \\\n--name {{ env.cluster.nodes.control.vm_name[1] }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }}  \\\n--ram {{ env.cluster.nodes.control.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.control.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[1] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[1] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n--graphics none \\\n--wait=-1 \\\n--noautoconsole\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create the second CoreOS control node on the second KVM host, if cluster is to be highly available.\n  tags: create_control_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.control.vm_name[1] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }}  \\\n    --ram {{ env.cluster.nodes.control.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.control.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[1] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[1] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --wait=-1 \\\n    --noautoconsole\n  when: env.z.high_availability == True and inventory_hostname == env.z.lpar2.hostname\n", "line_num_in_file": [46, 64], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.vm_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.control.disk_size", "env.cluster.nodes.control.ram", "env.cluster.nodes.control.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.control.ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console", "env.cluster.nodes.control.vm_name[0]", "env.cluster.nodes.control.ip[0]", "env.cluster.nodes.control.hostname[0]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.nodes.control.vm_name[1]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.control.disk_size", "env.cluster.nodes.control.ram", "env.cluster.nodes.control.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.control.ip[1]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.control.hostname[1]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_control_nodes#taskfile:roles/create_control_nodes/tasks/main.yaml#task:[3]", "name": "Create the third CoreOS control node on the third KVM host, if cluster is to be highly available.", "module": "shell", "index": 3, "play_index": -1, "defined_in": "roles/create_control_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/create_control_nodes/tasks/main.yaml#task:[3]", "role": "create_control_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create the third CoreOS control node on the third KVM host, if cluster is to be highly available.", "tags": "create_control_nodes", "when": "env.z.high_availability == True and inventory_hostname == env.z.lpar3.hostname"}, "module_options": "virt-install \\\n--name {{ env.cluster.nodes.control.vm_name[2] }} \\\n--osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n--autostart \\\n--disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }}  \\\n--ram {{ env.cluster.nodes.control.ram }} \\\n--cpu host \\\n--vcpus {{ env.cluster.nodes.control.vcpu }} \\\n--network network={{ env.bridge_name }} \\\n--location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n--extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[2] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[2] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n--graphics none \\\n--wait=-1 \\\n--noautoconsole\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create the third CoreOS control node on the third KVM host, if cluster is to be highly available.\n  tags: create_control_nodes\n  shell: |\n    virt-install \\\n    --name {{ env.cluster.nodes.control.vm_name[2] }} \\\n    --osinfo detect=on,name={{ ('rhel8.6') if rhcos_os_variant is not defined else (rhcos_os_variant) }} \\\n    --autostart \\\n    --disk pool={{ env.cluster.networking.metadata_name }}-vdisk,size={{ env.cluster.nodes.control.disk_size }}  \\\n    --ram {{ env.cluster.nodes.control.ram }} \\\n    --cpu host \\\n    --vcpus {{ env.cluster.nodes.control.vcpu }} \\\n    --network network={{ env.bridge_name }} \\\n    --location {{ rhcos_download_url }},kernel={{ rhcos_live_kernel }},initrd={{ rhcos_live_initrd }} \\\n    --extra-args \"rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda coreos.live.rootfs_url=http://{{ env.bastion.networking.ip }}:8080/bin/{{ rhcos_live_rootfs }} ip={{ env.cluster.nodes.control.ip[2] }}::{{ env.cluster.networking.gateway }}:{{ env.cluster.networking.subnetmask }}:{{ env.cluster.nodes.control.hostname[2] }}::none:1500 nameserver={{ env.cluster.networking.nameserver1 }} {{ ('--nameserver=' + env.cluster.networking.nameserver2) if env.cluster.networking.nameserver2 is defined else '' }} coreos.inst.ignition_url=http://{{ env.bastion.networking.ip }}:8080/ignition/master.ign {{ _vm_console }}\" \\\n    --graphics none \\\n    --wait=-1 \\\n    --noautoconsole\n  when: env.z.high_availability == True and inventory_hostname == env.z.lpar3.hostname", "line_num_in_file": [65, 83], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.vm_name[i]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.control.disk_size", "env.cluster.nodes.control.ram", "env.cluster.nodes.control.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.control.ip[i]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console", "env.cluster.nodes.control.vm_name[0]", "env.cluster.nodes.control.ip[0]", "env.cluster.nodes.control.hostname[0]", "env.cluster.nodes.control.vm_name[1]", "env.cluster.nodes.control.ip[1]", "env.cluster.nodes.control.hostname[1]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.nodes.control.vm_name[2]", "('rhel8.6')ifrhcos_os_variantisnotdefinedelse(rhcos_os_variant)", "env.cluster.networking.metadata_name", "env.cluster.nodes.control.disk_size", "env.cluster.nodes.control.ram", "env.cluster.nodes.control.vcpu", "env.bridge_name", "rhcos_download_url", "rhcos_live_kernel", "rhcos_live_initrd", "env.bastion.networking.ip", "rhcos_live_rootfs", "env.cluster.nodes.control.ip[2]", "env.cluster.networking.gateway", "env.cluster.networking.subnetmask", "env.cluster.nodes.control.hostname[2]", "env.cluster.networking.nameserver1", "('--nameserver='+env.cluster.networking.nameserver2)ifenv.cluster.networking.nameserver2isdefinedelse''", "_vm_console"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[0]", "name": "Getting Hosted Control Plane Namespace", "module": "set_fact", "index": 0, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[0]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"hosted_control_plane_namespace": "{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}"}, "loop": {}, "options": {"name": "Getting Hosted Control Plane Namespace"}, "module_options": {"hosted_control_plane_namespace": "{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Getting Hosted Control Plane Namespace\n  set_fact:\n    hosted_control_plane_namespace: \"{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}\"\n", "line_num_in_file": [2, 5], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[1]", "name": "Check if Hosted Control Plane Namespace exists", "module": "k8s_info", "index": 1, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[1]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"namespace_check": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check if Hosted Control Plane Namespace exists", "register": "namespace_check", "ignore_errors": true}, "module_options": {"api_version": "v1", "kind": "Namespace", "name": "{{ hosted_control_plane_namespace }}"}, "executable": "k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check if Hosted Control Plane Namespace exists\n  k8s_info:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hosted_control_plane_namespace }}\"\n  register: namespace_check\n  ignore_errors: true\n", "line_num_in_file": [6, 13], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check"], "vars_used_in_target_task": ["hosted_control_plane_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[2]", "name": "Create Hosted Control Plane Namespace", "module": "k8s", "index": 2, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[2]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create Hosted Control Plane Namespace", "when": "namespace_check.resources | length == 0"}, "module_options": {"api_version": "v1", "kind": "Namespace", "name": "{{ hosted_control_plane_namespace }}", "state": "present"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create Hosted Control Plane Namespace\n  k8s:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hosted_control_plane_namespace }}\"\n    state: present\n  when: namespace_check.resources | length == 0\n", "line_num_in_file": [14, 21], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check"], "vars_used_in_target_task": ["hosted_control_plane_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[3]", "name": "Get ssh key", "module": "ansible.builtin.shell", "index": 3, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[3]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_output": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get ssh key", "register": "ssh_output"}, "module_options": "cat ~/.ssh/{{ env.ansible_key_name }}.pub", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get ssh key\n  ansible.builtin.shell: cat ~/.ssh/{{ env.ansible_key_name }}.pub\n  register: ssh_output\n", "line_num_in_file": [22, 25], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output"], "vars_used_in_target_task": ["env.ansible_key_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[4]", "name": "Load ssh_key into a variable", "module": "set_fact", "index": 4, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[4]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"ssh_key": "{{ ssh_output.stdout_lines[0] }}"}, "loop": {}, "options": {"name": "Load ssh_key into a variable"}, "module_options": {"ssh_key": "{{ ssh_output.stdout_lines[0] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Load ssh_key into a variable\n  set_fact:\n    ssh_key: \"{{ ssh_output.stdout_lines[0] }}\"\n", "line_num_in_file": [26, 29], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key"], "vars_used_in_target_task": ["ssh_output.stdout_lines[0]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[5]", "name": "Get pod name for hypershift-cli-download", "module": "kubernetes.core.k8s_info", "index": 5, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[5]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"hypershift_pod_name": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[5]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get pod name for hypershift-cli-download", "register": "hypershift_pod_name"}, "module_options": {"api_version": "v1", "kind": "Pod", "namespace": "{{ hypershift.asc.mce_namespace }}", "label_selectors": ["app= hypershift-cli-download"]}, "executable": "kubernetes.core.k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get pod name for hypershift-cli-download\n  kubernetes.core.k8s_info:\n    api_version: v1\n    kind: Pod\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    label_selectors:\n      - app= hypershift-cli-download\n  register: hypershift_pod_name\n", "line_num_in_file": [30, 38], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "kubernetes.core.k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name"], "vars_used_in_target_task": ["hypershift.asc.mce_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[6]", "name": "Get hypershift.tar.gz file from pod", "module": "kubernetes.core.k8s_cp", "index": 6, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[6]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Get hypershift.tar.gz file from pod"}, "module_options": {"namespace": "{{ hypershift.asc.mce_namespace }}", "pod": "{{ hypershift_pod_name.resources[0].metadata.name }}", "remote_path": "/opt/app-root/src/linux/s390x/", "local_path": "/root/ansible_workdir", "state": "from_pod"}, "executable": "kubernetes.core.k8s_cp", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get hypershift.tar.gz file from pod\n  kubernetes.core.k8s_cp:\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    pod: \"{{ hypershift_pod_name.resources[0].metadata.name }}\"\n    remote_path: /opt/app-root/src/linux/s390x/\n    local_path: /root/ansible_workdir\n    state: from_pod\n", "line_num_in_file": [39, 46], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "kubernetes.core.k8s_cp", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name"], "vars_used_in_target_task": ["hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[7]", "name": "Extract binary from hypershift.tar.gz", "module": "unarchive", "index": 7, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[7]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Extract binary from hypershift.tar.gz"}, "module_options": {"src": "/root/ansible_workdir/hypershift.tar.gz", "dest": "/usr/local/bin/", "remote_src": true}, "executable": "unarchive", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Extract binary from hypershift.tar.gz\n  unarchive:\n    src: /root/ansible_workdir/hypershift.tar.gz\n    dest: /usr/local/bin/\n    remote_src: true\n", "line_num_in_file": [47, 52], "resolved_name": "ansible.builtin.unarchive", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "unarchive", "fqcn": "ansible.builtin.unarchive", "key": "module collection:ansible.builtin#module:ansible.builtin.unarchive"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.unarchive", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.unarchive", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "copy", "creates", "decrypt", "dest", "exclude", "extra_opts", "group", "include", "io_buffer_size", "keep_newer", "list_files", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[8]", "name": "Create a Hosted Cluster", "module": "command", "index": 8, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[8]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create a Hosted Cluster"}, "module_options": "hypershift create cluster agent  --name={{ hypershift.hcp.hosted_cluster_name }}  --pull-secret={{ hypershift.hcp.pull_secret_file }}  --agent-namespace={{ hosted_control_plane_namespace }}  --namespace={{ hypershift.hcp.clusters_namespace }}  --base-domain={{ hypershift.hcp.basedomain }}  --api-server-address=api.{{ hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}  --ssh-key ~/.ssh/{{ env.ansible_key_name }}.pub --release-image=quay.io/openshift-release-dev/ocp-release:{{ hypershift.hcp.ocp_release }}  {% set release_image = lookup('env', 'HCP_RELEASE_IMAGE') %} {% if release_image is defined and release_image != '' %} --release-image={{ release_image }} {% else %} --release-image=quay.io/openshift-release-dev/ocp-release:{{ hypershift.hcp.ocp_release }} {% endif %}\n", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create a Hosted Cluster\n  command: >\n    hypershift create cluster agent  --name={{ hypershift.hcp.hosted_cluster_name }}  --pull-secret={{ hypershift.hcp.pull_secret_file }}  --agent-namespace={{ hosted_control_plane_namespace\n    }}  --namespace={{ hypershift.hcp.clusters_namespace }}  --base-domain={{ hypershift.hcp.basedomain }}  --api-server-address=api.{{ hypershift.hcp.hosted_cluster_name\n    }}.{{ hypershift.hcp.basedomain }}  --ssh-key ~/.ssh/{{ env.ansible_key_name }}.pub\n    --release-image=quay.io/openshift-release-dev/ocp-release:{{ hypershift.hcp.ocp_release }}  {% set release_image = lookup('env', 'HCP_RELEASE_IMAGE') %}\n    {% if release_image is defined and release_image != '' %}\n    --release-image={{ release_image }}\n    {% else %}\n    --release-image=quay.io/openshift-release-dev/ocp-release:{{ hypershift.hcp.ocp_release }}\n    {% endif %}\n", "line_num_in_file": [53, 64], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name", "hypershift.hcp.pull_secret_file", "hosted_control_plane_namespace", "hypershift.hcp.clusters_namespace", "hypershift.hcp.basedomain", "env.ansible_key_name", "hypershift.hcp.ocp_release", "release_image"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[9]", "name": "Waiting for Hosted Control Plane to be available", "module": "command", "index": 9, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[9]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Waiting for Hosted Control Plane to be available"}, "module_options": "oc wait --timeout=30m --for=condition=Available --namespace={{ hypershift.hcp.clusters_namespace }} hostedcluster/{{ hypershift.hcp.hosted_cluster_name }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Waiting for Hosted Control Plane to be available\n  command: oc wait --timeout=30m --for=condition=Available --namespace={{ hypershift.hcp.clusters_namespace }} hostedcluster/{{ hypershift.hcp.hosted_cluster_name\n    }}\n", "line_num_in_file": [65, 68], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[10]", "name": "Wait for pods to come up in Hosted Cluster Namespace", "module": "shell", "index": 10, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[10]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"pod_count": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[10]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for pods to come up in Hosted Cluster Namespace", "register": "pod_count", "until": "pod_count.stdout | int > 30", "retries": 40, "delay": 10}, "module_options": "oc get pods -n {{ hosted_control_plane_namespace }} | wc -l", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for pods to come up in Hosted Cluster Namespace\n  shell: oc get pods -n {{ hosted_control_plane_namespace }} | wc -l\n  register: pod_count\n  until: pod_count.stdout | int > 30\n  retries: 40\n  delay: 10\n", "line_num_in_file": [69, 75], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count"], "vars_used_in_target_task": ["hosted_control_plane_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[11]", "name": "Wait for all pods to be in Running State in  Hosted Cluster Namespace", "module": "shell", "index": 11, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[11]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"pod_status": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[11]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for all pods to be in Running State in  Hosted Cluster Namespace", "register": "pod_status", "until": "pod_status.stdout == '0'", "retries": 30, "delay": 10}, "module_options": "oc get pods -n {{ hosted_control_plane_namespace }}  --no-headers | grep -v 'Running\\|Completed\\|Terminating' | wc -l", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for all pods to be in Running State in  Hosted Cluster Namespace\n  shell: oc get pods -n {{ hosted_control_plane_namespace }}  --no-headers | grep -v 'Running\\|Completed\\|Terminating' | wc -l\n  register: pod_status\n  until: pod_status.stdout == '0'\n  retries: 30\n  delay: 10\n", "line_num_in_file": [76, 82], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count", "pod_status"], "vars_used_in_target_task": ["hosted_control_plane_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[12]", "name": "Create InfraEnv.yaml", "module": "template", "index": 12, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[12]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create InfraEnv.yaml"}, "module_options": {"src": "InfraEnv.yaml.j2", "dest": "/root/ansible_workdir/InfraEnv.yaml"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create InfraEnv.yaml\n  template:\n    src: InfraEnv.yaml.j2\n    dest: /root/ansible_workdir/InfraEnv.yaml\n", "line_num_in_file": [83, 87], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count", "pod_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[13]", "name": "Deploy InfraEnv Resource", "module": "command", "index": 13, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[13]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Deploy InfraEnv Resource"}, "module_options": "oc apply -f /root/ansible_workdir/InfraEnv.yaml", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Deploy InfraEnv Resource\n  command: oc apply -f /root/ansible_workdir/InfraEnv.yaml\n", "line_num_in_file": [88, 90], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count", "pod_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[14]", "name": "Creating list of mac addresses", "module": "set_fact", "index": 14, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[14]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"agent_mac_addr": []}, "loop": {}, "options": {"name": "Creating list of mac addresses", "when": "hypershift.agents_parms.static_ip_parms.static_ip == true"}, "module_options": {"agent_mac_addr": []}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Creating list of mac addresses\n  set_fact:\n    agent_mac_addr: []\n  when: hypershift.agents_parms.static_ip_parms.static_ip == true\n", "line_num_in_file": [91, 95], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count", "pod_status", "agent_mac_addr"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[15]", "name": "Getting mac addresss for agents", "module": "set_fact", "index": 15, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[15]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"agent_mac_addr": "{{ hypershift.agents_parms.agent_mac_addr }}"}, "loop": {}, "options": {"name": "Getting mac addresss for agents", "when": "( hypershift.agents_parms.static_ip_parms.static_ip == true ) and ( hypershift.agents_parms.agent_mac_addr != None )"}, "module_options": {"agent_mac_addr": "{{ hypershift.agents_parms.agent_mac_addr }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Getting mac addresss for agents\n  set_fact:\n    agent_mac_addr: \"{{ hypershift.agents_parms.agent_mac_addr }}\"\n  when: ( hypershift.agents_parms.static_ip_parms.static_ip == true ) and ( hypershift.agents_parms.agent_mac_addr != None )\n", "line_num_in_file": [96, 100], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count", "pod_status", "agent_mac_addr"], "vars_used_in_target_task": ["hypershift.agents_parms.agent_mac_addr"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[16]", "name": "Generate mac addresses for agents", "module": "set_fact", "index": 16, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[16]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"agent_mac_addr": "{{ agent_mac_addr +  ['52:54:00' | community.general.random_mac] }}"}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Generate mac addresses for agents", "when": "( hypershift.agents_parms.static_ip_parms.static_ip == true ) and ( hypershift.agents_parms.agent_mac_addr == None )", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": {"agent_mac_addr": "{{ agent_mac_addr +  ['52:54:00' | community.general.random_mac] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Generate mac addresses for agents\n  set_fact:\n    agent_mac_addr: \"{{ agent_mac_addr +  ['52:54:00' | community.general.random_mac] }}\"\n  when: ( hypershift.agents_parms.static_ip_parms.static_ip == true ) and ( hypershift.agents_parms.agent_mac_addr == None )\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [101, 106], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image", "hypershift.agents_parms.agent_mac_addr"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count", "pod_status", "agent_mac_addr"], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "agent_mac_addr+['52:54:00'"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[17]", "name": "Create NMState Configs", "module": "template", "index": 17, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[17]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Create NMState Configs", "when": "hypershift.agents_parms.static_ip_parms.static_ip == true", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": {"src": "nmStateConfig.yaml.j2", "dest": "/root/ansible_workdir/nmStateConfig-agent-{{ item }}.yaml"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create NMState Configs\n  template:\n    src: nmStateConfig.yaml.j2\n    dest: /root/ansible_workdir/nmStateConfig-agent-{{ item }}.yaml\n  when: hypershift.agents_parms.static_ip_parms.static_ip == true\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [107, 113], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "/root/ansible_workdir/nmStateConfig-agent-{{ item }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image", "hypershift.agents_parms.agent_mac_addr", "item", "range(hypershift.agents_parms.agents_count", "agent_mac_addr+['52:54:00'"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count", "pod_status", "agent_mac_addr"], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[18]", "name": "Deploy NMState Configs", "module": "command", "index": 18, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[18]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Deploy NMState Configs", "when": "hypershift.agents_parms.static_ip_parms.static_ip == true", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": "oc apply -f /root/ansible_workdir/nmStateConfig-agent-{{ item }}.yaml", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Deploy NMState Configs\n  command: oc apply -f /root/ansible_workdir/nmStateConfig-agent-{{ item }}.yaml\n  when: hypershift.agents_parms.static_ip_parms.static_ip == true\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [114, 118], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image", "hypershift.agents_parms.agent_mac_addr", "item", "range(hypershift.agents_parms.agents_count", "agent_mac_addr+['52:54:00'"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count", "pod_status", "agent_mac_addr"], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[19]", "name": "Wait for ISO to generate in InfraEnv", "module": "shell", "index": 19, "play_index": -1, "defined_in": "roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[19]", "role": "create_hcp_InfraEnv_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"infra": "task role:create_hcp_InfraEnv_hypershift#taskfile:roles/create_hcp_InfraEnv_hypershift/tasks/main.yaml#task:[19]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for ISO to generate in InfraEnv", "register": "infra", "until": "infra.stdout.split(' ')[-1] != ''", "retries": 60, "delay": 20}, "module_options": "oc get InfraEnv -n  {{ hosted_control_plane_namespace }} --no-headers", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for ISO to generate in InfraEnv\n  shell: oc get InfraEnv -n  {{ hosted_control_plane_namespace }} --no-headers\n  register: infra\n  until: infra.stdout.split(' ')[-1] != ''\n  retries: 60\n  delay: 20", "line_num_in_file": [119, 125], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hosted_control_plane_namespace", "env.ansible_key_name", "ssh_output.stdout_lines[0]", "hypershift.asc.mce_namespace", "hypershift_pod_name.resources[0].metadata.name", "hypershift.hcp.pull_secret_file", "hypershift.hcp.basedomain", "hypershift.hcp.ocp_release", "release_image", "hypershift.agents_parms.agent_mac_addr", "item", "range(hypershift.agents_parms.agents_count", "agent_mac_addr+['52:54:00'"], "vars_defined_in_previous_tasks": ["hosted_control_plane_namespace", "namespace_check", "ssh_output", "ssh_key", "hypershift_pod_name", "pod_count", "pod_status", "agent_mac_addr", "infra"], "vars_used_in_target_task": ["hosted_control_plane_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[0]", "name": "Find inventory directory from ansible.cfg", "module": "shell", "index": 0, "play_index": -1, "defined_in": "roles/create_inventory_setup_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[0]", "role": "create_inventory_setup_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"find_inventory": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Find inventory directory from ansible.cfg", "tags": "set_inventory", "register": "find_inventory"}, "module_options": "cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory"], "vars_used_in_target_task": ["ansible_config_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[1]", "name": "Find absolute path to project.", "module": "shell", "index": 1, "play_index": -1, "defined_in": "roles/create_inventory_setup_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[1]", "role": "create_inventory_setup_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"find_project": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Find absolute path to project.", "tags": "set_inventory", "register": "find_project"}, "module_options": "ansible_config=\"{{ ansible_config_file }}\"\necho \"${ansible_config%/*}/\"\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n", "line_num_in_file": [7, 13], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project"], "vars_used_in_target_task": ["ansible_config_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[2]", "name": "Create inventory", "module": "template", "index": 2, "play_index": -1, "defined_in": "roles/create_inventory_setup_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[2]", "role": "create_inventory_setup_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create inventory"}, "module_options": {"src": "inventory_template.j2", "dest": "{{ find_project.stdout }}{{ find_inventory.stdout }}/inventory_hypershift"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create inventory\n  template:\n    src: inventory_template.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/inventory_hypershift\"\n", "line_num_in_file": [14, 18], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "{{ find_project.stdout }}{{ find_inventory.stdout }}/inventory_hypershift", "undefined_variables": ["find_project.stdout", "find_inventory.stdout"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "{{ find_project.stdout }}{{ find_inventory.stdout }}/inventory_hypershift"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project"], "vars_used_in_target_task": ["find_project.stdout", "find_inventory.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[3]", "name": "Check if SSH key exists", "module": "stat", "index": 3, "play_index": -1, "defined_in": "roles/create_inventory_setup_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[3]", "role": "create_inventory_setup_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_key": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check if SSH key exists", "register": "ssh_key"}, "module_options": {"path": "~/.ssh/{{ env.ansible_key_name }}.pub"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check if SSH key exists\n  stat:\n    path: ~/.ssh/{{ env.ansible_key_name }}.pub\n  register: ssh_key\n", "line_num_in_file": [19, 23], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "stat", "fqcn": "ansible.builtin.stat", "key": "module collection:ansible.builtin#module:ansible.builtin.stat"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "~/.ssh/{{ env.ansible_key_name }}.pub", "undefined_variables": ["env.ansible_key_name"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "~/.ssh/{{ env.ansible_key_name }}.pub"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "ssh_key"], "vars_used_in_target_task": ["env.ansible_key_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[4]", "name": "Generate SSH key", "module": "command", "index": 4, "play_index": -1, "defined_in": "roles/create_inventory_setup_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[4]", "role": "create_inventory_setup_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Generate SSH key", "when": "ssh_key.stat.exists == false"}, "module_options": "ssh-keygen -t rsa -b 4096 -N \"\" -f \"~/.ssh/{{ env.ansible_key_name }}\"", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Generate SSH key\n  command: ssh-keygen -t rsa -b 4096 -N \"\" -f \"~/.ssh/{{ env.ansible_key_name }}\"\n  when: ssh_key.stat.exists == false\n", "line_num_in_file": [24, 27], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "ssh_key"], "vars_used_in_target_task": ["env.ansible_key_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[5]", "name": "Create expect file", "module": "template", "index": 5, "play_index": -1, "defined_in": "roles/create_inventory_setup_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[5]", "role": "create_inventory_setup_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create expect file"}, "module_options": {"src": "ssh-key.exp.j2", "dest": "{{ find_project.stdout }}{{ find_inventory.stdout }}/ssh-key.exp.sh", "mode": "+rx"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create expect file\n  template:\n    src: ssh-key.exp.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/ssh-key.exp.sh\"\n    mode: +rx\n", "line_num_in_file": [28, 33], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "{{ find_project.stdout }}{{ find_inventory.stdout }}/ssh-key.exp.sh", "undefined_variables": ["find_project.stdout", "find_inventory.stdout"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "{{ find_project.stdout }}{{ find_inventory.stdout }}/ssh-key.exp.sh"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "ssh_key"], "vars_used_in_target_task": ["find_project.stdout", "find_inventory.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[6]", "name": "Adding ssh key", "module": "shell", "index": 6, "play_index": -1, "defined_in": "roles/create_inventory_setup_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[6]", "role": "create_inventory_setup_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Adding ssh key"}, "module_options": "{{ find_project.stdout }}{{ find_inventory.stdout }}/ssh-key.exp.sh", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Adding ssh key\n      shell: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/ssh-key.exp.sh\"\n  rescue:", "line_num_in_file": [36, 38], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "ssh_key"], "vars_used_in_target_task": ["find_project.stdout", "find_inventory.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_inventory_setup_hypershift#taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[7]", "name": "Key already added", "module": "debug", "index": 7, "play_index": -1, "defined_in": "roles/create_inventory_setup_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/create_inventory_setup_hypershift/tasks/main.yaml#task:[7]", "role": "create_inventory_setup_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Key already added"}, "module_options": {"msg": "Ignore the above error if ssh-key already added"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Key already added\n      debug:\n        msg: Ignore the above error if ssh-key already added", "line_num_in_file": [39, 42], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "ssh_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml#task:[0]", "name": "Start LPAR", "module": "ibm.ibm_zhmc.zhmc_partition", "index": 0, "play_index": -1, "defined_in": "roles/create_kvm_host/tasks/main.yaml", "local_key": "task taskfile:roles/create_kvm_host/tasks/main.yaml#task:[0]", "role": "create_kvm_host", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"_create_instances": "task role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Start LPAR", "tags": "create_kvm_host", "register": "_create_instances", "async": 600, "poll": 0}, "module_options": {"hmc_host": "{{ hmc.host }}", "hmc_auth": {"userid": "{{ hmc.auth.user }}", "password": "{{ hmc.auth.pass }}", "verify": false}, "cpc_name": "{{ cpc_name }}", "name": "{{ lpar.name }}", "properties": {"boot_ftp_host": "{{ env.file_server.ip }}", "boot_ftp_username": "{{ env.file_server.user }}", "boot_ftp_password": "{{ env.file_server.pass }}", "boot_ftp_insfile": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.ins", "boot_device": "ftp"}, "state": "active"}, "executable": "ibm.ibm_zhmc.zhmc_partition", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Start LPAR\n  tags: create_kvm_host\n  ibm.ibm_zhmc.zhmc_partition:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    name: \"{{ lpar.name }}\"\n    properties:\n      boot_ftp_host: \"{{ env.file_server.ip }}\"\n      boot_ftp_username: \"{{ env.file_server.user }}\"\n      boot_ftp_password: \"{{ env.file_server.pass }}\"\n      boot_ftp_insfile: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.ins\"\n      boot_device: ftp\n    state: active\n  register: _create_instances\n  async: 600\n  poll: 0\n", "line_num_in_file": [2, 22], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ibm.ibm_zhmc.zhmc_partition", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["_create_instances"], "vars_used_in_target_task": ["hmc.host", "cpc_name", "lpar.name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml#task:[1]", "name": "Wait for creation to finish", "module": "async_status", "index": 1, "play_index": -1, "defined_in": "roles/create_kvm_host/tasks/main.yaml", "local_key": "task taskfile:roles/create_kvm_host/tasks/main.yaml#task:[1]", "role": "create_kvm_host", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"_jobs": "task role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for creation to finish", "tags": "create_kvm_host", "register": "_jobs", "until": "_jobs.finished", "delay": 15, "retries": 40}, "module_options": {"jid": "{{ _create_instances.ansible_job_id }}"}, "executable": "async_status", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for creation to finish\n  tags: create_kvm_host\n  async_status:\n    jid: \"{{ _create_instances.ansible_job_id }}\"\n  register: _jobs\n  until: _jobs.finished\n  delay: 15 # Check every 15 seconds\n  retries: 40 # Retry up to 40 times\n\n#- name: Template hmccreds.yaml for use with os_messages.py\n#  tags: create_kvm_host, test2\n#  template:\n#    src: hmccreds.yaml.j2\n#    dest: \"{{ role_path }}/files/hmccreds.yaml\"\n\n#- name: Execute os_messages.py\n#  tags: create_kvm_host, test2\n#  command: \"{{ role_path }}/files/os_messages.py {{ role_path }}/files/hmcclient.yaml\"\n#  register: os_messages_output\n\n#- name: Show LPAR OS messages from HMC.\n#  tags: create_kvm_host, test2\n#  debug:\n#    msg: \"{{ os_messages_output }}\"\n#  until: \"'login:' in os_messages_output\"\n", "line_num_in_file": [23, 48], "resolved_name": "ansible.builtin.async_status", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "async_status", "fqcn": "ansible.builtin.async_status", "key": "module collection:ansible.builtin#module:ansible.builtin.async_status"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.async_status", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.async_status", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["jid", "mode"], "required_arg_keys": [{"key": "jid", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "jid", "value": "{{ _create_instances.ansible_job_id }}", "undefined_variables": ["_create_instances.ansible_job_id"]}], "unknown_type_values": [{"key": "jid", "expected_type": "str", "unknown_type_value": "{{ _create_instances.ansible_job_id }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name"], "vars_defined_in_previous_tasks": ["_create_instances", "_jobs"], "vars_used_in_target_task": ["_create_instances.ansible_job_id"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_kvm_host#taskfile:roles/create_kvm_host/tasks/main.yaml#task:[2]", "name": "Wait 7 minutes for automated RHEL installation and configuration to complete.", "module": "pause", "index": 2, "play_index": -1, "defined_in": "roles/create_kvm_host/tasks/main.yaml", "local_key": "task taskfile:roles/create_kvm_host/tasks/main.yaml#task:[2]", "role": "create_kvm_host", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Wait 7 minutes for automated RHEL installation and configuration to complete.", "tags": "create_kvm_host"}, "module_options": {"minutes": 7}, "executable": "pause", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait 7 minutes for automated RHEL installation and configuration to complete.\n  tags: create_kvm_host\n  pause:\n    minutes: 7\n\n#- name: Change LPAR's boot source to storage adapter instead of FTP for future booting\n#  tags: create_kvm_host\n#  ibm.ibm_zhmc.zhmc_partition:\n#    hmc_host: \"{{ hmc.host }}\"\n#    hmc_auth:\n#      userid: \"{{ hmc.auth.user }}\"\n#      password: \"{{ hmc.auth.pass }}\"\n#      verify: false\n#    cpc_name: \"{{ cpc_name }}\"\n#    name: \"{{ lpar.name }}\"\n#    properties:\n#      boot_device: \"storage-adapter\"\n#    state: active", "line_num_in_file": [49, 67], "resolved_name": "ansible.builtin.pause", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "pause", "fqcn": "ansible.builtin.pause", "key": "module collection:ansible.builtin#module:ansible.builtin.pause"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.pause", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.pause", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["echo", "minutes", "prompt", "seconds"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name", "_create_instances.ansible_job_id"], "vars_defined_in_previous_tasks": ["_create_instances", "_jobs"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[0]", "name": "Create logical partition.", "module": "ibm.ibm_zhmc.zhmc_partition", "index": 0, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[0]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"create_lpar": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Create logical partition.", "tags": "create_lpar, lpar", "register": "create_lpar"}, "module_options": {"hmc_host": "{{ hmc.host }}", "hmc_auth": {"userid": "{{ hmc.auth.user }}", "password": "{{ hmc.auth.pass }}", "verify": false}, "cpc_name": "{{ cpc_name }}", "name": "{{ lpar.name }}", "state": "stopped", "properties": {"description": "{{ lpar.description }}", "ifl_processors": "{{ lpar.ifl.count }}", "initial_memory": "{{ lpar.ifl.initial_memory }}", "maximum_memory": "{{ lpar.ifl.max_memory }}", "minimum_ifl_processing_weight": "{{ lpar.ifl.min_weight }}", "maximum_ifl_processing_weight": "{{ lpar.ifl.max_weight }}", "initial_ifl_processing_weight": "{{ lpar.ifl.initial_weight }}"}}, "executable": "ibm.ibm_zhmc.zhmc_partition", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create logical partition.\n  tags: create_lpar, lpar\n  ibm.ibm_zhmc.zhmc_partition:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    name: \"{{ lpar.name }}\"\n    state: stopped\n    properties:\n      description: \"{{ lpar.description }}\"\n      ifl_processors: \"{{ lpar.ifl.count }}\"\n      initial_memory: \"{{ lpar.ifl.initial_memory }}\"\n      maximum_memory: \"{{ lpar.ifl.max_memory }}\"\n      minimum_ifl_processing_weight: \"{{ lpar.ifl.min_weight }}\"\n      maximum_ifl_processing_weight: \"{{ lpar.ifl.max_weight }}\"\n      initial_ifl_processing_weight: \"{{ lpar.ifl.initial_weight }}\"\n  register: create_lpar\n", "line_num_in_file": [3, 23], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ibm.ibm_zhmc.zhmc_partition", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["create_lpar"], "vars_used_in_target_task": ["hmc.host", "cpc_name", "lpar.name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[1]", "name": "Print the result", "module": "debug", "index": 1, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[1]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print the result", "tags": "create_lpar, lpar"}, "module_options": {"var": "create_lpar"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print the result\n  tags: create_lpar, lpar\n  debug:\n    var: create_lpar\n\n# Attach storge group", "line_num_in_file": [24, 29], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name"], "vars_defined_in_previous_tasks": ["create_lpar"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[2]", "name": "Ensure storage group is attached to partition.", "module": "ibm.ibm_zhmc.zhmc_storage_group_attachment", "index": 2, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[2]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"sglparattach": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure storage group is attached to partition.", "tags": "create_lpar, storage_group, storage_group_1", "register": "sglparattach"}, "module_options": {"hmc_host": "{{ hmc.host }}", "hmc_auth": {"userid": "{{ hmc.auth.user }}", "password": "{{ hmc.auth.pass }}", "verify": false}, "cpc_name": "{{ cpc_name }}", "storage_group_name": "{{ lpar.storage_group_1.name }}", "partition_name": "{{ lpar.name  }}", "state": "attached"}, "executable": "ibm.ibm_zhmc.zhmc_storage_group_attachment", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Ensure storage group is attached to partition.\n  tags: create_lpar, storage_group, storage_group_1\n  ibm.ibm_zhmc.zhmc_storage_group_attachment:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    storage_group_name: \"{{ lpar.storage_group_1.name }}\"\n    partition_name: \"{{ lpar.name  }}\"\n    state: attached\n  register: sglparattach\n", "line_num_in_file": [30, 43], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ibm.ibm_zhmc.zhmc_storage_group_attachment", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name"], "vars_defined_in_previous_tasks": ["create_lpar", "sglparattach"], "vars_used_in_target_task": ["hmc.host", "cpc_name", "lpar.storage_group_1.name", "lpar.name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[3]", "name": "Print the result.", "module": "debug", "index": 3, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[3]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print the result.", "tags": "create_lpar, storage_group, storage_group_1"}, "module_options": {"var": "sglparattach"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print the result.\n  tags: create_lpar, nic, nic1\n  debug:\n    var: nic1\n", "line_num_in_file": [91, 95], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name"], "vars_defined_in_previous_tasks": ["create_lpar", "sglparattach"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[4]", "name": "Ensure second storage group is attached to partition, if defined.", "module": "ibm.ibm_zhmc.zhmc_storage_group_attachment", "index": 4, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[4]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"sglparattach": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure second storage group is attached to partition, if defined.", "tags": "create_lpar, storage_group, storage_group_2", "register": "sglparattach", "when": "lpar.storage_group_2.name is defined"}, "module_options": {"hmc_host": "{{ hmc.host }}", "hmc_auth": {"userid": "{{ hmc.auth.user }}", "password": "{{ hmc.auth.pass }}", "verify": false}, "cpc_name": "{{ cpc_name }}", "storage_group_name": "{{ lpar.storage_group_2.name }}", "partition_name": "{{ lpar.name  }}", "state": "attached"}, "executable": "ibm.ibm_zhmc.zhmc_storage_group_attachment", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Ensure second storage group is attached to partition, if defined.\n  tags: create_lpar, storage_group, storage_group_2\n  ibm.ibm_zhmc.zhmc_storage_group_attachment:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    storage_group_name: \"{{ lpar.storage_group_2.name }}\"\n    partition_name: \"{{ lpar.name  }}\"\n    state: attached\n  register: sglparattach\n  when: lpar.storage_group_2.name is defined\n", "line_num_in_file": [50, 64], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ibm.ibm_zhmc.zhmc_storage_group_attachment", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name"], "vars_defined_in_previous_tasks": ["create_lpar", "sglparattach"], "vars_used_in_target_task": ["hmc.host", "cpc_name", "lpar.storage_group_2.name", "lpar.name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[5]", "name": "Print the result.", "module": "debug", "index": 5, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[5]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print the result.", "tags": "create_lpar, storage_group, storage_group_2", "when": "lpar.storage_group_2.name is defined"}, "module_options": {"var": "sglparattach"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print the result.\n  tags: create_lpar, storage_group, storage_group_2\n  debug:\n    var: sglparattach\n  when: lpar.storage_group_2.name is defined\n\n#Attach Network Adapter ", "line_num_in_file": [65, 71], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name"], "vars_defined_in_previous_tasks": ["create_lpar", "sglparattach"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[6]", "name": "Ensure NIC1 exists in the partition.", "module": "ibm.ibm_zhmc.zhmc_nic", "index": 6, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[6]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"nic1": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[6]"}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure NIC1 exists in the partition.", "tags": "create_lpar, nic, nic1", "register": "nic1"}, "module_options": {"hmc_host": "{{ hmc.host }}", "hmc_auth": {"userid": "{{ hmc.auth.user }}", "password": "{{ hmc.auth.pass }}", "verify": false}, "cpc_name": "{{ cpc_name }}", "partition_name": "{{ lpar.name }}", "name": "{{ lpar.networking.nic.card1.name }}", "state": "present", "properties": {"adapter_name": "{{ lpar.networking.nic.card1.adapter }}", "adapter_port": "{{ lpar.networking.nic.card1.port }}", "description": "NIC1", "device_number": "{{ '%04x' % lpar.networking.nic.card1.dev_num | int }}"}}, "executable": "ibm.ibm_zhmc.zhmc_nic", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Ensure NIC1 exists in the partition.\n  tags: create_lpar, nic, nic1\n  ibm.ibm_zhmc.zhmc_nic:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    partition_name: \"{{ lpar.name }}\"\n    name: \"{{ lpar.networking.nic.card1.name }}\"\n    state: present\n    properties:\n      adapter_name: \"{{ lpar.networking.nic.card1.adapter }}\"\n      adapter_port: \"{{ lpar.networking.nic.card1.port }}\"\n      description: NIC1\n      device_number: \"{{ '%04x' % lpar.networking.nic.card1.dev_num | int }}\"\n  register: nic1\n", "line_num_in_file": [72, 90], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ibm.ibm_zhmc.zhmc_nic", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name"], "vars_defined_in_previous_tasks": ["create_lpar", "sglparattach", "nic1"], "vars_used_in_target_task": ["hmc.host", "cpc_name", "lpar.name", "lpar.networking.nic.card1.name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[7]", "name": "Print the result.", "module": "debug", "index": 7, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[7]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print the result.", "tags": "create_lpar, nic, nic1"}, "module_options": {"var": "nic1"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print the result.\n  tags: create_lpar, nic, nic1\n  debug:\n    var: nic1\n", "line_num_in_file": [91, 95], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name", "lpar.networking.nic.card1.name"], "vars_defined_in_previous_tasks": ["create_lpar", "sglparattach", "nic1"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[8]", "name": "Ensure NIC2 exists in the partition, if defined.", "module": "ibm.ibm_zhmc.zhmc_nic", "index": 8, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[8]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"nic2": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[8]"}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure NIC2 exists in the partition, if defined.", "tags": "create_lpar, nic, nic2", "register": "nic2", "when": "lpar.networking.nic.card2 is defined"}, "module_options": {"hmc_host": "{{ hmc.host }}", "hmc_auth": {"userid": "{{ hmc.auth.user }}", "password": "{{ hmc.auth.pass }}", "verify": false}, "cpc_name": "{{ cpc_name }}", "partition_name": "{{ lpar.name }}", "name": "{{ lpar.networking.nic.card2.name }}", "state": "present", "properties": {"adapter_name": "{{ lpar.networking.nic.card2.adapter }}", "adapter_port": "{{ lpar.networking.nic.card2.port }}", "description": "NIC2", "device_number": "{{ '%04x' % ( lpar.networking.nic.card2.dev_num | int ) }}"}}, "executable": "ibm.ibm_zhmc.zhmc_nic", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Ensure NIC2 exists in the partition, if defined.\n  tags: create_lpar, nic, nic2\n  ibm.ibm_zhmc.zhmc_nic:\n    hmc_host: \"{{ hmc.host }}\"\n    hmc_auth:\n      userid: \"{{ hmc.auth.user }}\"\n      password: \"{{ hmc.auth.pass }}\"\n      verify: false\n    cpc_name: \"{{ cpc_name }}\"\n    partition_name: \"{{ lpar.name }}\"\n    name: \"{{ lpar.networking.nic.card2.name }}\"\n    state: present\n    properties:\n      adapter_name: \"{{ lpar.networking.nic.card2.adapter }}\"\n      adapter_port: \"{{ lpar.networking.nic.card2.port }}\"\n      description: NIC2\n      device_number: \"{{ '%04x' % ( lpar.networking.nic.card2.dev_num | int ) }}\"\n  register: nic2\n  when: lpar.networking.nic.card2 is defined\n", "line_num_in_file": [96, 115], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ibm.ibm_zhmc.zhmc_nic", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name", "lpar.networking.nic.card1.name"], "vars_defined_in_previous_tasks": ["create_lpar", "sglparattach", "nic1", "nic2"], "vars_used_in_target_task": ["hmc.host", "cpc_name", "lpar.name", "lpar.networking.nic.card2.name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:create_lpar#taskfile:roles/create_lpar/tasks/main.yaml#task:[9]", "name": "Print the result.", "module": "debug", "index": 9, "play_index": -1, "defined_in": "roles/create_lpar/tasks/main.yaml", "local_key": "task taskfile:roles/create_lpar/tasks/main.yaml#task:[9]", "role": "create_lpar", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print the result.", "tags": "create_lpar, nic, nic2", "when": "lpar.networking.nic.card2 is defined"}, "module_options": {"var": "nic2"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print the result.\n  tags: create_lpar, nic, nic2\n  debug:\n    var: nic2\n  when: lpar.networking.nic.card2 is defined", "line_num_in_file": [116, 121], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name", "lpar.networking.nic.card1.name", "lpar.networking.nic.card2.name"], "vars_defined_in_previous_tasks": ["create_lpar", "sglparattach", "nic1", "nic2"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[0]", "name": "Delete compute node from OCP cluster", "module": "ansible.builtin.shell", "index": 0, "play_index": -1, "defined_in": "roles/delete_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/delete_compute_node/tasks/main.yaml#task:[0]", "role": "delete_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_output": "task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Delete compute node from OCP cluster", "register": "cmd_output"}, "module_options": "set -o pipefail\nif ! oc get nodes --no-headers=true | grep \"^{{ param_compute_node.vm_hostname | lower }}\" ; then\n    echo \"INFO: Node '{{ param_compute_node.vm_hostname }}' not found or is already deleted\"\n    exit 0\nfi\noc adm cordon {{ param_compute_node.vm_hostname | lower }}\noc adm drain {{ param_compute_node.vm_hostname | lower }} --force --delete-emptydir-data --ignore-daemonsets --timeout=30s\noc delete nodes {{ param_compute_node.vm_hostname | lower }}\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Delete compute node from OCP cluster\n      ansible.builtin.shell: |\n        set -o pipefail\n        if ! oc get nodes --no-headers=true | grep \"^{{ param_compute_node.vm_hostname | lower }}\" ; then\n            echo \"INFO: Node '{{ param_compute_node.vm_hostname }}' not found or is already deleted\"\n            exit 0\n        fi\n        oc adm cordon {{ param_compute_node.vm_hostname | lower }}\n        oc adm drain {{ param_compute_node.vm_hostname | lower }} --force --delete-emptydir-data --ignore-daemonsets --timeout=30s\n        oc delete nodes {{ param_compute_node.vm_hostname | lower }}\n      register: cmd_output", "line_num_in_file": [6, 16], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["param_compute_node", "cmd_output"], "vars_used_in_target_task": ["param_compute_node.vm_hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[1]", "name": "Print cmd output", "module": "ansible.builtin.debug", "index": 1, "play_index": -1, "defined_in": "roles/delete_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/delete_compute_node/tasks/main.yaml#task:[1]", "role": "delete_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print cmd output"}, "module_options": {"var": "cmd_output.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Print cmd output\n      ansible.builtin.debug:\n        var: cmd_output.stdout_lines\n", "line_num_in_file": [17, 20], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["param_compute_node.vm_hostname"], "vars_defined_in_previous_tasks": ["param_compute_node", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[2]", "name": "Delete compute node VM on KVM host", "module": "ansible.builtin.shell", "index": 2, "play_index": -1, "defined_in": "roles/delete_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/delete_compute_node/tasks/main.yaml#task:[2]", "role": "delete_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_output": "task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Delete compute node VM on KVM host", "register": "cmd_output"}, "module_options": "set -o pipefail\nvirsh destroy {{ param_compute_node.vm_name }} || true\nvirsh undefine {{ param_compute_node.vm_name }} --remove-all-storage || true\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Delete compute node VM on KVM host\n      ansible.builtin.shell: |\n        set -o pipefail\n        virsh destroy {{ param_compute_node.vm_name }} || true\n        virsh undefine {{ param_compute_node.vm_name }} --remove-all-storage || true\n      register: cmd_output", "line_num_in_file": [25, 30], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["param_compute_node.vm_hostname"], "vars_defined_in_previous_tasks": ["param_compute_node", "cmd_output"], "vars_used_in_target_task": ["param_compute_node.vm_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_compute_node#taskfile:roles/delete_compute_node/tasks/main.yaml#task:[3]", "name": "Print cmd output", "module": "ansible.builtin.debug", "index": 3, "play_index": -1, "defined_in": "roles/delete_compute_node/tasks/main.yaml", "local_key": "task taskfile:roles/delete_compute_node/tasks/main.yaml#task:[3]", "role": "delete_compute_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print cmd output"}, "module_options": {"var": "cmd_output.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Print cmd output\n      ansible.builtin.debug:\n        var: cmd_output.stdout_lines\n", "line_num_in_file": [17, 20], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["param_compute_node.vm_hostname", "param_compute_node.vm_name"], "vars_defined_in_previous_tasks": ["param_compute_node", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[0]", "name": "Delete bootstrap node, if exists", "module": "ansible.builtin.shell", "index": 0, "play_index": -1, "defined_in": "roles/delete_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/delete_nodes/tasks/main.yaml#task:[0]", "role": "delete_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"delete_bootstrap": "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Delete bootstrap node, if exists", "tags": "delete_nodes", "register": "delete_bootstrap", "changed_when": "('destroyed' in delete_bootstrap.stdout) or ('undefined' in delete_bootstrap.stdout)"}, "module_options": "set -o pipefail\nvirsh destroy \"{{ env.cluster.nodes.bootstrap.vm_name }}\" || true\nvirsh undefine \"{{ env.cluster.nodes.bootstrap.vm_name }}\" --remove-all-storage || true\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete bootstrap node, if exists\n  tags: delete_nodes\n  ansible.builtin.shell: |\n    set -o pipefail\n    virsh destroy \"{{ env.cluster.nodes.bootstrap.vm_name }}\" || true\n    virsh undefine \"{{ env.cluster.nodes.bootstrap.vm_name }}\" --remove-all-storage || true\n  register: delete_bootstrap\n  changed_when: ('destroyed' in delete_bootstrap.stdout) or ('undefined' in delete_bootstrap.stdout)\n", "line_num_in_file": [2, 10], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["delete_bootstrap"], "vars_used_in_target_task": ["env.cluster.nodes.bootstrap.vm_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[1]", "name": "Delete control, compute and infra nodes, if exists", "module": "ansible.builtin.shell", "index": 1, "play_index": -1, "defined_in": "roles/delete_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/delete_nodes/tasks/main.yaml#task:[1]", "role": "delete_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"delete_nodes": "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {"item": "{{ env.cluster.nodes.control.vm_name + env.cluster.nodes.compute.vm_name if env.cluster.nodes.infra.vm_name is not defined else env.cluster.nodes.control.vm_name + env.cluster.nodes.compute.vm_name + env.cluster.nodes.infra.vm_name }}"}, "options": {"name": "Delete control, compute and infra nodes, if exists", "tags": "delete_nodes", "loop": "{{ env.cluster.nodes.control.vm_name + env.cluster.nodes.compute.vm_name if env.cluster.nodes.infra.vm_name is not defined else env.cluster.nodes.control.vm_name + env.cluster.nodes.compute.vm_name + env.cluster.nodes.infra.vm_name }}", "register": "delete_nodes", "changed_when": "('destroyed' in delete_nodes.stdout) or ('undefined' in delete_nodes.stdout)"}, "module_options": "set -o pipefail\nvirsh destroy {{ item }} || true\nvirsh undefine {{ item }} --remove-all-storage || true\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete control, compute and infra nodes, if exists\n  tags: delete_nodes\n  ansible.builtin.shell: |\n    set -o pipefail\n    virsh destroy {{ item }} || true\n    virsh undefine {{ item }} --remove-all-storage || true\n  loop: \"{{ env.cluster.nodes.control.vm_name + env.cluster.nodes.compute.vm_name if env.cluster.nodes.infra.vm_name is not defined else env.cluster.nodes.control.vm_name\n    + env.cluster.nodes.compute.vm_name + env.cluster.nodes.infra.vm_name }}\"\n  register: delete_nodes\n  changed_when: ('destroyed' in delete_nodes.stdout) or ('undefined' in delete_nodes.stdout)\n", "line_num_in_file": [11, 21], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.nodes.bootstrap.vm_name"], "vars_defined_in_previous_tasks": ["delete_bootstrap", "delete_nodes"], "vars_used_in_target_task": ["item", "env.cluster.nodes.control.vm_name+env.cluster.nodes.compute.vm_nameifenv.cluster.nodes.infra.vm_nameisnotdefinedelseenv.cluster.nodes.control.vm_name+env.cluster.nodes.compute.vm_name+env.cluster.nodes.infra.vm_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[2]", "name": "Get virsh list", "module": "ansible.builtin.command", "index": 2, "play_index": -1, "defined_in": "roles/delete_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/delete_nodes/tasks/main.yaml#task:[2]", "role": "delete_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_virsh_list": "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get virsh list", "register": "cmd_virsh_list"}, "module_options": "virsh list", "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Get virsh list\n      ansible.builtin.command: virsh list\n      register: cmd_virsh_list\n", "line_num_in_file": [25, 28], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.nodes.bootstrap.vm_name", "item", "env.cluster.nodes.control.vm_name+env.cluster.nodes.compute.vm_nameifenv.cluster.nodes.infra.vm_nameisnotdefinedelseenv.cluster.nodes.control.vm_name+env.cluster.nodes.compute.vm_name+env.cluster.nodes.infra.vm_name"], "vars_defined_in_previous_tasks": ["delete_bootstrap", "delete_nodes", "cmd_virsh_list"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_nodes#taskfile:roles/delete_nodes/tasks/main.yaml#task:[3]", "name": "Print virsh list", "module": "ansible.builtin.debug", "index": 3, "play_index": -1, "defined_in": "roles/delete_nodes/tasks/main.yaml", "local_key": "task taskfile:roles/delete_nodes/tasks/main.yaml#task:[3]", "role": "delete_nodes", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print virsh list"}, "module_options": {"var": "cmd_virsh_list.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Print virsh list\n      ansible.builtin.debug:\n        var: cmd_virsh_list.stdout_lines", "line_num_in_file": [29, 32], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.nodes.bootstrap.vm_name", "item", "env.cluster.nodes.control.vm_name+env.cluster.nodes.compute.vm_nameifenv.cluster.nodes.infra.vm_nameisnotdefinedelseenv.cluster.nodes.control.vm_name+env.cluster.nodes.compute.vm_name+env.cluster.nodes.infra.vm_name"], "vars_defined_in_previous_tasks": ["delete_bootstrap", "delete_nodes", "cmd_virsh_list"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[0]", "name": "Login to Management Cluster", "module": "command", "index": 0, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[0]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Login to Management Cluster"}, "module_options": "oc login {{ api_server }} -u {{ user_name }} -p {{ password }} --insecure-skip-tls-verify=true", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Login to Management Cluster\n  command: oc login {{ api_server }} -u {{ user_name }} -p {{ password }} --insecure-skip-tls-verify=true\n", "line_num_in_file": [2, 4], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["api_server", "user_name", "password"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[1]", "name": "Scale in  Nodepool", "module": "command", "index": 1, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[1]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Scale in  Nodepool"}, "module_options": "oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas 0", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Scale in  Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas 0\n", "line_num_in_file": [5, 7], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[2]", "name": "Wait for Worker Nodes to Detach", "module": "k8s_info", "index": 2, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[2]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"nodes": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for Worker Nodes to Detach", "register": "nodes", "until": "nodes.resources | length == 0", "retries": 30, "delay": 10}, "module_options": {"api_version": "v1", "kind": "Node", "kubeconfig": "/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig"}, "executable": "k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for Worker Nodes to Detach\n  k8s_info:\n    api_version: v1\n    kind: Node\n    kubeconfig: /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig\n  register: nodes\n  until: nodes.resources | length == 0\n  retries: 30\n  delay: 10\n", "line_num_in_file": [8, 17], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["nodes"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[3]", "name": "Wait for Agentmachines to delete", "module": "k8s_info", "index": 3, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[3]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"agent_machines": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for Agentmachines to delete", "register": "agent_machines", "until": "agent_machines.resources | length == 0", "retries": 30, "delay": 10}, "module_options": {"api_version": "capi-provider.agent-install.openshift.io/v1alpha1", "kind": "AgentMachine"}, "executable": "k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for Agentmachines to delete\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == 0\n  retries: 30\n  delay: 10\n", "line_num_in_file": [18, 26], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[4]", "name": "Wait for Machines to delete", "module": "k8s_info", "index": 4, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[4]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"machines": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for Machines to delete", "register": "machines", "until": "machines.resources | length == 0", "retries": 30, "delay": 10}, "module_options": {"api_version": "cluster.x-k8s.io/v1beta1", "kind": "Machine"}, "executable": "k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for Machines to delete\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == 0\n  retries: 30\n  delay: 10\n", "line_num_in_file": [27, 35], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[5]", "name": "Get agent names", "module": "command", "index": 5, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[5]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"agents_info": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[5]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get agent names", "register": "agents_info"}, "module_options": "oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n", "line_num_in_file": [36, 39], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[6]", "name": "Create List for agents", "module": "set_fact", "index": 6, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[6]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"agents": []}, "loop": {}, "options": {"name": "Create List for agents"}, "module_options": {"agents": []}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create List for agents\n  set_fact:\n    agents: []", "line_num_in_file": [40, 42], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[7]", "name": "Get a List of agents", "module": "set_fact", "index": 7, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[7]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"agents": "{{ agents + [agents_info.stdout.split('\n')[item].split(' ')[0]] }}"}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Get a List of agents", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": {"agents": "{{ agents + [agents_info.stdout.split('\n')[item].split(' ')[0]] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [43, 47], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[8]", "name": "Delete Agents", "module": "command", "index": 8, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[8]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Delete Agents", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": "oc delete agent {{ agents[item] }} -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete Agents\n  command: oc delete agent {{ agents[item] }} -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [48, 51], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "agents[item]", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[9]", "name": "Remove workdir", "module": "file", "index": 9, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[9]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Remove workdir"}, "module_options": {"path": "/root/ansible_workdir", "state": "absent"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Remove workdir\n  file:\n    path: /root/ansible_workdir\n    state: absent\n", "line_num_in_file": [52, 56], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[10]", "name": "Delete InfraEnv resource", "module": "k8s", "index": 10, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[10]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete InfraEnv resource"}, "module_options": {"state": "absent", "api_version": "agent-install.openshift.io/v1beta1", "kind": "InfraEnv", "name": "{{ hypershift.hcp.hosted_cluster_name }}", "namespace": "{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete InfraEnv resource\n  k8s:\n    state: absent\n    api_version: agent-install.openshift.io/v1beta1\n    kind: InfraEnv\n    name: \"{{ hypershift.hcp.hosted_cluster_name }}\"\n    namespace: \"{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}\"\n", "line_num_in_file": [57, 64], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name", "hypershift.hcp.clusters_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[11]", "name": "Destroy Hosted Control Plane", "module": "command", "index": 11, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[11]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Destroy Hosted Control Plane"}, "module_options": "hypershift destroy cluster agent --name {{ hypershift.hcp.hosted_cluster_name }} --namespace {{ hypershift.hcp.clusters_namespace }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Destroy Hosted Control Plane\n  command: hypershift destroy cluster agent --name {{ hypershift.hcp.hosted_cluster_name }} --namespace {{ hypershift.hcp.clusters_namespace }}\n", "line_num_in_file": [65, 67], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name", "hypershift.hcp.clusters_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[12]", "name": "Delete Clusters Namespace", "module": "k8s", "index": 12, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[12]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete Clusters Namespace"}, "module_options": {"api_version": "v1", "kind": "Namespace", "name": "{{ hypershift.hcp.clusters_namespace }}", "state": "absent"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete Clusters Namespace\n  k8s:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hypershift.hcp.clusters_namespace }}\"\n    state: absent\n", "line_num_in_file": [68, 74], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[13]", "name": "Delete AgentServiceConfig", "module": "k8s", "index": 13, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[13]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete AgentServiceConfig", "when": "hypershift.mce.delete == true"}, "module_options": {"api_version": "agent-install.openshift.io/v1beta1", "kind": "AgentServiceConfig", "name": "agent", "state": "absent"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete AgentServiceConfig\n  k8s:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: AgentServiceConfig\n    name: agent\n    state: absent\n  when: hypershift.mce.delete == true\n", "line_num_in_file": [75, 82], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[14]", "name": "Delete Provisioning", "module": "k8s", "index": 14, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[14]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete Provisioning", "when": "hypershift.mce.delete == true"}, "module_options": {"name": "provisioning-configuration", "api_version": "metal3.io/v1alpha1", "kind": "Provisioning", "state": "absent"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete Provisioning\n  k8s:\n    name: provisioning-configuration\n    api_version: metal3.io/v1alpha1\n    kind: Provisioning\n    state: absent\n  when: hypershift.mce.delete == true\n", "line_num_in_file": [83, 90], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[15]", "name": "Delete ClusterImageSet", "module": "k8s", "index": 15, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[15]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete ClusterImageSet", "when": "hypershift.mce.delete == true"}, "module_options": {"name": "img{{ hypershift.hcp.ocp_release }}-appsub", "api_version": "hive.openshift.io/v1", "kind": "ClusterImageSet", "state": "absent"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete ClusterImageSet\n  k8s:\n    name: img{{ hypershift.hcp.ocp_release }}-appsub\n    api_version: hive.openshift.io/v1\n    kind: ClusterImageSet\n    state: absent\n  when: hypershift.mce.delete == true\n", "line_num_in_file": [91, 98], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["hypershift.hcp.ocp_release"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[16]", "name": "Delete MCE Instance", "module": "k8s", "index": 16, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[16]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete MCE Instance", "when": "hypershift.mce.delete == true"}, "module_options": {"name": "{{ hypershift.mce.instance_name }}", "namespace": "{{ hypershift.asc.mce_namespace }}", "api_version": "multicluster.openshift.io/v1", "kind": "MultiClusterEngine", "state": "absent", "wait": true, "wait_timeout": 400}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete MCE Instance\n  k8s:\n    name: \"{{ hypershift.mce.instance_name }}\"\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    api_version: multicluster.openshift.io/v1\n    kind: MultiClusterEngine\n    state: absent\n    wait: true\n    wait_timeout: 400\n  when: hypershift.mce.delete == true\n", "line_num_in_file": [99, 109], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.ocp_release"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["hypershift.mce.instance_name", "hypershift.asc.mce_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[17]", "name": "Delete MCE Subscription", "module": "k8s", "index": 17, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[17]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete MCE Subscription", "when": "hypershift.mce.delete == true"}, "module_options": {"name": "multicluster-engine", "namespace": "{{ hypershift.asc.mce_namespace }}", "api_version": "operators.coreos.com/v1alpha1", "kind": "Subscription", "state": "absent"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete MCE Subscription\n  k8s:\n    name: multicluster-engine\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    api_version: operators.coreos.com/v1alpha1\n    kind: Subscription\n    state: absent\n  when: hypershift.mce.delete == true\n", "line_num_in_file": [110, 118], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.ocp_release", "hypershift.mce.instance_name", "hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["hypershift.asc.mce_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[18]", "name": "Delete Operator Group - MCE", "module": "k8s", "index": 18, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[18]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete Operator Group - MCE", "when": "hypershift.mce.delete == true"}, "module_options": {"name": "multicluster-engine", "namespace": "{{ hypershift.asc.mce_namespace }}", "api_version": "operators.coreos.com/v1", "kind": "OperatorGroup", "state": "absent"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete Operator Group - MCE\n  k8s:\n    name: multicluster-engine\n    namespace: \"{{ hypershift.asc.mce_namespace }}\"\n    api_version: operators.coreos.com/v1\n    kind: OperatorGroup\n    state: absent\n  when: hypershift.mce.delete == true\n", "line_num_in_file": [119, 127], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.ocp_release", "hypershift.mce.instance_name", "hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["hypershift.asc.mce_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_bastion_hypershift#taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[19]", "name": "Delete MCE Namespace", "module": "k8s", "index": 19, "play_index": -1, "defined_in": "roles/delete_resources_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_bastion_hypershift/tasks/main.yaml#task:[19]", "role": "delete_resources_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete MCE Namespace", "when": "hypershift.mce.delete == true"}, "module_options": {"api_version": "v1", "kind": "Namespace", "name": "{{ hypershift.asc.mce_namespace }}", "state": "absent"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete MCE Namespace\n  k8s:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hypershift.asc.mce_namespace }}\"\n    state: absent\n  when: hypershift.mce.delete == true", "line_num_in_file": [128, 135], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["api_server", "user_name", "password", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.ocp_release", "hypershift.mce.instance_name", "hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["nodes", "agent_machines", "machines", "agents_info", "agents"], "vars_used_in_target_task": ["hypershift.asc.mce_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[0]", "name": "Destroy Agent VMs", "module": "command", "index": 0, "play_index": -1, "defined_in": "roles/delete_resources_kvm_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[0]", "role": "delete_resources_kvm_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Destroy Agent VMs", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": "virsh destroy {{ hypershift.hcp.hosted_cluster_name }}-agent-{{ item }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Destroy Agent VMs\n  command: virsh destroy {{ hypershift.hcp.hosted_cluster_name }}-agent-{{ item }}\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [2, 5], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[1]", "name": "Undefine Agents", "module": "command", "index": 1, "play_index": -1, "defined_in": "roles/delete_resources_kvm_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[1]", "role": "delete_resources_kvm_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Undefine Agents", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": "virsh undefine {{ hypershift.hcp.hosted_cluster_name }}-agent-{{ item }} --remove-all-storage", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Undefine Agents\n  command: virsh undefine {{ hypershift.hcp.hosted_cluster_name }}-agent-{{ item }} --remove-all-storage\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [6, 9], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[2]", "name": "Delete  initrd.img", "module": "file", "index": 2, "play_index": -1, "defined_in": "roles/delete_resources_kvm_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[2]", "role": "delete_resources_kvm_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete  initrd.img"}, "module_options": {"path": "/var/lib/libvirt/images/pxeboot/initrd.img", "state": "absent"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete  initrd.img\n  file:\n    path: /var/lib/libvirt/images/pxeboot/initrd.img\n    state: absent\n", "line_num_in_file": [10, 14], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[3]", "name": "Delete  kernel.img", "module": "file", "index": 3, "play_index": -1, "defined_in": "roles/delete_resources_kvm_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[3]", "role": "delete_resources_kvm_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete  kernel.img"}, "module_options": {"path": "/var/lib/libvirt/images/pxeboot/kernel.img", "state": "absent"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete  kernel.img\n  file:\n    path: /var/lib/libvirt/images/pxeboot/kernel.img\n    state: absent\n", "line_num_in_file": [15, 19], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[4]", "name": "Destroy bastion", "module": "command", "index": 4, "play_index": -1, "defined_in": "roles/delete_resources_kvm_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[4]", "role": "delete_resources_kvm_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Destroy bastion"}, "module_options": "virsh destroy {{ hypershift.hcp.hosted_cluster_name }}-bastion", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Destroy bastion\n  command: virsh destroy {{ hypershift.hcp.hosted_cluster_name }}-bastion\n", "line_num_in_file": [20, 22], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:delete_resources_kvm_host_hypershift#taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[5]", "name": "Undefine bastion", "module": "command", "index": 5, "play_index": -1, "defined_in": "roles/delete_resources_kvm_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/delete_resources_kvm_host_hypershift/tasks/main.yaml#task:[5]", "role": "delete_resources_kvm_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Undefine bastion"}, "module_options": "virsh undefine {{ hypershift.hcp.hosted_cluster_name }}-bastion --remove-all-storage", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Undefine bastion\n  command: virsh undefine {{ hypershift.hcp.hosted_cluster_name }}-bastion --remove-all-storage", "line_num_in_file": [23, 25], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/initial-resolv.yaml#task:[0]", "name": "Template out bastion's resolv.conf file for initial installation.", "module": "ansible.builtin.template", "index": 0, "play_index": -1, "defined_in": "roles/dns/tasks/initial-resolv.yaml", "local_key": "task taskfile:roles/dns/tasks/initial-resolv.yaml#task:[0]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Template out bastion's resolv.conf file for initial installation.", "tags": "resolv"}, "module_options": {"src": "initial-resolv.conf.j2", "dest": "/etc/resolv.conf", "owner": "root", "group": "root", "mode": "644"}, "executable": "ansible.builtin.template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Template out bastion's resolv.conf file for initial installation.\n  tags: resolv\n  ansible.builtin.template:\n    src: initial-resolv.conf.j2\n    dest: /etc/resolv.conf\n    owner: root\n    group: root\n    mode: \"644\"\n\n# NetworkManager modifies our /etc/resolv.conf file on next restart or reboot, we need to disable it", "line_num_in_file": [2, 11], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/initial-resolv.yaml#task:[1]", "name": "Disable management of /etc/resolv.conf by NetworkManager", "module": "ansible.builtin.copy", "index": 1, "play_index": -1, "defined_in": "roles/dns/tasks/initial-resolv.yaml", "local_key": "task taskfile:roles/dns/tasks/initial-resolv.yaml#task:[1]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Disable management of /etc/resolv.conf by NetworkManager", "tags": "resolv"}, "module_options": {"src": "90-dns-none.conf", "dest": "/etc//NetworkManager/conf.d/90-dns-none.conf", "group": "root", "owner": "root", "mode": "644"}, "executable": "ansible.builtin.copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Disable management of /etc/resolv.conf by NetworkManager\n  tags: resolv\n  ansible.builtin.copy:\n    src: 90-dns-none.conf\n    dest: /etc//NetworkManager/conf.d/90-dns-none.conf\n    group: root\n    owner: root\n    mode: \"644\"\n", "line_num_in_file": [12, 20], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.copy", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.copy", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "content", "decrypt", "dest", "directory_mode", "follow", "force", "group", "local_follow", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "dest", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/initial-resolv.yaml#task:[2]", "name": "Restart network to update changes made to /etc/resolv.conf", "module": "ansible.builtin.service", "index": 2, "play_index": -1, "defined_in": "roles/dns/tasks/initial-resolv.yaml", "local_key": "task taskfile:roles/dns/tasks/initial-resolv.yaml#task:[2]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Restart network to update changes made to /etc/resolv.conf", "tags": "resolv"}, "module_options": {"name": "network", "state": "restarted"}, "executable": "ansible.builtin.service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Restart network to update changes made to /etc/resolv.conf\n  tags: resolv\n  ansible.builtin.service:\n    name: network\n    state: restarted", "line_num_in_file": [21, 26], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[0]", "name": "Enable named", "module": "ansible.builtin.systemd", "index": 0, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[0]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Enable named", "tags": "dns"}, "module_options": {"name": "named", "enabled": true}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Enable named\n  tags: dns\n  ansible.builtin.systemd:\n    name: named\n    enabled: true\n", "line_num_in_file": [2, 7], "resolved_name": "ansible.builtin.systemd", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "systemd", "fqcn": "ansible.builtin.systemd", "key": "module collection:ansible.builtin#module:ansible.builtin.systemd"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.systemd", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.systemd", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["daemon_reexec", "daemon-reexec", "daemon_reload", "daemon-reload", "enabled", "force", "masked", "name", "service", "unit", "no_block", "scope", "state"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[1]", "name": "Start named", "module": "ansible.builtin.systemd", "index": 1, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[1]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Start named", "tags": "dns"}, "module_options": {"name": "named", "state": "started"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Start named\n  tags: dns\n  ansible.builtin.systemd:\n    name: named\n    state: started\n", "line_num_in_file": [8, 13], "resolved_name": "ansible.builtin.systemd", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "systemd", "fqcn": "ansible.builtin.systemd", "key": "module collection:ansible.builtin#module:ansible.builtin.systemd"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.systemd", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.systemd", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["daemon_reexec", "daemon-reexec", "daemon_reload", "daemon-reload", "enabled", "force", "masked", "name", "service", "unit", "no_block", "scope", "state"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[2]", "name": "Split IP addresses for use in templates", "module": "ansible.builtin.set_fact", "index": 2, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[2]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"bastion_split_ip": "{{ env.bastion.networking.ip.split('.') }}", "bootstrap_split_ip": "{{ env.cluster.nodes.bootstrap.ip.split('.') }}"}, "loop": {}, "options": {"name": "Split IP addresses for use in templates", "tags": "dns"}, "module_options": {"bastion_split_ip": "{{ env.bastion.networking.ip.split('.') }}", "bootstrap_split_ip": "{{ env.cluster.nodes.bootstrap.ip.split('.') }}"}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Split IP addresses for use in templates\n  tags: dns\n  ansible.builtin.set_fact:\n    bastion_split_ip: \"{{ env.bastion.networking.ip.split('.') }}\"\n    bootstrap_split_ip: \"{{ env.cluster.nodes.bootstrap.ip.split('.') }}\"\n", "line_num_in_file": [14, 19], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[3]", "name": "Template named.conf file to bastion", "module": "ansible.builtin.template", "index": 3, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[3]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Template named.conf file to bastion", "tags": "dns"}, "module_options": {"src": "dns-named.conf.j2", "dest": "/etc/named.conf", "owner": "root", "group": "root", "mode": "0644", "backup": true}, "executable": "ansible.builtin.template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Template named.conf file to bastion\n  tags: dns\n  ansible.builtin.template:\n    src: dns-named.conf.j2\n    dest: /etc/named.conf\n    owner: root\n    group: root\n    mode: \"0644\"\n    backup: true\n", "line_num_in_file": [20, 29], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[4]", "name": "Template DNS forwarding file to bastion", "module": "ansible.builtin.template", "index": 4, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[4]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Template DNS forwarding file to bastion", "tags": "dns"}, "module_options": {"src": "dns.db.j2", "dest": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "owner": "named", "group": "named", "mode": "0644", "backup": true}, "executable": "ansible.builtin.template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Template DNS forwarding file to bastion\n  tags: dns\n  ansible.builtin.template:\n    src: dns.db.j2\n    dest: /var/named/{{ env.cluster.networking.metadata_name }}.db\n    owner: named\n    group: named\n    mode: \"0644\"\n    backup: true\n", "line_num_in_file": [30, 39], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "undefined_variables": ["env.cluster.networking.metadata_name"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.db"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": ["env.cluster.networking.metadata_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[5]", "name": "Add control nodes to DNS forwarding file on bastion", "module": "ansible.builtin.lineinfile", "index": 5, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[5]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1"}, "options": {"name": "Add control nodes to DNS forwarding file on bastion", "tags": "dns", "with_sequence": "start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "insertafter": "entries for the control nodes", "line": "{{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.control.ip[i] }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add control nodes to DNS forwarding file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n    insertafter: entries for the control nodes\n    line: \"{{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.control.ip[i]\n      }}\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [40, 51], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "line", "value": "{{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.control.ip[i] }}", "undefined_variables": ["env.cluster.networking.metadata_name", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.db"}, {"key": "line", "expected_type": "str", "unknown_type_value": "{{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.control.ip[i] }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.networking.metadata_name", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[6]", "name": "Add compute nodes to DNS forwarding file on bastion", "module": "ansible.builtin.lineinfile", "index": 6, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[6]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1"}, "options": {"name": "Add compute nodes to DNS forwarding file on bastion", "tags": "dns", "with_sequence": "start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "insertafter": "entries for the compute nodes", "line": "{{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.compute.ip[i] }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add compute nodes to DNS forwarding file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n    insertafter: entries for the compute nodes\n    line: \"{{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.compute.ip[i]\n      }}\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [52, 63], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "line", "value": "{{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.compute.ip[i] }}", "undefined_variables": ["env.cluster.networking.metadata_name", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.compute.ip[i]"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.db"}, {"key": "line", "expected_type": "str", "unknown_type_value": "{{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.compute.ip[i] }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name", "item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": ["item", "(env.cluster.nodes.compute.hostname", "env.cluster.networking.metadata_name", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.compute.ip[i]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[7]", "name": "Add infrastructure nodes to DNS forwarding file on bastion if requested", "module": "ansible.builtin.lineinfile", "index": 7, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[7]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{ (env.cluster.nodes.infra.hostname | length) - 1 }} stride=1"}, "options": {"name": "Add infrastructure nodes to DNS forwarding file on bastion if requested", "tags": "dns", "with_sequence": "start=0 end={{ (env.cluster.nodes.infra.hostname | length) - 1 }} stride=1", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.cluster.nodes.infra.hostname is defined"}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "insertafter": "entries for extra RHEL VMs", "line": "{{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.infra.ip[i] }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add infrastructure nodes to DNS forwarding file on bastion if requested\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n    insertafter: entries for extra RHEL VMs\n    line: \"{{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.infra.ip[i]\n      }}\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.infra.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n", "line_num_in_file": [64, 76], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "line", "value": "{{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.infra.ip[i] }}", "undefined_variables": ["env.cluster.networking.metadata_name", "env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.infra.ip[i]"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.db"}, {"key": "line", "expected_type": "str", "unknown_type_value": "{{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ env.cluster.nodes.infra.ip[i] }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name", "item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.nodes.compute.ip[i]"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": ["item", "(env.cluster.nodes.infra.hostname", "env.cluster.networking.metadata_name", "env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.infra.ip[i]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[8]", "name": "Template DNS reverse lookup file to bastion", "module": "ansible.builtin.template", "index": 8, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[8]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Template DNS reverse lookup file to bastion", "tags": "dns"}, "module_options": {"src": "dns.rev.j2", "dest": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "owner": "named", "group": "named", "mode": "0644", "backup": true}, "executable": "ansible.builtin.template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Template DNS reverse lookup file to bastion\n  tags: dns\n  ansible.builtin.template:\n    src: dns.rev.j2\n    dest: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n    owner: named\n    group: named\n    mode: \"0644\"\n    backup: true\n", "line_num_in_file": [77, 86], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "undefined_variables": ["env.cluster.networking.metadata_name"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name", "item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.nodes.compute.ip[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.nodes.infra.ip[i]"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": ["env.cluster.networking.metadata_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[9]", "name": "Add control nodes to DNS reverse lookup file on bastion", "module": "ansible.builtin.lineinfile", "index": 9, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[9]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1"}, "options": {"name": "Add control nodes to DNS reverse lookup file on bastion", "tags": "dns", "with_sequence": "start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "insertafter": "PTR Record IP address to Hostname", "line": "{{ env.cluster.nodes.control.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}."}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add control nodes to DNS reverse lookup file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n    insertafter: PTR Record IP address to Hostname\n    line: \"{{ env.cluster.nodes.control.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name\n      }}.{{ env.cluster.networking.base_domain }}.\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.control.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [87, 98], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "line", "value": "{{ env.cluster.nodes.control.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}.", "undefined_variables": ["env.cluster.networking.metadata_name", "env.cluster.nodes.control.ip[i].split('.').3", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev"}, {"key": "line", "expected_type": "str", "unknown_type_value": "{{ env.cluster.nodes.control.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}."}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name", "item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.nodes.compute.ip[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.nodes.infra.ip[i]"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.networking.metadata_name", "env.cluster.nodes.control.ip[i].split('.').3", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[10]", "name": "Add compute nodes to DNS reverse lookup file on bastion", "module": "ansible.builtin.lineinfile", "index": 10, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[10]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1"}, "options": {"name": "Add compute nodes to DNS reverse lookup file on bastion", "tags": "dns", "with_sequence": "start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "insertafter": "PTR Record IP address to Hostname", "line": "{{ env.cluster.nodes.compute.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}."}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add compute nodes to DNS reverse lookup file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n    insertafter: PTR Record IP address to Hostname\n    line: \"{{ env.cluster.nodes.compute.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name\n      }}.{{ env.cluster.networking.base_domain }}.\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.compute.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [99, 110], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "line", "value": "{{ env.cluster.nodes.compute.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}.", "undefined_variables": ["env.cluster.networking.metadata_name", "env.cluster.nodes.compute.ip[i].split('.').3", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev"}, {"key": "line", "expected_type": "str", "unknown_type_value": "{{ env.cluster.nodes.compute.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}."}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name", "item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.nodes.compute.ip[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.nodes.infra.ip[i]", "env.cluster.nodes.control.ip[i].split('.').3"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": ["item", "(env.cluster.nodes.compute.hostname", "env.cluster.networking.metadata_name", "env.cluster.nodes.compute.ip[i].split('.').3", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[11]", "name": "Add infrastructure nodes to DNS reverse lookup file on bastion", "module": "ansible.builtin.lineinfile", "index": 11, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[11]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{ (env.cluster.nodes.infra.hostname | length) - 1 }} stride=1"}, "options": {"name": "Add infrastructure nodes to DNS reverse lookup file on bastion", "tags": "dns", "with_sequence": "start=0 end={{ (env.cluster.nodes.infra.hostname | length) - 1 }} stride=1", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.cluster.nodes.infra.hostname is defined"}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "insertafter": "PTR Record IP address to Hostname", "line": "{{ env.cluster.nodes.infra.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}."}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add infrastructure nodes to DNS reverse lookup file on bastion\n  tags: dns\n  ansible.builtin.lineinfile:\n    path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n    insertafter: PTR Record IP address to Hostname\n    line: \"{{ env.cluster.nodes.infra.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name\n      }}.{{ env.cluster.networking.base_domain }}.\"\n  with_sequence: start=0 end={{ (env.cluster.nodes.infra.hostname | length) - 1 }} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n", "line_num_in_file": [111, 123], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "line", "value": "{{ env.cluster.nodes.infra.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}.", "undefined_variables": ["env.cluster.networking.metadata_name", "env.cluster.nodes.infra.ip[i].split('.').3", "env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev"}, {"key": "line", "expected_type": "str", "unknown_type_value": "{{ env.cluster.nodes.infra.ip[i].split('.').3 }}     IN      PTR     {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}."}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name", "item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.nodes.compute.ip[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.nodes.infra.ip[i]", "env.cluster.nodes.control.ip[i].split('.').3", "env.cluster.nodes.compute.ip[i].split('.').3"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": ["item", "(env.cluster.nodes.infra.hostname", "env.cluster.networking.metadata_name", "env.cluster.nodes.infra.ip[i].split('.').3", "env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[12]", "name": "Restart named to update changes made to DNS", "module": "ansible.builtin.systemd", "index": 12, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[12]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Restart named to update changes made to DNS", "tags": "dns, resolv"}, "module_options": {"name": "named", "state": "restarted"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Restart named to update changes made to DNS\n  tags: dns, resolv\n  ansible.builtin.systemd:\n    name: named\n    state: restarted\n", "line_num_in_file": [124, 129], "resolved_name": "ansible.builtin.systemd", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "systemd", "fqcn": "ansible.builtin.systemd", "key": "module collection:ansible.builtin#module:ansible.builtin.systemd"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.systemd", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.systemd", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["daemon_reexec", "daemon-reexec", "daemon_reload", "daemon-reload", "enabled", "force", "masked", "name", "service", "unit", "no_block", "scope", "state"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name", "item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.nodes.compute.ip[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.nodes.infra.ip[i]", "env.cluster.nodes.control.ip[i].split('.').3", "env.cluster.nodes.compute.ip[i].split('.').3", "env.cluster.nodes.infra.ip[i].split('.').3"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[13]", "name": "Template out bastion's resolv.conf file, replacing initial resolv.conf", "module": "ansible.builtin.template", "index": 13, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[13]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Template out bastion's resolv.conf file, replacing initial resolv.conf", "tags": "dns, resolv"}, "module_options": {"src": "resolv.conf.j2", "dest": "/etc/resolv.conf", "owner": "root", "group": "root", "mode": "644"}, "executable": "ansible.builtin.template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Template out bastion's resolv.conf file, replacing initial resolv.conf\n  tags: dns, resolv\n  ansible.builtin.template:\n    src: resolv.conf.j2\n    dest: /etc/resolv.conf\n    owner: root\n    group: root\n    mode: \"644\"\n", "line_num_in_file": [130, 138], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name", "item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.nodes.compute.ip[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.nodes.infra.ip[i]", "env.cluster.nodes.control.ip[i].split('.').3", "env.cluster.nodes.compute.ip[i].split('.').3", "env.cluster.nodes.infra.ip[i].split('.').3"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns#taskfile:roles/dns/tasks/main.yaml#task:[14]", "name": "Restart network to update changes made to /etc/resolv.conf", "module": "ansible.builtin.service", "index": 14, "play_index": -1, "defined_in": "roles/dns/tasks/main.yaml", "local_key": "task taskfile:roles/dns/tasks/main.yaml#task:[14]", "role": "dns", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Restart network to update changes made to /etc/resolv.conf", "tags": "dns, resolv"}, "module_options": {"name": "network", "state": "restarted"}, "executable": "ansible.builtin.service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Restart network to update changes made to /etc/resolv.conf\n  tags: dns, resolv\n  ansible.builtin.service:\n    name: network\n    state: restarted", "line_num_in_file": [139, 144], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bastion.networking.ip.split('.')", "env.cluster.nodes.bootstrap.ip.split('.')", "env.cluster.networking.metadata_name", "item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.base_domain", "env.cluster.nodes.control.ip[i]", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.nodes.compute.ip[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.nodes.infra.ip[i]", "env.cluster.nodes.control.ip[i].split('.').3", "env.cluster.nodes.compute.ip[i].split('.').3", "env.cluster.nodes.infra.ip[i].split('.').3"], "vars_defined_in_previous_tasks": ["bastion_split_ip", "bootstrap_split_ip"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns_update#taskfile:roles/dns_update/tasks/add.yaml#task:[0]", "name": "Add forward DNS", "module": "ansible.builtin.lineinfile", "index": 0, "play_index": -1, "defined_in": "roles/dns_update/tasks/add.yaml", "local_key": "task taskfile:roles/dns_update/tasks/add.yaml#task:[0]", "role": "dns_update", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add forward DNS"}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "insertafter": ";entries for the compute nodes", "line": "{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ param_dns_ip }}", "state": "present"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Add forward DNS\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n        insertafter: ;entries for the compute nodes\n        line: \"{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ param_dns_ip }}\"\n        state: present\n", "line_num_in_file": [5, 11], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "line", "value": "{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ param_dns_ip }}", "undefined_variables": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain", "param_dns_ip"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.db"}, {"key": "line", "expected_type": "str", "unknown_type_value": "{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}. IN A {{ param_dns_ip }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain", "param_dns_ip"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns_update#taskfile:roles/dns_update/tasks/add.yaml#task:[1]", "name": "Add reverse DNS", "module": "ansible.builtin.lineinfile", "index": 1, "play_index": -1, "defined_in": "roles/dns_update/tasks/add.yaml", "local_key": "task taskfile:roles/dns_update/tasks/add.yaml#task:[1]", "role": "dns_update", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add reverse DNS"}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "insertafter": "PTR Record IP address to Hostname", "line": "{{ param_dns_ip.split('.').3 }}     IN      PTR     {{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}.", "state": "present"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Add reverse DNS\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n        insertafter: PTR Record IP address to Hostname\n        line: \"{{ param_dns_ip.split('.').3 }}     IN      PTR     {{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n          }}.\"\n        state: present", "line_num_in_file": [12, 19], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "line", "value": "{{ param_dns_ip.split('.').3 }}     IN      PTR     {{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}.", "undefined_variables": ["env.cluster.networking.metadata_name", "param_dns_ip.split('.').3", "param_dns_hostname", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev"}, {"key": "line", "expected_type": "str", "unknown_type_value": "{{ param_dns_ip.split('.').3 }}     IN      PTR     {{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}."}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain", "param_dns_ip"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "param_dns_ip.split('.').3", "param_dns_hostname", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml#task:[0]", "name": "Delete forward DNS using hostname", "module": "ansible.builtin.lineinfile", "index": 0, "play_index": -1, "defined_in": "roles/dns_update/tasks/delete.yaml", "local_key": "task taskfile:roles/dns_update/tasks/delete.yaml#task:[0]", "role": "dns_update", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete forward DNS using hostname"}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "state": "absent", "regexp": "^{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Delete forward DNS using hostname\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n        state: absent\n        regexp: ^{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n", "line_num_in_file": [5, 10], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "regexp", "value": "^{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}", "undefined_variables": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.db"}, {"key": "regexp", "expected_type": "str", "unknown_type_value": "^{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml#task:[1]", "name": "Delete forward DNS using ip", "module": "ansible.builtin.lineinfile", "index": 1, "play_index": -1, "defined_in": "roles/dns_update/tasks/delete.yaml", "local_key": "task taskfile:roles/dns_update/tasks/delete.yaml#task:[1]", "role": "dns_update", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete forward DNS using ip"}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "state": "absent", "regex": "A {{ param_dns_ip }}"}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Delete forward DNS using ip\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.db\n        state: absent\n        regex: A {{ param_dns_ip }}\n", "line_num_in_file": [11, 16], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [{"used_alias": "regex", "real_key": "regexp"}], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.db", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "regex", "value": "A {{ param_dns_ip }}", "undefined_variables": ["param_dns_ip"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.db"}, {"key": "regex", "expected_type": "str", "unknown_type_value": "A {{ param_dns_ip }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "param_dns_ip"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml#task:[2]", "name": "Delete reverse DNS using hostname", "module": "ansible.builtin.lineinfile", "index": 2, "play_index": -1, "defined_in": "roles/dns_update/tasks/delete.yaml", "local_key": "task taskfile:roles/dns_update/tasks/delete.yaml#task:[2]", "role": "dns_update", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete reverse DNS using hostname"}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "state": "absent", "regexp": "{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}."}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Delete reverse DNS using hostname\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n        state: absent\n        regexp: \"{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}.\"\n", "line_num_in_file": [17, 22], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "regexp", "value": "{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}.", "undefined_variables": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev"}, {"key": "regexp", "expected_type": "str", "unknown_type_value": "{{ param_dns_hostname }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}."}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain", "param_dns_ip"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns_update#taskfile:roles/dns_update/tasks/delete.yaml#task:[3]", "name": "Delete reverse DNS using IP", "module": "ansible.builtin.lineinfile", "index": 3, "play_index": -1, "defined_in": "roles/dns_update/tasks/delete.yaml", "local_key": "task taskfile:roles/dns_update/tasks/delete.yaml#task:[3]", "role": "dns_update", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete reverse DNS using IP"}, "module_options": {"path": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "state": "absent", "regexp": "^{{ param_dns_ip.split('.').3 }} "}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Delete reverse DNS using IP\n      ansible.builtin.lineinfile:\n        path: /var/named/{{ env.cluster.networking.metadata_name }}.rev\n        state: absent\n        regexp: \"^{{ param_dns_ip.split('.').3 }} \"", "line_num_in_file": [23, 28], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "regexp", "value": "^{{ param_dns_ip.split('.').3 }} ", "undefined_variables": ["param_dns_ip.split('.').3"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/var/named/{{ env.cluster.networking.metadata_name }}.rev"}, {"key": "regexp", "expected_type": "str", "unknown_type_value": "^{{ param_dns_ip.split('.').3 }} "}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.networking.metadata_name", "param_dns_hostname", "env.cluster.networking.base_domain", "param_dns_ip"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "param_dns_ip.split('.').3"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns_update#taskfile:roles/dns_update/tasks/main.yaml#task:[0]", "name": "Load DNS update task", "module": "ansible.builtin.include_tasks", "index": 0, "play_index": -1, "defined_in": "roles/dns_update/tasks/main.yaml", "local_key": "task taskfile:roles/dns_update/tasks/main.yaml#task:[0]", "role": "dns_update", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Load DNS update task"}, "module_options": "{{ param_dns_cmd }}.yaml", "executable": "{{ param_dns_cmd }}.yaml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- name: Load DNS update task\n  ansible.builtin.include_tasks: \"{{ param_dns_cmd }}.yaml\"\n", "line_num_in_file": [2, 4], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["param_dns_cmd", "param_dns_ip", "param_dns_hostname"], "vars_used_in_target_task": ["param_dns_cmd"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:dns_update#taskfile:roles/dns_update/tasks/main.yaml#task:[1]", "name": "Restart 'named' service to update changes", "module": "ansible.builtin.systemd", "index": 1, "play_index": -1, "defined_in": "roles/dns_update/tasks/main.yaml", "local_key": "task taskfile:roles/dns_update/tasks/main.yaml#task:[1]", "role": "dns_update", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Restart 'named' service to update changes", "become": true}, "module_options": {"name": "named", "state": "restarted"}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Restart 'named' service to update changes\n  become: true\n  ansible.builtin.systemd:\n    name: named\n    state: restarted", "line_num_in_file": [5, 10], "resolved_name": "ansible.builtin.systemd", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "systemd", "fqcn": "ansible.builtin.systemd", "key": "module collection:ansible.builtin#module:ansible.builtin.systemd"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.systemd", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.systemd", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["daemon_reexec", "daemon-reexec", "daemon_reload", "daemon-reload", "enabled", "force", "masked", "name", "service", "unit", "no_block", "scope", "state"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["param_dns_cmd"], "vars_defined_in_previous_tasks": ["param_dns_cmd", "param_dns_ip", "param_dns_hostname"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[0]", "name": "install apache httpd", "module": "package", "index": 0, "play_index": -1, "defined_in": "roles/download_rootfs_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[0]", "role": "download_rootfs_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "install apache httpd"}, "module_options": {"name": "httpd", "state": "latest"}, "executable": "package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: install apache httpd\n  package:\n    name: httpd\n    state: latest\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.package", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "package", "fqcn": "ansible.builtin.package", "key": "module collection:ansible.builtin#module:ansible.builtin.package"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.package", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.package", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["name", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}, {"key": "state", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[1]", "name": "bind httpd to port 8080", "module": "lineinfile", "index": 1, "play_index": -1, "defined_in": "roles/download_rootfs_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[1]", "role": "download_rootfs_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "bind httpd to port 8080"}, "module_options": {"dest": "/etc/httpd/conf/httpd.conf", "regexp": "^Listen 80", "line": "Listen 8080"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: bind httpd to port 8080\n  lineinfile:\n    dest: /etc/httpd/conf/httpd.conf\n    regexp: ^Listen 80\n    line: Listen 8080\n", "line_num_in_file": [7, 12], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [{"used_alias": "dest", "real_key": "path"}], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[2]", "name": "allow traffic at 8080 for apache", "module": "firewalld", "index": 2, "play_index": -1, "defined_in": "roles/download_rootfs_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[2]", "role": "download_rootfs_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["internal", "public"]}, "options": {"name": "allow traffic at 8080 for apache", "tags": "firewall", "with_items": ["internal", "public"]}, "module_options": {"port": "8080/tcp", "zone": "{{ item }}", "state": "enabled", "permanent": true}, "executable": "firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: allow traffic at 8080 for apache\n  tags: firewall\n  firewalld:\n    port: 8080/tcp\n    zone: \"{{ item }}\"\n    state: enabled\n    permanent: true\n  with_items:\n    - internal\n    - public\n", "line_num_in_file": [13, 23], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[3]", "name": "Download ipxe script", "module": "shell", "index": 3, "play_index": -1, "defined_in": "roles/download_rootfs_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[3]", "role": "download_rootfs_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ipxe_script": "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "Download ipxe script", "register": "ipxe_script"}, "module_options": "curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }} -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n", "line_num_in_file": [24, 28], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item"], "vars_defined_in_previous_tasks": ["ipxe_script"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[4]", "name": "Get URL for rootfs", "module": "set_fact", "index": 4, "play_index": -1, "defined_in": "roles/download_rootfs_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[4]", "role": "download_rootfs_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"rootfs_url": "{{ ipxe_script.stdout_lines[2].split(' ')[3].split('url=')[1] }}"}, "loop": {}, "options": {"name": "Get URL for rootfs"}, "module_options": {"rootfs_url": "{{ ipxe_script.stdout_lines[2].split(' ')[3].split('url=')[1] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get URL for rootfs\n  set_fact:\n    rootfs_url: \"{{ ipxe_script.stdout_lines[2].split(' ')[3].split('url=')[1] }}\"\n", "line_num_in_file": [29, 32], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["ipxe_script", "rootfs_url"], "vars_used_in_target_task": ["ipxe_script.stdout_lines[2].split('')[3].split('url=')[1]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[5]", "name": "Download rootfs.img", "module": "get_url", "index": 5, "play_index": -1, "defined_in": "roles/download_rootfs_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[5]", "role": "download_rootfs_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Download rootfs.img"}, "module_options": {"url": "{{ rootfs_url }}", "dest": "/var/www/html/rootfs.img", "validate_certs": false}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Download rootfs.img\n  get_url:\n    url: \"{{ rootfs_url }}\"\n    dest: /var/www/html/rootfs.img\n    validate_certs: false\n", "line_num_in_file": [33, 38], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "get_url", "fqcn": "ansible.builtin.get_url", "key": "module collection:ansible.builtin#module:ansible.builtin.get_url"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "{{ ipxe_script.stdout_lines[2].split(' ')[3].split('url=')[1] }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "ipxe_script.stdout_lines[2].split('')[3].split('url=')[1]"], "vars_defined_in_previous_tasks": ["ipxe_script", "rootfs_url"], "vars_used_in_target_task": ["rootfs_url"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[6]", "name": "restart httpd", "module": "service", "index": 6, "play_index": -1, "defined_in": "roles/download_rootfs_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[6]", "role": "download_rootfs_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "restart httpd"}, "module_options": {"name": "httpd.service", "state": "started", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: restart httpd\n  service:\n    name: httpd.service\n    state: started\n    enabled: true\n", "line_num_in_file": [39, 44], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "ipxe_script.stdout_lines[2].split('')[3].split('url=')[1]", "rootfs_url"], "vars_defined_in_previous_tasks": ["ipxe_script", "rootfs_url"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:download_rootfs_hypershift#taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[7]", "name": "Restart firewalld.service", "module": "service", "index": 7, "play_index": -1, "defined_in": "roles/download_rootfs_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/download_rootfs_hypershift/tasks/main.yaml#task:[7]", "role": "download_rootfs_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Restart firewalld.service"}, "module_options": {"name": "firewalld.service", "state": "restarted"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Restart firewalld.service\n  service:\n    name: firewalld.service\n    state: restarted", "line_num_in_file": [45, 49], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "ipxe_script.stdout_lines[2].split('')[3].split('url=')[1]", "rootfs_url"], "vars_defined_in_previous_tasks": ["ipxe_script", "rootfs_url"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[0]", "name": "Delete ignition folder for idempotency", "module": "file", "index": 0, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[0]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete ignition folder for idempotency", "tags": "get_ocp"}, "module_options": {"path": "/var/www/html/ignition", "state": "absent"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete ignition folder for idempotency\n  tags: get_ocp\n  file:\n    path: /var/www/html/ignition\n    state: absent\n", "line_num_in_file": [2, 7], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[1]", "name": "Create directory bin for mirrors", "module": "file", "index": 1, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[1]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create directory bin for mirrors", "tags": "get_ocp", "become": true}, "module_options": {"path": "/var/www/html/bin", "state": "directory", "mode": "0755", "owner": "root", "group": "root"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create directory bin for mirrors\n  tags: get_ocp\n  become: true\n  file:\n    path: /var/www/html/bin\n    state: directory\n    mode: \"0755\"\n    owner: root\n    group: root\n", "line_num_in_file": [8, 17], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[2]", "name": "Delete OCP download directory for idempotency, because ignition files deprecate after 24 hours.", "module": "file", "index": 2, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[2]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete OCP download directory for idempotency, because ignition files deprecate after 24 hours.", "tags": "get_ocp", "become": true}, "module_options": {"path": "/root/ocpinst", "state": "absent"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete OCP download directory for idempotency, because ignition files deprecate after 24 hours.\n  tags: get_ocp\n  become: true\n  file:\n    path: /root/ocpinst\n    state: absent\n", "line_num_in_file": [18, 24], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[3]", "name": "Create OCP download directory", "module": "file", "index": 3, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[3]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create OCP download directory", "tags": "get_ocp"}, "module_options": {"path": "/root/ocpinst", "state": "directory"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create OCP download directory\n  tags: get_ocp\n  file:\n    path: /root/ocpinst\n    state: directory\n", "line_num_in_file": [25, 30], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[4]", "name": "Get Red Hat CoreOS rootfs file if it's not there already.", "module": "get_url", "index": 4, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[4]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Get Red Hat CoreOS rootfs file if it's not there already.", "tags": "get_ocp"}, "module_options": {"url": "{{ rhcos_download_url }}{{ rhcos_live_rootfs }}", "dest": "/var/www/html/bin/{{ rhcos_live_rootfs }}", "mode": "0644"}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get Red Hat CoreOS rootfs file if it's not there already.\n  tags: get_ocp\n  get_url:\n    url: \"{{ rhcos_download_url }}{{ rhcos_live_rootfs }}\"\n    dest: /var/www/html/bin/{{ rhcos_live_rootfs }}\n    mode: \"0644\"\n", "line_num_in_file": [31, 37], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "get_url", "fqcn": "ansible.builtin.get_url", "key": "module collection:ansible.builtin#module:ansible.builtin.get_url"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "url", "value": "{{ rhcos_download_url }}{{ rhcos_live_rootfs }}", "undefined_variables": ["rhcos_download_url", "rhcos_live_rootfs"]}, {"key": "dest", "value": "/var/www/html/bin/{{ rhcos_live_rootfs }}", "undefined_variables": ["rhcos_live_rootfs"]}], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "{{ rhcos_download_url }}{{ rhcos_live_rootfs }}"}, {"key": "dest", "expected_type": "str", "unknown_type_value": "/var/www/html/bin/{{ rhcos_live_rootfs }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["rhcos_download_url", "rhcos_live_rootfs"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[5]", "name": "Unzip OCP client and installer", "module": "ansible.builtin.unarchive", "index": 5, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[5]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["{{ ocp_download_url }}{{ ocp_client_tgz }}", "{{ ocp_download_url }}{{ ocp_install_tgz }}"]}, "options": {"name": "Unzip OCP client and installer", "tags": "get_ocp", "loop": ["{{ ocp_download_url }}{{ ocp_client_tgz }}", "{{ ocp_download_url }}{{ ocp_install_tgz }}"]}, "module_options": {"src": "{{ item }}", "dest": "/root/ocpinst/", "remote_src": true}, "executable": "ansible.builtin.unarchive", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Unzip OCP client and installer\n  tags: get_ocp\n  ansible.builtin.unarchive:\n    src: \"{{ item }}\"\n    dest: /root/ocpinst/\n    remote_src: true\n  loop:\n    - \"{{ ocp_download_url }}{{ ocp_client_tgz }}\"\n    - \"{{ ocp_download_url }}{{ ocp_install_tgz }}\"\n", "line_num_in_file": [38, 47], "resolved_name": "ansible.builtin.unarchive", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "unarchive", "fqcn": "ansible.builtin.unarchive", "key": "module collection:ansible.builtin#module:ansible.builtin.unarchive"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.unarchive", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.unarchive", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "copy", "creates", "decrypt", "dest", "exclude", "extra_opts", "group", "include", "io_buffer_size", "keep_newer", "list_files", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "src", "expected_type": "str", "unknown_type_value": "{{ item }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "ocp_download_url"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[6]", "name": "Copy kubectl, oc, and openshift-install binaries to /usr/local/sbin", "module": "ansible.builtin.copy", "index": 6, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[6]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["kubectl", "oc", "openshift-install"]}, "options": {"name": "Copy kubectl, oc, and openshift-install binaries to /usr/local/sbin", "tags": "get_ocp", "become": true, "loop": ["kubectl", "oc", "openshift-install"]}, "module_options": {"src": "/root/ocpinst/{{ item }}", "dest": "/usr/sbin/{{ item }}", "owner": "root", "group": "root", "mode": "755", "remote_src": true}, "executable": "ansible.builtin.copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Copy kubectl, oc, and openshift-install binaries to /usr/local/sbin\n  tags: get_ocp\n  become: true\n  ansible.builtin.copy:\n    src: /root/ocpinst/{{ item }}\n    dest: /usr/sbin/{{ item }}\n    owner: root\n    group: root\n    mode: \"755\"\n    remote_src: true\n  loop:\n    - kubectl\n    - oc\n    - openshift-install\n", "line_num_in_file": [48, 62], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.copy", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.copy", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "content", "decrypt", "dest", "directory_mode", "follow", "force", "group", "local_follow", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "dest", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[7]", "name": "Use template file to create install-config and backup.", "module": "template", "index": 7, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[7]", "role": "get_ocp", "collection": "", "become": null, "variables": {"use_proxy": "{{ 'True' if (proxy_env.http_proxy is defined or proxy_env.https_proxy is defined or proxy_env.no_proxy is defined) else 'False' }}"}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["/root/ocpinst/install-config.yaml", "/root/ocpinst/install-config-backup.yaml"]}, "options": {"name": "Use template file to create install-config and backup.", "tags": "get_ocp", "vars": {"use_proxy": "{{ 'True' if (proxy_env.http_proxy is defined or proxy_env.https_proxy is defined or proxy_env.no_proxy is defined) else 'False' }}"}, "loop": ["/root/ocpinst/install-config.yaml", "/root/ocpinst/install-config-backup.yaml"]}, "module_options": {"src": "install-config.yaml.j2", "dest": "{{ item }}", "force": true}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Use template file to create install-config and backup.\n  tags: get_ocp\n  vars:\n    use_proxy: \"{{ 'True' if (proxy_env.http_proxy is defined or proxy_env.https_proxy is defined or proxy_env.no_proxy is defined) else 'False' }}\"\n  template:\n    src: install-config.yaml.j2\n    dest: \"{{ item }}\"\n    force: true\n  loop:\n    - /root/ocpinst/install-config.yaml\n    - /root/ocpinst/install-config-backup.yaml\n", "line_num_in_file": [63, 74], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url"], "vars_defined_in_previous_tasks": ["use_proxy"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[8]", "name": "Capture OCP public key", "module": "command", "index": 8, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[8]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ocp_pub_key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[8]"}, "set_facts": {}, "loop": {}, "options": {"name": "Capture OCP public key", "tags": "get_ocp", "register": "ocp_pub_key"}, "module_options": "cat /root/.ssh/id_rsa.pub", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Capture OCP public key\n  tags: get_ocp\n  command: cat /root/.ssh/id_rsa.pub\n  register: ocp_pub_key\n", "line_num_in_file": [75, 79], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[9]", "name": "Place SSH key in install-config", "module": "lineinfile", "index": 9, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[9]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["/root/ocpinst/install-config.yaml", "/root/ocpinst/install-config-backup.yaml"]}, "options": {"name": "Place SSH key in install-config", "tags": "get_ocp", "loop": ["/root/ocpinst/install-config.yaml", "/root/ocpinst/install-config-backup.yaml"]}, "module_options": {"line": "sshKey: '{{ ocp_pub_key.stdout }}'", "path": "{{ item }}"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Place SSH key in install-config\n  tags: get_ocp\n  lineinfile:\n    line: \"sshKey: '{{ ocp_pub_key.stdout }}'\"\n    path: \"{{ item }}\"\n  loop:\n    - /root/ocpinst/install-config.yaml\n    - /root/ocpinst/install-config-backup.yaml\n", "line_num_in_file": [80, 88], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "sshKey: '{{ ocp_pub_key.stdout }}'", "undefined_variables": ["ocp_pub_key.stdout"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "sshKey: '{{ ocp_pub_key.stdout }}'"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": ["item", "ocp_pub_key.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[10]", "name": "Create manifests", "module": "command", "index": 10, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[10]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create manifests", "tags": "get_ocp", "become": true}, "module_options": "/root/ocpinst/openshift-install create manifests --dir=/root/ocpinst/", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create manifests\n  tags: get_ocp\n  command: /root/ocpinst/openshift-install create manifests --dir=/root/ocpinst/\n  become: true\n", "line_num_in_file": [89, 93], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[11]", "name": "Set masters schedulable parameter to false", "module": "replace", "index": 11, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[11]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Set masters schedulable parameter to false", "tags": "get_ocp", "become": true}, "module_options": {"path": "/root/ocpinst/manifests/cluster-scheduler-02-config.yml", "regexp": ": true", "replace": ": false"}, "executable": "replace", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set masters schedulable parameter to false\n  tags: get_ocp\n  become: true\n  replace:\n    path: /root/ocpinst/manifests/cluster-scheduler-02-config.yml\n    regexp: \": true\"\n    replace: \": false\"\n", "line_num_in_file": [94, 101], "resolved_name": "ansible.builtin.replace", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "replace", "fqcn": "ansible.builtin.replace", "key": "module collection:ansible.builtin#module:ansible.builtin.replace"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.replace", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.replace", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["after", "attributes", "attr", "backup", "before", "encoding", "group", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "replace", "selevel", "serole", "setype", "seuser", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}, {"key": "regexp", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[12]", "name": "Set permissions for ocpinst directory contents to root", "module": "command", "index": 12, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[12]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["manifests", "openshift", ".openshift_install.log", ".openshift_install_state.json"]}, "options": {"name": "Set permissions for ocpinst directory contents to root", "tags": "get_ocp", "become": true, "loop": ["manifests", "openshift", ".openshift_install.log", ".openshift_install_state.json"]}, "module_options": "chmod 0755 /root/ocpinst/{{item}}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set permissions for ocpinst directory contents to root\n  tags: get_ocp\n  become: true\n  command: chmod 0755 /root/ocpinst/{{item}}\n  loop:\n    - manifests\n    - openshift\n    - .openshift_install.log\n    - .openshift_install_state.json\n", "line_num_in_file": [102, 111], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[13]", "name": "Set ownership of ocpinst directory contents to root", "module": "command", "index": 13, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[13]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["manifests", "openshift", ".openshift_install.log", ".openshift_install_state.json"]}, "options": {"name": "Set ownership of ocpinst directory contents to root", "tags": "get_ocp", "become": true, "loop": ["manifests", "openshift", ".openshift_install.log", ".openshift_install_state.json"]}, "module_options": "chown root:root /root/ocpinst/{{item}}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set ownership of ocpinst directory contents to root\n  tags: get_ocp\n  become: true\n  command: chown root:root /root/ocpinst/{{item}}\n  loop:\n    - manifests\n    - openshift\n    - .openshift_install.log\n    - .openshift_install_state.json\n", "line_num_in_file": [112, 121], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[14]", "name": "Create ignition files", "module": "command", "index": 14, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[14]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create ignition files", "tags": "get_ocp", "become": true}, "module_options": "/root/ocpinst/openshift-install create ignition-configs  --dir=/root/ocpinst/", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create ignition files\n  tags: get_ocp\n  become: true\n  command: /root/ocpinst/openshift-install create ignition-configs  --dir=/root/ocpinst/\n", "line_num_in_file": [122, 126], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[15]", "name": "Set ownership to root and permissions of ignitions and related files.", "module": "file", "index": 15, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[15]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": [{"state": "file", "path": "bootstrap.ign", "mode": "755"}, {"state": "file", "path": "master.ign", "mode": "755"}, {"state": "file", "path": "worker.ign", "mode": "755"}, {"state": "directory", "path": "auth", "mode": "755"}, {"state": "file", "path": "metadata.json", "mode": "755"}, {"state": "file", "path": "auth/kubeconfig", "mode": "644"}, {"state": "file", "path": "auth/kubeadmin-password", "mode": "644"}]}, "options": {"name": "Set ownership to root and permissions of ignitions and related files.", "tags": "get_ocp", "loop": [{"state": "file", "path": "bootstrap.ign", "mode": "755"}, {"state": "file", "path": "master.ign", "mode": "755"}, {"state": "file", "path": "worker.ign", "mode": "755"}, {"state": "directory", "path": "auth", "mode": "755"}, {"state": "file", "path": "metadata.json", "mode": "755"}, {"state": "file", "path": "auth/kubeconfig", "mode": "644"}, {"state": "file", "path": "auth/kubeadmin-password", "mode": "644"}]}, "module_options": {"state": "{{ item.state }}", "path": "/root/ocpinst/{{ item.path }}", "owner": "root", "group": "root", "mode": "{{ item.mode }}"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set ownership to root and permissions of ignitions and related files.\n  tags: get_ocp\n  file:\n    state: \"{{ item.state }}\"\n    path: /root/ocpinst/{{ item.path }}\n    owner: root\n    group: root\n    mode: \"{{ item.mode }}\"\n  loop:\n    - { state: file, path: bootstrap.ign, mode: \"755\" }\n    - { state: file, path: master.ign, mode: \"755\" }\n    - { state: file, path: worker.ign, mode: \"755\" }\n    - { state: directory, path: auth, mode: \"755\" }\n    - { state: file, path: metadata.json, mode: \"755\" }\n    - { state: file, path: auth/kubeconfig, mode: \"644\" }\n    - { state: file, path: auth/kubeadmin-password, mode: \"644\" }\n", "line_num_in_file": [127, 143], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[16]", "name": "Create directory in admin user's home for default kubeconfig.", "module": "file", "index": 16, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[16]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create directory in admin user's home for default kubeconfig.", "tags": "get_ocp, config", "become": false}, "module_options": {"state": "directory", "path": "~/.kube"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create directory in admin user's home for default kubeconfig.\n  tags: get_ocp, config\n  become: false\n  file:\n    state: directory\n    path: ~/.kube\n", "line_num_in_file": [144, 150], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[17]", "name": "Create directory in root's home for default kubeconfig.", "module": "file", "index": 17, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[17]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create directory in root's home for default kubeconfig.", "tags": "get_ocp, config", "become": true}, "module_options": {"state": "directory", "path": "~/.kube"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create directory in root's home for default kubeconfig.\n  tags: get_ocp, config\n  become: true\n  file:\n    state: directory\n    path: ~/.kube\n", "line_num_in_file": [151, 157], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[18]", "name": "Make kubeconfig admin user's default (for non-root user).", "module": "copy", "index": 18, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[18]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Make kubeconfig admin user's default (for non-root user).", "tags": "get_ocp, config", "when": "env.bastion.access.user != \"root\""}, "module_options": {"src": "/root/ocpinst/auth/kubeconfig", "dest": "/home/{{ env.bastion.access.user }}/.kube/config", "owner": "{{ env.bastion.access.user }}", "group": "{{ env.bastion.access.user }}", "remote_src": true}, "executable": "copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Make kubeconfig admin user's default (for non-root user).\n  tags: get_ocp, config\n  copy:\n    src: /root/ocpinst/auth/kubeconfig\n    dest: /home/{{ env.bastion.access.user }}/.kube/config\n    owner: \"{{ env.bastion.access.user }}\"\n    group: \"{{ env.bastion.access.user }}\"\n    remote_src: true\n  when: env.bastion.access.user != \"root\"\n", "line_num_in_file": [158, 167], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.copy", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.copy", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "content", "decrypt", "dest", "directory_mode", "follow", "force", "group", "local_follow", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "dest", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "/home/{{ env.bastion.access.user }}/.kube/config", "undefined_variables": ["env.bastion.access.user"]}, {"key": "owner", "value": "{{ env.bastion.access.user }}", "undefined_variables": ["env.bastion.access.user"]}, {"key": "group", "value": "{{ env.bastion.access.user }}", "undefined_variables": ["env.bastion.access.user"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "/home/{{ env.bastion.access.user }}/.kube/config"}, {"key": "owner", "expected_type": "str", "unknown_type_value": "{{ env.bastion.access.user }}"}, {"key": "group", "expected_type": "str", "unknown_type_value": "{{ env.bastion.access.user }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": ["env.bastion.access.user"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[19]", "name": "Make kubeconfig admin user's default (for root user).", "module": "copy", "index": 19, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[19]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Make kubeconfig admin user's default (for root user).", "tags": "get_ocp, config", "when": "env.bastion.access.user == \"root\""}, "module_options": {"src": "/root/ocpinst/auth/kubeconfig", "dest": "/{{ env.bastion.access.user }}/.kube/config", "owner": "{{ env.bastion.access.user }}", "group": "{{ env.bastion.access.user }}", "remote_src": true}, "executable": "copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Make kubeconfig admin user's default (for root user).\n  tags: get_ocp, config\n  copy:\n    src: /root/ocpinst/auth/kubeconfig\n    dest: /{{ env.bastion.access.user }}/.kube/config\n    owner: \"{{ env.bastion.access.user }}\"\n    group: \"{{ env.bastion.access.user }}\"\n    remote_src: true\n  when: env.bastion.access.user == \"root\"\n", "line_num_in_file": [168, 177], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.copy", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.copy", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "content", "decrypt", "dest", "directory_mode", "follow", "force", "group", "local_follow", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "dest", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "/{{ env.bastion.access.user }}/.kube/config", "undefined_variables": ["env.bastion.access.user"]}, {"key": "owner", "value": "{{ env.bastion.access.user }}", "undefined_variables": ["env.bastion.access.user"]}, {"key": "group", "value": "{{ env.bastion.access.user }}", "undefined_variables": ["env.bastion.access.user"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "/{{ env.bastion.access.user }}/.kube/config"}, {"key": "owner", "expected_type": "str", "unknown_type_value": "{{ env.bastion.access.user }}"}, {"key": "group", "expected_type": "str", "unknown_type_value": "{{ env.bastion.access.user }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout", "env.bastion.access.user"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": ["env.bastion.access.user"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[20]", "name": "Make kubeconfig root user's default.", "module": "copy", "index": 20, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[20]", "role": "get_ocp", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Make kubeconfig root user's default.", "tags": "get_ocp, config"}, "module_options": {"src": "/root/ocpinst/auth/kubeconfig", "dest": "/root/.kube/config", "owner": "root", "group": "root", "remote_src": true}, "executable": "copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Make kubeconfig root user's default.\n  tags: get_ocp, config\n  copy:\n    src: /root/ocpinst/auth/kubeconfig\n    dest: /root/.kube/config\n    owner: root\n    group: root\n    remote_src: true\n", "line_num_in_file": [178, 186], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.copy", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.copy", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "content", "decrypt", "dest", "directory_mode", "follow", "force", "group", "local_follow", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "dest", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout", "env.bastion.access.user"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[21]", "name": "Create ignition directory in HTTP-accessible directory.", "module": "file", "index": 21, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[21]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create ignition directory in HTTP-accessible directory.", "tags": "get_ocp", "become": true}, "module_options": {"path": "/var/www/html/ignition", "state": "directory"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create ignition directory in HTTP-accessible directory.\n  tags: get_ocp\n  become: true\n  file:\n    path: /var/www/html/ignition\n    state: directory\n", "line_num_in_file": [187, 193], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout", "env.bastion.access.user"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:get_ocp#taskfile:roles/get_ocp/tasks/main.yaml#task:[22]", "name": "Copy ignition files to HTTP-accessible directory.", "module": "copy", "index": 22, "play_index": -1, "defined_in": "roles/get_ocp/tasks/main.yaml", "local_key": "task taskfile:roles/get_ocp/tasks/main.yaml#task:[22]", "role": "get_ocp", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["bootstrap", "master", "worker"]}, "options": {"name": "Copy ignition files to HTTP-accessible directory.", "tags": "get_ocp", "become": true, "loop": ["bootstrap", "master", "worker"]}, "module_options": {"src": "/root/ocpinst/{{ item }}.ign", "dest": "/var/www/html/ignition", "remote_src": true, "mode": "775", "group": "root", "owner": "root"}, "executable": "copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Copy ignition files to HTTP-accessible directory.\n  tags: get_ocp\n  become: true\n  copy:\n    src: /root/ocpinst/{{ item }}.ign\n    dest: /var/www/html/ignition\n    remote_src: true\n    mode: \"775\"\n    group: root\n    owner: root\n  loop:\n    - bootstrap\n    - master\n    - worker", "line_num_in_file": [194, 208], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.copy", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.copy", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "content", "decrypt", "dest", "directory_mode", "follow", "force", "group", "local_follow", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "dest", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["rhcos_download_url", "rhcos_live_rootfs", "item", "ocp_download_url", "ocp_pub_key.stdout", "env.bastion.access.user"], "vars_defined_in_previous_tasks": ["use_proxy", "ocp_pub_key"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[0]", "name": "Change permissive domain for haproxy", "module": "selinux_permissive", "index": 0, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[0]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Change permissive domain for haproxy", "tags": "selinux,haproxy"}, "module_options": {"name": "haproxy_t", "permissive": true}, "executable": "selinux_permissive", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Change permissive domain for haproxy\n  tags: selinux,haproxy\n  selinux_permissive:\n    name: haproxy_t\n    permissive: true\n", "line_num_in_file": [2, 7], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "selinux_permissive", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[1]", "name": "Use template to create haproxy config file", "module": "template", "index": 1, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[1]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Use template to create haproxy config file", "tags": "haproxy"}, "module_options": {"src": "haproxy.cfg.j2", "dest": "/etc/haproxy/haproxy.cfg", "backup": true, "force": true}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Use template to create haproxy config file\n  tags: haproxy\n  template:\n    src: haproxy.cfg.j2\n    dest: /etc/haproxy/haproxy.cfg\n    backup: true\n    force: true\n", "line_num_in_file": [8, 15], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[2]", "name": "Add control node information to 6443 section in haproxy config", "module": "lineinfile", "index": 2, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[2]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1"}, "options": {"name": "Add control node information to 6443 section in haproxy config", "tags": "haproxy", "with_sequence": "start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": {"line": "  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:6443 check inter 1s", "path": "/etc/haproxy/haproxy.cfg", "insertafter": "6443 section"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add control node information to 6443 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:6443 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n    insertafter: 6443 section\n  with_sequence: start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [16, 27], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:6443 check inter 1s", "undefined_variables": ["env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:6443 check inter 1s"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[3]", "name": "Add control node information to 22623 section in haproxy config", "module": "lineinfile", "index": 3, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[3]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1"}, "options": {"name": "Add control node information to 22623 section in haproxy config", "tags": "haproxy", "with_sequence": "start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": {"line": "  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:22623 check inter 1s", "path": "/etc/haproxy/haproxy.cfg", "insertafter": "22623 section"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add control node information to 22623 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:22623 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n    insertafter: 22623 section\n  with_sequence: start=0 end={{(env.cluster.nodes.control.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [28, 39], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:22623 check inter 1s", "undefined_variables": ["env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "  server {{ env.cluster.nodes.control.hostname[i] }} {{ env.cluster.nodes.control.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:22623 check inter 1s"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[4]", "name": "Add compute node information to 443 section in haproxy config", "module": "lineinfile", "index": 4, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[4]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1"}, "options": {"name": "Add compute node information to 443 section in haproxy config", "tags": "haproxy", "with_sequence": "start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": {"line": "  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:443 check inter 1s", "path": "/etc/haproxy/haproxy.cfg", "insertafter": "443 section"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add compute node information to 443 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:443 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n    insertafter: 443 section\n  with_sequence: start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [40, 51], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:443 check inter 1s", "undefined_variables": ["env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:443 check inter 1s"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[5]", "name": "Add infrastructure node information to 443 section in haproxy config", "module": "lineinfile", "index": 5, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[5]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1"}, "options": {"name": "Add infrastructure node information to 443 section in haproxy config", "tags": "haproxy", "with_sequence": "start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.cluster.nodes.infra.hostname is defined"}, "module_options": {"line": "  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:443 check inter 1s", "path": "/etc/haproxy/haproxy.cfg", "insertafter": "443 section"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add infrastructure node information to 443 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:443 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n    insertafter: 443 section\n  with_sequence: start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n", "line_num_in_file": [52, 64], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:443 check inter 1s", "undefined_variables": ["env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:443 check inter 1s"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[6]", "name": "Add compute node information to 80 section in haproxy config", "module": "lineinfile", "index": 6, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[6]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1"}, "options": {"name": "Add compute node information to 80 section in haproxy config", "tags": "haproxy", "with_sequence": "start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": {"line": "  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:80 check inter 1s", "path": "/etc/haproxy/haproxy.cfg"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add compute node information to 80 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:80 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n  with_sequence: start=0 end={{(env.cluster.nodes.compute.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [65, 75], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:80 check inter 1s", "undefined_variables": ["env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "  server {{ env.cluster.nodes.compute.hostname[i] }} {{ env.cluster.nodes.compute.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:80 check inter 1s"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[7]", "name": "Add infrastructure node information to 80 section in haproxy config", "module": "lineinfile", "index": 7, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[7]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1"}, "options": {"name": "Add infrastructure node information to 80 section in haproxy config", "tags": "haproxy", "with_sequence": "start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}, "when": "env.cluster.nodes.infra.hostname is defined"}, "module_options": {"line": "  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:80 check inter 1s", "path": "/etc/haproxy/haproxy.cfg"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add infrastructure node information to 80 section in haproxy config\n  tags: haproxy\n  lineinfile:\n    line: \"  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain\n      }}:80 check inter 1s\"\n    path: /etc/haproxy/haproxy.cfg\n  with_sequence: start=0 end={{(env.cluster.nodes.infra.hostname | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n  when: env.cluster.nodes.infra.hostname is defined\n", "line_num_in_file": [76, 87], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:80 check inter 1s", "undefined_variables": ["env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "  server {{ env.cluster.nodes.infra.hostname[i] }} {{ env.cluster.nodes.infra.hostname[i] }}.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}:80 check inter 1s"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[8]", "name": "Set haproxy boolean to enable connections", "module": "command", "index": 8, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[8]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Set haproxy boolean to enable connections", "tags": "haproxy"}, "module_options": "setsebool -P haproxy_connect_any 1", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set haproxy boolean to enable connections\n  tags: haproxy\n  command: setsebool -P haproxy_connect_any 1\n", "line_num_in_file": [88, 91], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[9]", "name": "Enable haproxy", "module": "ansible.builtin.systemd", "index": 9, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[9]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Enable haproxy", "tags": "haproxy"}, "module_options": {"name": "haproxy", "enabled": true}, "executable": "ansible.builtin.systemd", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Enable haproxy\n  tags: haproxy\n  ansible.builtin.systemd:\n    name: haproxy\n    enabled: true\n", "line_num_in_file": [92, 97], "resolved_name": "ansible.builtin.systemd", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "systemd", "fqcn": "ansible.builtin.systemd", "key": "module collection:ansible.builtin#module:ansible.builtin.systemd"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.systemd", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.systemd", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["daemon_reexec", "daemon-reexec", "daemon_reload", "daemon-reload", "enabled", "force", "masked", "name", "service", "unit", "no_block", "scope", "state"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:haproxy#taskfile:roles/haproxy/tasks/main.yaml#task:[10]", "name": "Restart haproxy", "module": "systemd", "index": 10, "play_index": -1, "defined_in": "roles/haproxy/tasks/main.yaml", "local_key": "task taskfile:roles/haproxy/tasks/main.yaml#task:[10]", "role": "haproxy", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Restart haproxy", "tags": "haproxy"}, "module_options": {"state": "restarted", "name": "haproxy"}, "executable": "systemd", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Restart haproxy\n  tags: haproxy\n  systemd:\n    state: restarted\n    name: haproxy", "line_num_in_file": [98, 103], "resolved_name": "ansible.builtin.systemd", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "systemd", "fqcn": "ansible.builtin.systemd", "key": "module collection:ansible.builtin#module:ansible.builtin.systemd"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.systemd", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.systemd", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["daemon_reexec", "daemon-reexec", "daemon_reload", "daemon-reload", "enabled", "force", "masked", "name", "service", "unit", "no_block", "scope", "state"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "(env.cluster.nodes.control.hostname", "env.cluster.nodes.control.hostname[i]", "env.cluster.networking.metadata_name", "env.cluster.networking.base_domain", "(env.cluster.nodes.compute.hostname", "env.cluster.nodes.compute.hostname[i]", "(env.cluster.nodes.infra.hostname", "env.cluster.nodes.infra.hostname[i]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:httpd#taskfile:roles/httpd/tasks/main.yaml#task:[0]", "name": "Change permissive domain for httpd", "module": "selinux_permissive", "index": 0, "play_index": -1, "defined_in": "roles/httpd/tasks/main.yaml", "local_key": "task taskfile:roles/httpd/tasks/main.yaml#task:[0]", "role": "httpd", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Change permissive domain for httpd", "tags": "httpd"}, "module_options": {"name": "httpd_t", "permissive": true}, "executable": "selinux_permissive", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Change permissive domain for httpd\n  tags: httpd\n  selinux_permissive:\n    name: httpd_t\n    permissive: true\n", "line_num_in_file": [2, 7], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "selinux_permissive", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:httpd#taskfile:roles/httpd/tasks/main.yaml#task:[1]", "name": "Allow httpd to listen on tcp port 4443", "module": "community.general.seport", "index": 1, "play_index": -1, "defined_in": "roles/httpd/tasks/main.yaml", "local_key": "task taskfile:roles/httpd/tasks/main.yaml#task:[1]", "role": "httpd", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Allow httpd to listen on tcp port 4443", "tags": "httpd"}, "module_options": {"ports": 4443, "proto": "tcp", "setype": "http_port_t", "state": "present", "reload": true}, "executable": "community.general.seport", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Allow httpd to listen on tcp port 4443\n  tags: httpd\n  community.general.seport:\n    ports: 4443\n    proto: tcp\n    setype: http_port_t\n    state: present\n    reload: true\n", "line_num_in_file": [8, 16], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.general.seport", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:httpd#taskfile:roles/httpd/tasks/main.yaml#task:[2]", "name": "enable httpd", "module": "systemd", "index": 2, "play_index": -1, "defined_in": "roles/httpd/tasks/main.yaml", "local_key": "task taskfile:roles/httpd/tasks/main.yaml#task:[2]", "role": "httpd", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "enable httpd", "tags": "httpd"}, "module_options": {"name": "httpd", "enabled": true}, "executable": "systemd", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: enable httpd\n  tags: httpd\n  systemd:\n    name: httpd\n    enabled: true\n", "line_num_in_file": [17, 22], "resolved_name": "ansible.builtin.systemd", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "systemd", "fqcn": "ansible.builtin.systemd", "key": "module collection:ansible.builtin#module:ansible.builtin.systemd"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.systemd", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.systemd", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["daemon_reexec", "daemon-reexec", "daemon_reload", "daemon-reload", "enabled", "force", "masked", "name", "service", "unit", "no_block", "scope", "state"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:httpd#taskfile:roles/httpd/tasks/main.yaml#task:[3]", "name": "restart httpd", "module": "service", "index": 3, "play_index": -1, "defined_in": "roles/httpd/tasks/main.yaml", "local_key": "task taskfile:roles/httpd/tasks/main.yaml#task:[3]", "role": "httpd", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "restart httpd", "tags": "httpd"}, "module_options": {"name": "httpd", "state": "restarted"}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: restart httpd\n  tags: httpd\n  service:\n    name: httpd\n    state: restarted", "line_num_in_file": [23, 28], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[0]", "name": "Check if multicluster-engine Namespace exists", "module": "k8s_info", "index": 0, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[0]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"namespace_check": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check if multicluster-engine Namespace exists", "register": "namespace_check", "ignore_errors": true}, "module_options": {"api_version": "v1", "kind": "Namespace", "name": "{{ hypershift.asc.mce_namespace }}"}, "executable": "k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check if multicluster-engine Namespace exists\n  k8s_info:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hypershift.asc.mce_namespace }}\"\n  register: namespace_check\n  ignore_errors: true\n", "line_num_in_file": [2, 9], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["namespace_check"], "vars_used_in_target_task": ["hypershift.asc.mce_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[1]", "name": "Create multicluster-engine  Namespace", "module": "k8s", "index": 1, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[1]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create multicluster-engine  Namespace", "when": "namespace_check.resources | length == 0"}, "module_options": {"api_version": "v1", "kind": "Namespace", "name": "{{ hypershift.asc.mce_namespace }}", "state": "present"}, "executable": "k8s", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create multicluster-engine  Namespace\n  k8s:\n    api_version: v1\n    kind: Namespace\n    name: \"{{ hypershift.asc.mce_namespace }}\"\n    state: present\n  when: namespace_check.resources | length == 0\n", "line_num_in_file": [10, 17], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check"], "vars_used_in_target_task": ["hypershift.asc.mce_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[2]", "name": "Create OperatorGroup.yaml", "module": "template", "index": 2, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[2]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create OperatorGroup.yaml"}, "module_options": {"src": "OperatorGroup.yaml.j2", "dest": "/root/ansible_workdir/OperatorGroup.yaml"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create OperatorGroup.yaml\n  template:\n    src: OperatorGroup.yaml.j2\n    dest: /root/ansible_workdir/OperatorGroup.yaml\n", "line_num_in_file": [18, 22], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[3]", "name": "Deploy OperatorGroup", "module": "command", "index": 3, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[3]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Deploy OperatorGroup"}, "module_options": "oc apply -f /root/ansible_workdir/OperatorGroup.yaml", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Deploy OperatorGroup\n  command: oc apply -f /root/ansible_workdir/OperatorGroup.yaml\n", "line_num_in_file": [23, 25], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[4]", "name": "Create Subscription.yaml", "module": "template", "index": 4, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[4]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create Subscription.yaml"}, "module_options": {"src": "Subscription.yaml.j2", "dest": "/root/ansible_workdir/Subscription.yaml"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create Subscription.yaml\n  template:\n    src: Subscription.yaml.j2\n    dest: /root/ansible_workdir/Subscription.yaml\n", "line_num_in_file": [26, 30], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[5]", "name": "Deploy Subscription for MCE", "module": "command", "index": 5, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[5]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Deploy Subscription for MCE"}, "module_options": "oc apply -f /root/ansible_workdir/Subscription.yaml", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Deploy Subscription for MCE\n  command: oc apply -f /root/ansible_workdir/Subscription.yaml\n", "line_num_in_file": [31, 33], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[6]", "name": "Wait for MCE deployment to be created", "module": "shell", "index": 6, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[6]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"mce_deploy": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[6]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for MCE deployment to be created", "register": "mce_deploy", "until": "mce_deploy.stdout == '1'", "retries": 20, "delay": 5}, "module_options": "oc get all -n {{ hypershift.asc.mce_namespace }} | grep -i  deployment | grep -i multicluster-engine | wc -l", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for MCE deployment to be created\n  shell: oc get all -n {{ hypershift.asc.mce_namespace }} | grep -i  deployment | grep -i multicluster-engine | wc -l\n  register: mce_deploy\n  until: mce_deploy.stdout == '1'\n  retries: 20\n  delay: 5\n", "line_num_in_file": [34, 40], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy"], "vars_used_in_target_task": ["hypershift.asc.mce_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[7]", "name": "Wait for MCE deployment to be available", "module": "shell", "index": 7, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[7]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"mce_pod_status": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[7]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for MCE deployment to be available", "register": "mce_pod_status", "until": "mce_pod_status.stdout.split(' ')[0] == mce_pod_status.stdout.split(' ')[1]", "retries": 20, "delay": 5}, "module_options": "oc get deployment multicluster-engine-operator -n {{ hypershift.asc.mce_namespace }} -o=jsonpath='{.status.replicas}{\" \"}{.status.availableReplicas}'", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for MCE deployment to be available\n  shell: oc get deployment multicluster-engine-operator -n {{ hypershift.asc.mce_namespace }} -o=jsonpath='{.status.replicas}{\" \"}{.status.availableReplicas}'\n  register: mce_pod_status\n  until: mce_pod_status.stdout.split(' ')[0] == mce_pod_status.stdout.split(' ')[1]\n  retries: 20\n  delay: 5\n", "line_num_in_file": [41, 47], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy", "mce_pod_status"], "vars_used_in_target_task": ["hypershift.asc.mce_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[8]", "name": "Create MultiClusterEngine.yaml", "module": "template", "index": 8, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[8]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create MultiClusterEngine.yaml"}, "module_options": {"src": "MultiClusterEngine.yaml.j2", "dest": "/root/ansible_workdir/MultiClusterEngine.yaml"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create MultiClusterEngine.yaml\n  template:\n    src: MultiClusterEngine.yaml.j2\n    dest: /root/ansible_workdir/MultiClusterEngine.yaml\n", "line_num_in_file": [48, 52], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy", "mce_pod_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[9]", "name": "Deploy MCE Instance", "module": "command", "index": 9, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[9]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Deploy MCE Instance"}, "module_options": "oc apply -f /root/ansible_workdir/MultiClusterEngine.yaml", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Deploy MCE Instance\n  command: oc apply -f /root/ansible_workdir/MultiClusterEngine.yaml\n", "line_num_in_file": [53, 55], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy", "mce_pod_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[10]", "name": "Wait for MCE to be Available", "module": "shell", "index": 10, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[10]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"mce_status": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[10]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for MCE to be Available", "register": "mce_status", "until": "mce_status.stdout == \"Available\"", "retries": 40, "delay": 10}, "module_options": "oc get mce --no-headers | awk  '{print $2}'", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for MCE to be Available\n  shell: oc get mce --no-headers | awk  '{print $2}'\n  register: mce_status\n  until: mce_status.stdout == \"Available\"\n  retries: 40\n  delay: 10\n", "line_num_in_file": [56, 62], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy", "mce_pod_status", "mce_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[11]", "name": "Enable hypershift-preview component in MCE", "module": "command", "index": 11, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[11]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Enable hypershift-preview component in MCE"}, "module_options": "oc patch mce {{ hypershift.mce.instance_name }} -p '{\"spec\":{\"overrides\":{\"components\":[{\"name\":\"hypershift-preview\",\"enabled\":true}]}}}' --type merge", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Enable hypershift-preview component in MCE\n  command: oc patch mce {{ hypershift.mce.instance_name }} -p '{\"spec\":{\"overrides\":{\"components\":[{\"name\":\"hypershift-preview\",\"enabled\":true}]}}}' --type merge\n", "line_num_in_file": [63, 65], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy", "mce_pod_status", "mce_status"], "vars_used_in_target_task": ["hypershift.mce.instance_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[12]", "name": "Create ClusterImageSet.yaml", "module": "template", "index": 12, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[12]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create ClusterImageSet.yaml"}, "module_options": {"src": "ClusterImageSet.yaml.j2", "dest": "/root/ansible_workdir/ClusterImageSet.yaml"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create ClusterImageSet.yaml\n  template:\n    src: ClusterImageSet.yaml.j2\n    dest: /root/ansible_workdir/ClusterImageSet.yaml\n", "line_num_in_file": [66, 70], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace", "hypershift.mce.instance_name"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy", "mce_pod_status", "mce_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[13]", "name": "Deploy ClusterImageSet", "module": "command", "index": 13, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[13]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Deploy ClusterImageSet"}, "module_options": "oc apply -f /root/ansible_workdir/ClusterImageSet.yaml", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Deploy ClusterImageSet\n  command: oc apply -f /root/ansible_workdir/ClusterImageSet.yaml\n", "line_num_in_file": [71, 73], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace", "hypershift.mce.instance_name"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy", "mce_pod_status", "mce_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[14]", "name": "Create Provisioning.yaml", "module": "template", "index": 14, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[14]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create Provisioning.yaml"}, "module_options": {"src": "Provisioning.yaml.j2", "dest": "/root/ansible_workdir/Provisioning.yaml"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create Provisioning.yaml\n  template:\n    src: Provisioning.yaml.j2\n    dest: /root/ansible_workdir/Provisioning.yaml\n", "line_num_in_file": [74, 78], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace", "hypershift.mce.instance_name"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy", "mce_pod_status", "mce_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_mce_operator#taskfile:roles/install_mce_operator/tasks/main.yaml#task:[15]", "name": "Deploy Provisioning", "module": "command", "index": 15, "play_index": -1, "defined_in": "roles/install_mce_operator/tasks/main.yaml", "local_key": "task taskfile:roles/install_mce_operator/tasks/main.yaml#task:[15]", "role": "install_mce_operator", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Deploy Provisioning"}, "module_options": "oc apply -f /root/ansible_workdir/Provisioning.yaml", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Deploy Provisioning\n  command: oc apply -f /root/ansible_workdir/Provisioning.yaml", "line_num_in_file": [79, 81], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.asc.mce_namespace", "hypershift.mce.instance_name"], "vars_defined_in_previous_tasks": ["namespace_check", "mce_deploy", "mce_pod_status", "mce_status"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_packages#taskfile:roles/install_packages/tasks/main.yaml#task:[0]", "name": "Print the list of packages to be installed and updated.", "module": "debug", "index": 0, "play_index": -1, "defined_in": "roles/install_packages/tasks/main.yaml", "local_key": "task taskfile:roles/install_packages/tasks/main.yaml#task:[0]", "role": "install_packages", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print the list of packages to be installed and updated.", "tags": "install_packages"}, "module_options": {"var": "packages"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print the list of packages to be installed and updated.\n  tags: install_packages\n  debug:\n    var: packages\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_packages#taskfile:roles/install_packages/tasks/main.yaml#task:[1]", "name": "Installing required packages for Linux machines.", "module": "ansible.builtin.package", "index": 1, "play_index": -1, "defined_in": "roles/install_packages/tasks/main.yaml", "local_key": "task taskfile:roles/install_packages/tasks/main.yaml#task:[1]", "role": "install_packages", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ packages }}"}, "options": {"name": "Installing required packages for Linux machines.", "tags": "install_packages", "become": true, "loop": "{{ packages }}", "when": "ansible_os_family != 'Darwin'"}, "module_options": {"name": "{{ item }}", "state": "latest", "update_cache": true}, "executable": "ansible.builtin.package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Installing required packages for Linux machines.\n  tags: install_packages\n  become: true\n  ansible.builtin.package:\n    name: \"{{ item }}\"\n    state: latest\n    update_cache: true\n  loop: \"{{ packages }}\"\n  when: ansible_os_family != 'Darwin'\n", "line_num_in_file": [7, 16], "resolved_name": "ansible.builtin.package", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "package", "fqcn": "ansible.builtin.package", "key": "module collection:ansible.builtin#module:ansible.builtin.package"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.package", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.package", "not_exist": false, "wrong_arg_keys": ["update_cache"], "available_arg_keys": ["name", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}, {"key": "state", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "packages"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_packages#taskfile:roles/install_packages/tasks/main.yaml#task:[2]", "name": "Installing required packages for Mac machines.", "module": "community.general.homebrew", "index": 2, "play_index": -1, "defined_in": "roles/install_packages/tasks/main.yaml", "local_key": "task taskfile:roles/install_packages/tasks/main.yaml#task:[2]", "role": "install_packages", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": false, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ packages }}"}, "options": {"name": "Installing required packages for Mac machines.", "tags": "install_packages", "become": false, "loop": "{{ packages }}", "when": "ansible_os_family == 'Darwin'"}, "module_options": {"name": "{{ item }}", "state": "latest"}, "executable": "community.general.homebrew", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Installing required packages for Mac machines.\n  tags: install_packages\n  become: false\n  community.general.homebrew:\n    name: \"{{ item }}\"\n    state: latest\n  loop: \"{{ packages }}\"\n  when: ansible_os_family == 'Darwin'", "line_num_in_file": [17, 25], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.general.homebrew", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item", "packages"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item", "packages"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[0]", "name": "Install ansible-kubernetes module", "module": "pip", "index": 0, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[0]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Install ansible-kubernetes module"}, "module_options": {"name": ["kubernetes", "openshift"], "extra_args": "--ignore-installed PyYAML"}, "executable": "pip", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Install ansible-kubernetes module\n  pip:\n    name:\n      - kubernetes\n      - openshift\n    extra_args: --ignore-installed PyYAML\n", "line_num_in_file": [2, 8], "resolved_name": "ansible.builtin.pip", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "pip", "fqcn": "ansible.builtin.pip", "key": "module collection:ansible.builtin#module:ansible.builtin.pip"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.pip", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.pip", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "editable", "executable", "extra_args", "name", "requirements", "state", "umask", "version", "virtualenv", "virtualenv_command", "virtualenv_python", "virtualenv_site_packages"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[1]", "name": "Install Packages on bastion", "module": "package", "index": 1, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[1]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Install Packages on bastion"}, "module_options": {"name": "{{ env.pkgs.bastion }}", "state": "present"}, "executable": "package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Install Packages on bastion\n  package:\n    name: \"{{ env.pkgs.bastion }}\"\n    state: present\n\n# Creating one directory for Storing Files", "line_num_in_file": [9, 14], "resolved_name": "ansible.builtin.package", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "package", "fqcn": "ansible.builtin.package", "key": "module collection:ansible.builtin#module:ansible.builtin.package"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.package", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.package", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["name", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}, {"key": "state", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "name", "value": "{{ env.pkgs.bastion }}", "undefined_variables": ["env.pkgs.bastion"]}], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.pkgs.bastion"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[2]", "name": "Create Work Directory", "module": "file", "index": 2, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[2]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create Work Directory"}, "module_options": {"path": "/root/ansible_workdir", "state": "directory"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create Work Directory\n  file:\n    path: /root/ansible_workdir\n    state: directory\n", "line_num_in_file": [15, 19], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[3]", "name": "Copy pull secret to ansible_workdir", "module": "copy", "index": 3, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[3]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Copy pull secret to ansible_workdir"}, "module_options": {"content": "{{ hypershift.hcp.pull_secret }}", "dest": "/root/ansible_workdir/auth_file"}, "executable": "copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Copy pull secret to ansible_workdir\n  copy:\n    content: \"{{ hypershift.hcp.pull_secret }}\"\n    dest: /root/ansible_workdir/auth_file\n", "line_num_in_file": [20, 24], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.copy", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.copy", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "content", "decrypt", "dest", "directory_mode", "follow", "force", "group", "local_follow", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "dest", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "content", "value": "{{ hypershift.hcp.pull_secret }}", "undefined_variables": ["hypershift.hcp.pull_secret"]}], "unknown_type_values": [{"key": "content", "expected_type": "str", "unknown_type_value": "{{ hypershift.hcp.pull_secret }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["hypershift.hcp.pull_secret"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[4]", "name": "create /etc/haproxy", "module": "file", "index": 4, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[4]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "create /etc/haproxy"}, "module_options": {"path": "/etc/haproxy", "state": "directory"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: create /etc/haproxy\n  file:\n    path: /etc/haproxy\n    state: directory\n", "line_num_in_file": [25, 29], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[5]", "name": "create /etc/haproxy/haproxy.cfg", "module": "template", "index": 5, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[5]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "create /etc/haproxy/haproxy.cfg"}, "module_options": {"src": "haproxy.cfg.j2", "dest": "/etc/haproxy/haproxy.cfg"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: create /etc/haproxy/haproxy.cfg\n  template:\n    src: haproxy.cfg.j2\n    dest: /etc/haproxy/haproxy.cfg\n", "line_num_in_file": [30, 34], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[6]", "name": "Get the number of Management Cluster Worker Nodes", "module": "shell", "index": 6, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[6]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"mgmt_workers_count": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[6]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get the number of Management Cluster Worker Nodes", "register": "mgmt_workers_count", "changed_when": false}, "module_options": "oc get no -o wide --no-headers|grep -i worker| awk '{print $6}' | wc -l", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get the number of Management Cluster Worker Nodes\n  shell: oc get no -o wide --no-headers|grep -i worker| awk '{print $6}' | wc -l\n  register: mgmt_workers_count\n  changed_when: false\n", "line_num_in_file": [35, 39], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret"], "vars_defined_in_previous_tasks": ["mgmt_workers_count"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[7]", "name": "Get the IPs of Management Cluster Workers", "module": "shell", "index": 7, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[7]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"mgmt_workers": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[7]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get the IPs of Management Cluster Workers", "register": "mgmt_workers", "changed_when": false}, "module_options": "oc get no -o wide --no-headers|grep -i worker| awk '{print $6}'", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get the IPs of Management Cluster Workers\n  shell: oc get no -o wide --no-headers|grep -i worker| awk '{print $6}'\n  register: mgmt_workers\n  changed_when: false\n", "line_num_in_file": [40, 44], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[8]", "name": "Add Management Cluster Worker IPs to Haproxy", "module": "lineinfile", "index": 8, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[8]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(mgmt_workers_count.stdout|int) | list }}"}, "options": {"name": "Add Management Cluster Worker IPs to Haproxy", "loop": "{{ range(mgmt_workers_count.stdout|int) | list }}"}, "module_options": {"path": "/etc/haproxy/haproxy.cfg", "line": "    server worker-{{item}} {{ mgmt_workers.stdout_lines[item]}}"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add Management Cluster Worker IPs to Haproxy\n  lineinfile:\n    path: /etc/haproxy/haproxy.cfg\n    line: \"    server worker-{{item}} {{ mgmt_workers.stdout_lines[item]}}\"\n  loop: \"{{ range(mgmt_workers_count.stdout|int) | list }}\"\n", "line_num_in_file": [45, 50], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "    server worker-{{item}} {{ mgmt_workers.stdout_lines[item]}}", "undefined_variables": ["mgmt_workers.stdout_lines[item]"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "    server worker-{{item}} {{ mgmt_workers.stdout_lines[item]}}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": ["item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[9]", "name": "allow http traffic", "module": "firewalld", "index": 9, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[9]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["internal", "public"]}, "options": {"name": "allow http traffic", "with_items": ["internal", "public"]}, "module_options": {"service": "http", "permanent": true, "zone": "{{ item }}", "state": "enabled"}, "executable": "firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: allow http traffic\n  firewalld:\n    service: http\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n", "line_num_in_file": [51, 60], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret", "item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[10]", "name": "allow https traffic", "module": "firewalld", "index": 10, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[10]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["internal", "public"]}, "options": {"name": "allow https traffic", "with_items": ["internal", "public"]}, "module_options": {"service": "https", "permanent": true, "zone": "{{ item }}", "state": "enabled"}, "executable": "firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: allow https traffic\n  firewalld:\n    service: https\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n", "line_num_in_file": [61, 70], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret", "item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[11]", "name": "allow traffic at port 443", "module": "firewalld", "index": 11, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[11]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["internal", "public"]}, "options": {"name": "allow traffic at port 443", "with_items": ["internal", "public"]}, "module_options": {"port": "443/tcp", "permanent": true, "zone": "{{ item }}", "state": "enabled"}, "executable": "firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: allow traffic at port 443\n  firewalld:\n    port: 443/tcp\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n", "line_num_in_file": [71, 80], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret", "item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[12]", "name": "allow traffic at port 80", "module": "firewalld", "index": 12, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[12]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["internal", "public"]}, "options": {"name": "allow traffic at port 80", "with_items": ["internal", "public"]}, "module_options": {"port": "80/tcp", "permanent": true, "zone": "{{ item }}", "state": "enabled"}, "executable": "firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: allow traffic at port 80\n  firewalld:\n    port: 80/tcp\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n", "line_num_in_file": [81, 90], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret", "item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[13]", "name": "allow traffic at port 6443", "module": "firewalld", "index": 13, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[13]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["internal", "public"]}, "options": {"name": "allow traffic at port 6443", "with_items": ["internal", "public"]}, "module_options": {"port": "6443/tcp", "permanent": true, "zone": "{{ item }}", "state": "enabled"}, "executable": "firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: allow traffic at port 6443\n  firewalld:\n    port: 6443/tcp\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n", "line_num_in_file": [91, 100], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret", "item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[14]", "name": "allow traffic at ports 30000-33000", "module": "firewalld", "index": 14, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[14]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["internal", "public"]}, "options": {"name": "allow traffic at ports 30000-33000", "with_items": ["internal", "public"]}, "module_options": {"port": "30000-33000/tcp", "permanent": true, "zone": "{{ item }}", "state": "enabled"}, "executable": "firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: allow traffic at ports 30000-33000\n  firewalld:\n    port: 30000-33000/tcp\n    permanent: true\n    zone: \"{{ item }}\"\n    state: enabled\n  with_items:\n    - internal\n    - public\n", "line_num_in_file": [101, 110], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret", "item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[15]", "name": "turn on haproxy_connect_any", "module": "ansible.posix.seboolean", "index": 15, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[15]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "turn on haproxy_connect_any"}, "module_options": {"name": "haproxy_connect_any", "persistent": true, "state": true}, "executable": "ansible.posix.seboolean", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: turn on haproxy_connect_any\n  ansible.posix.seboolean:\n    name: haproxy_connect_any\n    persistent: true\n    state: true\n", "line_num_in_file": [111, 116], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ansible.posix.seboolean", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret", "item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[16]", "name": "restart haproxy", "module": "service", "index": 16, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[16]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "restart haproxy"}, "module_options": {"name": "haproxy.service", "state": "restarted", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: restart haproxy\n  service:\n    name: haproxy.service\n    state: restarted\n    enabled: true\n", "line_num_in_file": [117, 122], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret", "item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prereqs_bastion_hypershift#taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[17]", "name": "Restart firewalld.service", "module": "service", "index": 17, "play_index": -1, "defined_in": "roles/install_prereqs_bastion_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prereqs_bastion_hypershift/tasks/main.yaml#task:[17]", "role": "install_prereqs_bastion_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Restart firewalld.service"}, "module_options": {"name": "firewalld.service", "state": "restarted", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Restart firewalld.service\n  service:\n    name: firewalld.service\n    state: restarted\n    enabled: true", "line_num_in_file": [123, 128], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.pkgs.bastion", "hypershift.hcp.pull_secret", "item", "range(mgmt_workers_count.stdout", "mgmt_workers.stdout_lines[item]"], "vars_defined_in_previous_tasks": ["mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[0]", "name": "Check if SSH key exists", "module": "stat", "index": 0, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[0]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check if SSH key exists", "register": "ssh_key"}, "module_options": {"path": "~/.ssh/{{ env.ansible_key_name }}.pub"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check if SSH key exists\n  stat:\n    path: ~/.ssh/{{ env.ansible_key_name }}.pub\n  register: ssh_key\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "stat", "fqcn": "ansible.builtin.stat", "key": "module collection:ansible.builtin#module:ansible.builtin.stat"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "~/.ssh/{{ env.ansible_key_name }}.pub", "undefined_variables": ["env.ansible_key_name"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "~/.ssh/{{ env.ansible_key_name }}.pub"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ssh_key"], "vars_used_in_target_task": ["env.ansible_key_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[1]", "name": "Generate an OpenSSH keypair with the default values (4096 bits, RSA)", "module": "community.crypto.openssh_keypair", "index": 1, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[1]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_key_creation": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Generate an OpenSSH keypair with the default values (4096 bits, RSA)", "register": "ssh_key_creation", "when": "ssh_key.stat.exists == false"}, "module_options": {"path": "~/.ssh/{{ env.ansible_key_name }}", "passphrase": "", "comment": "Ansible-OpenShift-Provisioning SSH key", "regenerate": "full_idempotence"}, "executable": "community.crypto.openssh_keypair", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Generate an OpenSSH keypair with the default values (4096 bits, RSA)\n  community.crypto.openssh_keypair:\n    path: ~/.ssh/{{ env.ansible_key_name }}\n    passphrase: \"\"\n    comment: Ansible-OpenShift-Provisioning SSH key\n    regenerate: full_idempotence\n  register: ssh_key_creation\n  when: ssh_key.stat.exists == false\n", "line_num_in_file": [7, 15], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.crypto.openssh_keypair", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation"], "vars_used_in_target_task": ["env.ansible_key_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[2]", "name": "Create Work Directory", "module": "file", "index": 2, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[2]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create Work Directory"}, "module_options": {"path": "/root/ansible_workdir", "state": "directory"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create Work Directory\n  file:\n    path: /root/ansible_workdir\n    state: directory\n", "line_num_in_file": [16, 20], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[3]", "name": "Install Packages on kvm_host", "module": "yum", "index": 3, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[3]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ env.pkgs.kvm }}"}, "options": {"name": "Install Packages on kvm_host", "loop": "{{ env.pkgs.kvm }}", "when": "host != 'bastion_hypershift'"}, "module_options": {"name": ["{{ item }}"], "state": "present"}, "executable": "yum", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Install Packages on kvm_host\n  yum:\n    name:\n      - \"{{ item }}\"\n    state: present\n  loop: \"{{ env.pkgs.kvm }}\"\n  when: host != 'bastion_hypershift'\n", "line_num_in_file": [21, 28], "resolved_name": "ansible.builtin.yum", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "yum", "fqcn": "ansible.builtin.yum", "key": "module collection:ansible.builtin#module:ansible.builtin.yum"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.yum", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.yum", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["allow_downgrade", "autoremove", "bugfix", "cacheonly", "conf_file", "disable_excludes", "disable_gpg_check", "disable_plugin", "disablerepo", "download_dir", "download_only", "enable_plugin", "enablerepo", "exclude", "install_repoquery", "install_weak_deps", "installroot", "list", "lock_timeout", "name", "pkg", "releasever", "security", "skip_broken", "sslverify", "state", "update_cache", "expire-cache", "update_only", "use_backend", "validate_certs"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation"], "vars_used_in_target_task": ["item", "env.pkgs.kvm"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[4]", "name": "Install Packages for Hypershift", "module": "package", "index": 4, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[4]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ env.pkgs.hypershift }}"}, "options": {"name": "Install Packages for Hypershift", "loop": "{{ env.pkgs.hypershift }}"}, "module_options": {"name": ["{{ item }}"], "state": "present"}, "executable": "package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Install Packages for Hypershift\n  package:\n    name:\n      - \"{{ item }}\"\n    state: present\n  loop: \"{{ env.pkgs.hypershift }}\"\n", "line_num_in_file": [29, 35], "resolved_name": "ansible.builtin.package", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "package", "fqcn": "ansible.builtin.package", "key": "module collection:ansible.builtin#module:ansible.builtin.package"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.package", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.package", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["name", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}, {"key": "state", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation"], "vars_used_in_target_task": ["item", "env.pkgs.hypershift"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[5]", "name": "Check if OC installed", "module": "command", "index": 5, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[5]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"oc_installed": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[5]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check if OC installed", "register": "oc_installed", "ignore_errors": true}, "module_options": "oc", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check if OC installed\n  command: oc\n  register: oc_installed\n  ignore_errors: true\n", "line_num_in_file": [36, 40], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation", "oc_installed"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[6]", "name": "Download OC Client", "module": "get_url", "index": 6, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[6]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Download OC Client", "when": "oc_installed.rc != 0"}, "module_options": {"url": "{{ hypershift.oc_url }}", "dest": "/root/ansible_workdir/"}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Download OC Client\n  get_url:\n    url: \"{{ hypershift.oc_url }}\"\n    dest: /root/ansible_workdir/\n  when: oc_installed.rc != 0\n", "line_num_in_file": [41, 46], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "get_url", "fqcn": "ansible.builtin.get_url", "key": "module collection:ansible.builtin#module:ansible.builtin.get_url"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "url", "value": "{{ hypershift.oc_url }}", "undefined_variables": ["hypershift.oc_url"]}], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "{{ hypershift.oc_url }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation", "oc_installed"], "vars_used_in_target_task": ["hypershift.oc_url"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[7]", "name": "tar oc", "module": "command", "index": 7, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[7]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "tar oc", "when": "oc_installed.rc != 0"}, "module_options": "tar -vxzf /root/ansible_workdir/{{ hypershift.oc_url.split('/')[-1] }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: tar oc\n  command: tar -vxzf /root/ansible_workdir/{{ hypershift.oc_url.split('/')[-1] }}\n  when: oc_installed.rc != 0\n", "line_num_in_file": [47, 50], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation", "oc_installed"], "vars_used_in_target_task": ["hypershift.oc_url.split('/')[-1]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[8]", "name": "Copy oc to /usr/local/bin/", "module": "shell", "index": 8, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[8]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Copy oc to /usr/local/bin/", "when": "oc_installed.rc != 0"}, "module_options": "cp oc /usr/local/bin/oc", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Copy oc to /usr/local/bin/\n  shell: cp oc /usr/local/bin/oc\n  when: oc_installed.rc != 0\n", "line_num_in_file": [51, 54], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation", "oc_installed"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[9]", "name": "Copy oc to /usr/bin/", "module": "shell", "index": 9, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[9]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Copy oc to /usr/bin/", "when": "oc_installed.rc != 0"}, "module_options": "cp oc /usr/bin/oc", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Copy oc to /usr/bin/\n  shell: cp oc /usr/bin/oc\n  when: oc_installed.rc != 0\n", "line_num_in_file": [55, 58], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation", "oc_installed"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[10]", "name": "Add Management Cluster Nameserver to /etc/resolv.conf", "module": "lineinfile", "index": 10, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[10]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add Management Cluster Nameserver to /etc/resolv.conf"}, "module_options": {"dest": "/etc/resolv.conf", "insertbefore": "BOF", "line": "nameserver {{ hypershift.mgmt_cluster_nameserver }}"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add Management Cluster Nameserver to /etc/resolv.conf\n  lineinfile:\n    dest: /etc/resolv.conf\n    insertbefore: BOF\n    line: nameserver {{ hypershift.mgmt_cluster_nameserver }}\n", "line_num_in_file": [59, 64], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [{"used_alias": "dest", "real_key": "path"}], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "nameserver {{ hypershift.mgmt_cluster_nameserver }}", "undefined_variables": ["hypershift.mgmt_cluster_nameserver"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "nameserver {{ hypershift.mgmt_cluster_nameserver }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation", "oc_installed"], "vars_used_in_target_task": ["hypershift.mgmt_cluster_nameserver"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:install_prerequisites_host_hypershift#taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[11]", "name": "Login to Management Cluster", "module": "command", "index": 11, "play_index": -1, "defined_in": "roles/install_prerequisites_host_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/install_prerequisites_host_hypershift/tasks/main.yaml#task:[11]", "role": "install_prerequisites_host_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Login to Management Cluster"}, "module_options": "oc login {{ api_server }} -u {{ user_name }} -p {{ password }} --insecure-skip-tls-verify=true", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Login to Management Cluster\n  command: oc login {{ api_server }} -u {{ user_name }} -p {{ password }} --insecure-skip-tls-verify=true", "line_num_in_file": [65, 67], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]", "hypershift.mgmt_cluster_nameserver"], "vars_defined_in_previous_tasks": ["ssh_key", "ssh_key_creation", "oc_installed"], "vars_used_in_target_task": ["api_server", "user_name", "password"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:macvtap#taskfile:roles/macvtap/tasks/main.yaml#task:[0]", "name": "Set up macvtap bridge configuration xml from template to KVM host", "module": "community.libvirt.virt_net", "index": 0, "play_index": -1, "defined_in": "roles/macvtap/tasks/main.yaml", "local_key": "task taskfile:roles/macvtap/tasks/main.yaml#task:[0]", "role": "macvtap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Set up macvtap bridge configuration xml from template to KVM host", "tags": "macvtap"}, "module_options": {"command": "define", "name": "{{ env.bridge_name }}", "xml": "{{ lookup ('template', 'macvtap.xml.j2') }}"}, "executable": "community.libvirt.virt_net", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set up macvtap bridge configuration xml from template to KVM host\n  tags: macvtap\n  community.libvirt.virt_net:\n    command: define\n    name: \"{{ env.bridge_name }}\"\n    xml: \"{{ lookup ('template', 'macvtap.xml.j2') }}\"\n", "line_num_in_file": [2, 8], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.libvirt.virt_net", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.bridge_name", "lookup('template','macvtap.xml.j2')"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:macvtap#taskfile:roles/macvtap/tasks/main.yaml#task:[1]", "name": "Start macvtap bridge", "module": "community.libvirt.virt_net", "index": 1, "play_index": -1, "defined_in": "roles/macvtap/tasks/main.yaml", "local_key": "task taskfile:roles/macvtap/tasks/main.yaml#task:[1]", "role": "macvtap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Start macvtap bridge", "tags": "macvtap"}, "module_options": {"command": "start", "name": "{{ env.bridge_name }}"}, "executable": "community.libvirt.virt_net", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Start macvtap bridge\n  tags: macvtap\n  community.libvirt.virt_net:\n    command: start\n    name: \"{{ env.bridge_name }}\"\n", "line_num_in_file": [9, 14], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.libvirt.virt_net", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bridge_name", "lookup('template','macvtap.xml.j2')"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.bridge_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:macvtap#taskfile:roles/macvtap/tasks/main.yaml#task:[2]", "name": "Set macvtap bridge to autostart", "module": "community.libvirt.virt_net", "index": 2, "play_index": -1, "defined_in": "roles/macvtap/tasks/main.yaml", "local_key": "task taskfile:roles/macvtap/tasks/main.yaml#task:[2]", "role": "macvtap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Set macvtap bridge to autostart", "tags": "macvtap"}, "module_options": {"autostart": true, "name": "{{ env.bridge_name }}"}, "executable": "community.libvirt.virt_net", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set macvtap bridge to autostart\n  tags: macvtap\n  community.libvirt.virt_net:\n    autostart: true\n    name: \"{{ env.bridge_name }}\"", "line_num_in_file": [15, 20], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.libvirt.virt_net", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.bridge_name", "lookup('template','macvtap.xml.j2')"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.bridge_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:print_node_status#taskfile:roles/print_node_status/tasks/main.yaml#task:[0]", "name": "Check parameters", "module": "ansible.builtin.fail", "index": 0, "play_index": -1, "defined_in": "roles/print_node_status/tasks/main.yaml", "local_key": "task taskfile:roles/print_node_status/tasks/main.yaml#task:[0]", "role": "print_node_status", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Check parameters", "when": "((ansible_play_hosts | length)  > 1)"}, "module_options": {"msg": "Too many hosts defined in ansible play: {{ ansible_play_hosts }}"}, "executable": "ansible.builtin.fail", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check parameters\n  ansible.builtin.fail:\n    msg: \"Too many hosts defined in ansible play: {{ ansible_play_hosts }}\"\n  when: ((ansible_play_hosts | length)  > 1)\n", "line_num_in_file": [3, 7], "resolved_name": "ansible.builtin.fail", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "fail", "fqcn": "ansible.builtin.fail", "key": "module collection:ansible.builtin#module:ansible.builtin.fail"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.fail", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.fail", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "msg", "expected_type": "str", "unknown_type_value": "Too many hosts defined in ansible play: {{ ansible_play_hosts }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["ansible_play_hosts"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:print_node_status#taskfile:roles/print_node_status/tasks/main.yaml#task:[1]", "name": "Get and print nodes status", "module": "ansible.builtin.include_tasks", "index": 1, "play_index": -1, "defined_in": "roles/print_node_status/tasks/main.yaml", "local_key": "task taskfile:roles/print_node_status/tasks/main.yaml#task:[1]", "role": "print_node_status", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Get and print nodes status"}, "module_options": "{{ role_path }}/../common/tasks/print_ocp_node_status.yaml", "executable": "{{ role_path }}/../common/tasks/print_ocp_node_status.yaml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- name: Get and print nodes status\n  ansible.builtin.include_tasks: \"{{ role_path }}/../common/tasks/print_ocp_node_status.yaml\"", "line_num_in_file": [8, 10], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_play_hosts"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/assert.yml#task:[0]", "name": "Ensure that `epel_next` is set correctly.", "module": "ansible.builtin.assert", "index": 0, "play_index": -1, "defined_in": "roles/robertdebock.epel/tasks/assert.yml", "local_key": "task taskfile:roles/robertdebock.epel/tasks/assert.yml#task:[0]", "role": "robertdebock.epel", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure that `epel_next` is set correctly."}, "module_options": {"quiet": true, "that": ["epel_next is defined", "epel_next is bool"]}, "executable": "ansible.builtin.assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Ensure that `epel_next` is set correctly.\n  ansible.builtin.assert:\n    quiet: true\n    that:\n      - epel_next is defined\n      - epel_next is bool", "line_num_in_file": [2, 8], "resolved_name": "ansible.builtin.assert", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "assert", "fqcn": "ansible.builtin.assert", "key": "module collection:ansible.builtin#module:ansible.builtin.assert"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/main.yml#task:[0]", "name": "install epel gpg key", "module": "ansible.builtin.rpm_key", "index": 0, "play_index": -1, "defined_in": "roles/robertdebock.epel/tasks/main.yml", "local_key": "task taskfile:roles/robertdebock.epel/tasks/main.yml#task:[0]", "role": "robertdebock.epel", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "install epel gpg key"}, "module_options": {"key": "{{ epel_gpg_key }}", "state": "present"}, "executable": "ansible.builtin.rpm_key", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: install epel gpg key\n      ansible.builtin.rpm_key:\n        key: \"{{ epel_gpg_key }}\"\n        state: present\n", "line_num_in_file": [6, 10], "resolved_name": "ansible.builtin.rpm_key", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "rpm_key", "fqcn": "ansible.builtin.rpm_key", "key": "module collection:ansible.builtin#module:ansible.builtin.rpm_key"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/main.yml#task:[1]", "name": "install epel-release", "module": "ansible.builtin.package", "index": 1, "play_index": -1, "defined_in": "roles/robertdebock.epel/tasks/main.yml", "local_key": "task taskfile:roles/robertdebock.epel/tasks/main.yml#task:[1]", "role": "robertdebock.epel", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "install epel-release", "notify": ["update package cache"]}, "module_options": {"name": "{{ epel_url }}", "state": "present"}, "executable": "ansible.builtin.package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: install epel-release\n      ansible.builtin.package:\n        name: \"{{ epel_url }}\"\n        state: present\n      notify:\n        - update package cache\n", "line_num_in_file": [11, 17], "resolved_name": "ansible.builtin.package", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "package", "fqcn": "ansible.builtin.package", "key": "module collection:ansible.builtin#module:ansible.builtin.package"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.epel#taskfile:roles/robertdebock.epel/tasks/main.yml#task:[2]", "name": "install epel-next-release", "module": "ansible.builtin.package", "index": 2, "play_index": -1, "defined_in": "roles/robertdebock.epel/tasks/main.yml", "local_key": "task taskfile:roles/robertdebock.epel/tasks/main.yml#task:[2]", "role": "robertdebock.epel", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "install epel-next-release", "when": ["epel_next"], "notify": ["update package cache"]}, "module_options": {"name": "{{ epel_next_url }}", "state": "present"}, "executable": "ansible.builtin.package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: install epel-next-release\n      ansible.builtin.package:\n        name: \"{{ epel_next_url }}\"\n        state: present\n      when:\n        - epel_next\n      notify:\n        - update package cache\n  when:", "line_num_in_file": [18, 26], "resolved_name": "ansible.builtin.package", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "package", "fqcn": "ansible.builtin.package", "key": "module collection:ansible.builtin#module:ansible.builtin.package"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/assert.yml#task:[0]", "name": "test if openvpn_role is set correctly", "module": "ansible.builtin.assert", "index": 0, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/assert.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/assert.yml#task:[0]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "test if openvpn_role is set correctly"}, "module_options": {"that": ["openvpn_role is defined", "openvpn_role is string", "openvpn_role in [ \"client\", \"server\" ]"], "quiet": true}, "executable": "ansible.builtin.assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: test if openvpn_role is set correctly\n  ansible.builtin.assert:\n    that:\n      - openvpn_role is defined\n      - openvpn_role is string\n      - openvpn_role in [ \"client\", \"server\" ]\n    quiet: true\n", "line_num_in_file": [2, 9], "resolved_name": "ansible.builtin.assert", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "assert", "fqcn": "ansible.builtin.assert", "key": "module collection:ansible.builtin#module:ansible.builtin.assert"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/assert.yml#task:[1]", "name": "test if openvpn_client_server is set correctly", "module": "ansible.builtin.assert", "index": 1, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/assert.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/assert.yml#task:[1]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "test if openvpn_client_server is set correctly", "when": ["openvpn_role == \"client\""]}, "module_options": {"that": ["openvpn_client_server is defined", "openvpn_client_server is string"], "quiet": true}, "executable": "ansible.builtin.assert", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: test if openvpn_client_server is set correctly\n  ansible.builtin.assert:\n    that:\n      - openvpn_client_server is defined\n      - openvpn_client_server is string\n    quiet: true\n  when:\n    - openvpn_role == \"client\"", "line_num_in_file": [10, 18], "resolved_name": "ansible.builtin.assert", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "assert", "fqcn": "ansible.builtin.assert", "key": "module collection:ansible.builtin#module:ansible.builtin.assert"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/client.yml#task:[0]", "name": "ensure /etc/openvpn/client exists", "module": "ansible.builtin.file", "index": 0, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/client.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/client.yml#task:[0]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "ensure /etc/openvpn/client exists"}, "module_options": {"path": "/etc/openvpn/client", "state": "directory", "owner": "root", "group": "{{ openvpn_group }}", "mode": "0750"}, "executable": "ansible.builtin.file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: ensure /etc/openvpn/client exists\n  ansible.builtin.file:\n    path: /etc/openvpn/client\n    state: directory\n    owner: root\n    group: \"{{ openvpn_group }}\"\n    mode: \"0750\"\n", "line_num_in_file": [2, 9], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/client.yml#task:[1]", "name": "place client.conf", "module": "ansible.builtin.template", "index": 1, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/client.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/client.yml#task:[1]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "place client.conf", "notify": ["restart openvpn"]}, "module_options": {"src": "client.conf.j2", "dest": "{{ openvpn_configuration_directory }}/client.conf", "owner": "root", "group": "{{ openvpn_group }}", "mode": "0640"}, "executable": "ansible.builtin.template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: place client.conf\n  ansible.builtin.template:\n    src: client.conf.j2\n    dest: \"{{ openvpn_configuration_directory }}/client.conf\"\n    owner: root\n    group: \"{{ openvpn_group }}\"\n    mode: \"0640\"\n  notify:\n    - restart openvpn", "line_num_in_file": [10, 19], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[0]", "name": "import assert.yml", "module": "ansible.builtin.import_tasks", "index": 0, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/main.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[0]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "import assert.yml", "run_once": true, "delegate_to": "localhost"}, "module_options": "assert.yml", "executable": "assert.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- name: import assert.yml\n  ansible.builtin.import_tasks: assert.yml\n  run_once: true\n  delegate_to: localhost\n", "line_num_in_file": [4, 8], "resolved_name": "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/assert.yml", "possible_candidates": [], "module_info": {}, "include_info": {"type": "taskfile", "path": "roles/robertdebock.openvpn/tasks/assert.yml", "key": "taskfile role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/assert.yml"}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[1]", "name": "install openvpn packages", "module": "ansible.builtin.package", "index": 1, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/main.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[1]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "install openvpn packages"}, "module_options": {"name": "{{ openvpn_packages }}", "state": "present"}, "executable": "ansible.builtin.package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: install openvpn packages\n  ansible.builtin.package:\n    name: \"{{ openvpn_packages }}\"\n    state: present\n", "line_num_in_file": [9, 13], "resolved_name": "ansible.builtin.package", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "package", "fqcn": "ansible.builtin.package", "key": "module collection:ansible.builtin#module:ansible.builtin.package"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[2]", "name": "setup openvpn server or client", "module": "ansible.builtin.include_tasks", "index": 2, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/main.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[2]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "setup openvpn server or client"}, "module_options": {"file": "{{ openvpn_role }}.yml"}, "executable": "{{ openvpn_role }}.yml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- name: setup openvpn server or client\n  ansible.builtin.include_tasks:\n    file: \"{{ openvpn_role }}.yml\"\n", "line_num_in_file": [14, 17], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[3]", "name": "start and enable openvpn", "module": "ansible.builtin.service", "index": 3, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/main.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/main.yml#task:[3]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "start and enable openvpn"}, "module_options": {"name": "{{ openvpn_service }}", "state": "started", "enabled": true}, "executable": "ansible.builtin.service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: start and enable openvpn\n  ansible.builtin.service:\n    name: \"{{ openvpn_service }}\"\n    state: started\n    enabled: true", "line_num_in_file": [18, 23], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[0]", "name": "ensure /etc/openvpn/easy-rsa exists", "module": "ansible.builtin.file", "index": 0, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[0]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "ensure /etc/openvpn/easy-rsa exists"}, "module_options": {"path": "/etc/openvpn/easy-rsa", "state": "directory", "mode": "0755"}, "executable": "ansible.builtin.file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: ensure /etc/openvpn/easy-rsa exists\n  ansible.builtin.file:\n    path: /etc/openvpn/easy-rsa\n    state: directory\n    mode: \"0755\"\n", "line_num_in_file": [2, 7], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[1]", "name": "easyrsa init-pki", "module": "ansible.builtin.command", "index": 1, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[1]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "easyrsa init-pki"}, "module_options": {"cmd": "{{ openvpn_easyrsa_path }}/easyrsa init-pki", "chdir": "/etc/openvpn/easy-rsa", "creates": "/etc/openvpn/easy-rsa/pki"}, "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: easyrsa init-pki\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa init-pki\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki\n", "line_num_in_file": [8, 13], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[2]", "name": "easyrsa build-ca", "module": "ansible.builtin.command", "index": 2, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[2]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "easyrsa build-ca", "environment": {"EASYRSA_BATCH": "yes"}}, "module_options": {"cmd": "{{ openvpn_easyrsa_path }}/easyrsa build-ca nopass", "chdir": "/etc/openvpn/easy-rsa", "creates": "/etc/openvpn/easy-rsa/pki/ca.crt"}, "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: easyrsa build-ca\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa build-ca nopass\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/ca.crt\n  environment:\n    EASYRSA_BATCH: \"yes\"\n", "line_num_in_file": [14, 21], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[3]", "name": "easyrsa gen-dh", "module": "ansible.builtin.command", "index": 3, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[3]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "easyrsa gen-dh"}, "module_options": {"cmd": "{{ openvpn_easyrsa_path }}/easyrsa gen-dh", "chdir": "/etc/openvpn/easy-rsa", "creates": "/etc/openvpn/easy-rsa/pki/dh.pem"}, "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: easyrsa gen-dh\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa gen-dh\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/dh.pem\n", "line_num_in_file": [22, 27], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[4]", "name": "easyrsa build-server-full server nopass", "module": "ansible.builtin.command", "index": 4, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[4]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "easyrsa build-server-full server nopass"}, "module_options": {"cmd": "{{ openvpn_easyrsa_path }}/easyrsa build-server-full server nopass", "chdir": "/etc/openvpn/easy-rsa", "creates": "/etc/openvpn/easy-rsa/pki/issued/server.crt"}, "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: easyrsa build-server-full server nopass\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa build-server-full server nopass\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/issued/server.crt\n", "line_num_in_file": [28, 33], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[5]", "name": "easyrsa build-client-full client nopass", "module": "ansible.builtin.command", "index": 5, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[5]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "easyrsa build-client-full client nopass"}, "module_options": {"cmd": "{{ openvpn_easyrsa_path }}/easyrsa build-client-full client nopass", "chdir": "/etc/openvpn/easy-rsa", "creates": "/etc/openvpn/easy-rsa/pki/issued/client.crt"}, "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: easyrsa build-client-full client nopass\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa build-client-full client nopass\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/issued/client.crt\n", "line_num_in_file": [34, 39], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[6]", "name": "easyrsa gen-crl", "module": "ansible.builtin.command", "index": 6, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[6]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "easyrsa gen-crl"}, "module_options": {"cmd": "{{ openvpn_easyrsa_path }}/easyrsa gen-crl", "chdir": "/etc/openvpn/easy-rsa", "creates": "/etc/openvpn/easy-rsa/pki/crl.pem"}, "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: easyrsa gen-crl\n  ansible.builtin.command:\n    cmd: \"{{ openvpn_easyrsa_path }}/easyrsa gen-crl\"\n    chdir: /etc/openvpn/easy-rsa\n    creates: /etc/openvpn/easy-rsa/pki/crl.pem\n", "line_num_in_file": [40, 45], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[7]", "name": "openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key", "module": "ansible.builtin.command", "index": 7, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[7]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key"}, "module_options": {"cmd": "openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key", "creates": "/etc/openvpn/easy-rsa/pki/ta.key"}, "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key\n  ansible.builtin.command:\n    cmd: openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key\n    creates: /etc/openvpn/easy-rsa/pki/ta.key\n", "line_num_in_file": [46, 50], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[8]", "name": "copy files to /etc/openvpn/server", "module": "ansible.builtin.copy", "index": 8, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[8]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["ca.crt", "dh.pem", "ta.key", "issued/client.crt", "issued/server.crt", "private/ca.key", "private/client.key", "private/server.key"]}, "options": {"name": "copy files to /etc/openvpn/server", "loop": ["ca.crt", "dh.pem", "ta.key", "issued/client.crt", "issued/server.crt", "private/ca.key", "private/client.key", "private/server.key"]}, "module_options": {"src": "/etc/openvpn/easy-rsa/pki/{{ item }}", "dest": "/etc/openvpn/server/{{ item | basename }}", "mode": "0640", "remote_src": true}, "executable": "ansible.builtin.copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: copy files to /etc/openvpn/server\n  ansible.builtin.copy:\n    src: /etc/openvpn/easy-rsa/pki/{{ item }}\n    dest: /etc/openvpn/server/{{ item | basename }}\n    mode: \"0640\"\n    remote_src: true\n  loop:\n    - ca.crt\n    - dh.pem\n    - ta.key\n    - issued/client.crt\n    - issued/server.crt\n    - private/ca.key\n    - private/client.key\n    - private/server.key\n", "line_num_in_file": [51, 66], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[9]", "name": "copy files to /etc/openvpn", "module": "ansible.builtin.copy", "index": 9, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[9]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["ca.crt", "ta.key"]}, "options": {"name": "copy files to /etc/openvpn", "loop": ["ca.crt", "ta.key"]}, "module_options": {"src": "/etc/openvpn/easy-rsa/pki/{{ item }}", "dest": "/etc/openvpn/{{ item | basename }}", "mode": "0640", "remote_src": true}, "executable": "ansible.builtin.copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: copy files to /etc/openvpn\n  ansible.builtin.copy:\n    src: /etc/openvpn/easy-rsa/pki/{{ item }}\n    dest: /etc/openvpn/{{ item | basename }}\n    mode: \"0640\"\n    remote_src: true\n  loop:\n    - ca.crt\n    - ta.key\n", "line_num_in_file": [67, 76], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:robertdebock.openvpn#taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[10]", "name": "place server.conf", "module": "ansible.builtin.template", "index": 10, "play_index": -1, "defined_in": "roles/robertdebock.openvpn/tasks/server.yml", "local_key": "task taskfile:roles/robertdebock.openvpn/tasks/server.yml#task:[10]", "role": "robertdebock.openvpn", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "place server.conf", "notify": ["restart openvpn"]}, "module_options": {"src": "server.conf.j2", "dest": "{{ openvpn_configuration_directory }}/server.conf", "owner": "root", "group": "{{ openvpn_group }}", "mode": "0640"}, "executable": "ansible.builtin.template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: place server.conf\n  ansible.builtin.template:\n    src: server.conf.j2\n    dest: \"{{ openvpn_configuration_directory }}/server.conf\"\n    owner: root\n    group: \"{{ openvpn_group }}\"\n    mode: \"0640\"\n  notify:\n    - restart openvpn", "line_num_in_file": [77, 86], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[0]", "name": "Wait for agents to join the cluster", "module": "k8s_info", "index": 0, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[0]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"agents": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for agents to join the cluster", "register": "agents", "until": "agents.resources | length == {{ hypershift.agents_parms.agents_count }}", "retries": 30, "delay": 10}, "module_options": {"api_version": "agent-install.openshift.io/v1beta1", "kind": "Agent"}, "executable": "k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n", "line_num_in_file": [2, 10], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["agents"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[1]", "name": "Get agent names", "module": "command", "index": 1, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[1]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"agents_info": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get agent names", "register": "agents_info"}, "module_options": "oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n", "line_num_in_file": [11, 14], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["agents", "agents_info"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[2]", "name": "Create List for agents", "module": "set_fact", "index": 2, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[2]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"agents": []}, "loop": {}, "options": {"name": "Create List for agents"}, "module_options": {"agents": []}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create List for agents\n  set_fact:\n    agents: []", "line_num_in_file": [15, 17], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["agents", "agents_info"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[3]", "name": "Get a List of agents", "module": "set_fact", "index": 3, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[3]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"agents": "{{ agents + [agents_info.stdout.split('\n')[item].split(' ')[0]] }}"}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Get a List of agents", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": {"agents": "{{ agents + [agents_info.stdout.split('\n')[item].split(' ')[0]] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [18, 22], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["agents", "agents_info"], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[4]", "name": "Patch Agents", "module": "shell", "index": 4, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[4]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "options": {"name": "Patch Agents", "loop": "{{ range(hypershift.agents_parms.agents_count|int) | list }}"}, "module_options": "oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{ hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n", "line_num_in_file": [23, 27], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]"], "vars_defined_in_previous_tasks": ["agents", "agents_info"], "vars_used_in_target_task": ["item", "range(hypershift.agents_parms.agents_count", "hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "agents[item]", "hypershift.hcp.basedomain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[5]", "name": "Scale Nodepool", "module": "command", "index": 5, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[5]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Scale Nodepool"}, "module_options": "oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n", "line_num_in_file": [28, 31], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.basedomain"], "vars_defined_in_previous_tasks": ["agents", "agents_info"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "hypershift.agents_parms.agents_count"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[6]", "name": "Wait for Agentmachines to create", "module": "k8s_info", "index": 6, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[6]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"agent_machines": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[6]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for Agentmachines to create", "register": "agent_machines", "until": "agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}", "retries": 30, "delay": 10}, "module_options": {"api_version": "capi-provider.agent-install.openshift.io/v1alpha1", "kind": "AgentMachine"}, "executable": "k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n", "line_num_in_file": [32, 40], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.basedomain", "hypershift.agents_parms.agents_count"], "vars_defined_in_previous_tasks": ["agents", "agents_info", "agent_machines"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[7]", "name": "Wait for Machines to create", "module": "k8s_info", "index": 7, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[7]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"machines": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[7]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for Machines to create", "register": "machines", "until": "machines.resources | length == {{ hypershift.agents_parms.agents_count }}", "retries": 30, "delay": 10}, "module_options": {"api_version": "cluster.x-k8s.io/v1beta1", "kind": "Machine"}, "executable": "k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for Machines to create\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n", "line_num_in_file": [41, 49], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.basedomain", "hypershift.agents_parms.agents_count"], "vars_defined_in_previous_tasks": ["agents", "agents_info", "agent_machines", "machines"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[8]", "name": "Create Kubeconfig for Hosted Cluster", "module": "shell", "index": 8, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[8]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create Kubeconfig for Hosted Cluster"}, "module_options": "hypershift create kubeconfig --namespace {{ hypershift.hcp.clusters_namespace }} --name {{ hypershift.hcp.hosted_cluster_name }} > /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create Kubeconfig for Hosted Cluster\n  shell: hypershift create kubeconfig --namespace {{ hypershift.hcp.clusters_namespace }} --name {{ hypershift.hcp.hosted_cluster_name }} > /root/ansible_workdir/{{\n    hypershift.hcp.hosted_cluster_name }}-kubeconfig\n", "line_num_in_file": [50, 53], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.basedomain", "hypershift.agents_parms.agents_count"], "vars_defined_in_previous_tasks": ["agents", "agents_info", "agent_machines", "machines"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[9]", "name": "Wait for Worker Nodes to Join", "module": "k8s_info", "index": 9, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[9]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"nodes": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[9]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for Worker Nodes to Join", "register": "nodes", "until": "nodes.resources | length == {{ hypershift.agents_parms.agents_count }}", "retries": 300, "delay": 10}, "module_options": {"api_version": "v1", "kind": "Node", "kubeconfig": "/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig"}, "executable": "k8s_info", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for Worker Nodes to Join\n  k8s_info:\n    api_version: v1\n    kind: Node\n    kubeconfig: /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig\n  register: nodes\n  until: nodes.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 300\n  delay: 10\n", "line_num_in_file": [54, 63], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "k8s_info", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.basedomain", "hypershift.agents_parms.agents_count"], "vars_defined_in_previous_tasks": ["agents", "agents_info", "agent_machines", "machines", "nodes"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[10]", "name": "Wait for Worker nodes to be Ready", "module": "shell", "index": 10, "play_index": -1, "defined_in": "roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[10]", "role": "scale_nodepool_and_wait_for_workers_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"node_status": "task role:scale_nodepool_and_wait_for_workers_hypershift#taskfile:roles/scale_nodepool_and_wait_for_workers_hypershift/tasks/main.yaml#task:[10]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for Worker nodes to be Ready", "register": "node_status", "until": "node_status.stdout == '0'", "retries": 50, "delay": 15}, "module_options": "oc get no --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig  --no-headers | grep -i 'NotReady' | wc -l", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for Worker nodes to be Ready\n  shell: oc get no --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig  --no-headers | grep -i 'NotReady' | wc -l\n  register: node_status\n  until: node_status.stdout == '0'\n  retries: 50\n  delay: 15", "line_num_in_file": [64, 70], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "item", "range(hypershift.agents_parms.agents_count", "agents+[agents_info.stdout.split('\n')[item].split('')[0]]", "agents[item]", "hypershift.hcp.basedomain", "hypershift.agents_parms.agents_count"], "vars_defined_in_previous_tasks": ["agents", "agents_info", "agent_machines", "machines", "nodes", "node_status"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[0]", "name": "start firewalld service", "module": "service", "index": 0, "play_index": -1, "defined_in": "roles/set_firewall/tasks/main.yaml", "local_key": "task taskfile:roles/set_firewall/tasks/main.yaml#task:[0]", "role": "set_firewall", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "start firewalld service"}, "module_options": {"name": "firewalld", "state": "started", "enabled": true}, "executable": "service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n", "line_num_in_file": [2, 7], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[1]", "name": "Add ports to firewall", "module": "firewalld", "index": 1, "play_index": -1, "defined_in": "roles/set_firewall/tasks/main.yaml", "local_key": "task taskfile:roles/set_firewall/tasks/main.yaml#task:[1]", "role": "set_firewall", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["8080/tcp", "80/tcp", "443/tcp", "4443/tcp", "6443/tcp", "22623/tcp", "53/tcp", "53/udp"]}, "options": {"name": "Add ports to firewall", "tags": "set_firewall", "loop": ["8080/tcp", "80/tcp", "443/tcp", "4443/tcp", "6443/tcp", "22623/tcp", "53/tcp", "53/udp"]}, "module_options": {"port": "{{ item }}", "permanent": true, "state": "enabled"}, "executable": "firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n", "line_num_in_file": [8, 23], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[2]", "name": "Permit traffic in default zone for http and https", "module": "ansible.posix.firewalld", "index": 2, "play_index": -1, "defined_in": "roles/set_firewall/tasks/main.yaml", "local_key": "task taskfile:roles/set_firewall/tasks/main.yaml#task:[2]", "role": "set_firewall", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["http", "https"]}, "options": {"name": "Permit traffic in default zone for http and https", "tags": "set_firewall", "loop": ["http", "https"]}, "module_options": {"service": "{{ item }}", "permanent": true, "state": "enabled"}, "executable": "ansible.posix.firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Permit traffic in default zone for http and https\n  tags: set_firewall\n  ansible.posix.firewalld:\n    service: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - http\n    - https\n", "line_num_in_file": [24, 33], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ansible.posix.firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[3]", "name": "Ensure the default Apache port is 8080", "module": "replace", "index": 3, "play_index": -1, "defined_in": "roles/set_firewall/tasks/main.yaml", "local_key": "task taskfile:roles/set_firewall/tasks/main.yaml#task:[3]", "role": "set_firewall", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure the default Apache port is 8080", "tags": "set_firewall"}, "module_options": {"path": "/etc/httpd/conf/httpd.conf", "regexp": "^Listen 80$", "replace": "Listen 8080", "backup": true}, "executable": "replace", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Ensure the default Apache port is 8080\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: ^Listen 80$\n    replace: Listen 8080\n    backup: true\n", "line_num_in_file": [34, 41], "resolved_name": "ansible.builtin.replace", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "replace", "fqcn": "ansible.builtin.replace", "key": "module collection:ansible.builtin#module:ansible.builtin.replace"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.replace", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.replace", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["after", "attributes", "attr", "backup", "before", "encoding", "group", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "replace", "selevel", "serole", "setype", "seuser", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}, {"key": "regexp", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[4]", "name": "Ensure the SSL default port is 4443", "module": "replace", "index": 4, "play_index": -1, "defined_in": "roles/set_firewall/tasks/main.yaml", "local_key": "task taskfile:roles/set_firewall/tasks/main.yaml#task:[4]", "role": "set_firewall", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure the SSL default port is 4443", "tags": "set_firewall"}, "module_options": {"path": "/etc/httpd/conf.d/ssl.conf", "regexp": "^Listen 443 https", "replace": "Listen 4443 https", "backup": true}, "executable": "replace", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Ensure the SSL default port is 4443\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf.d/ssl.conf\n    regexp: ^Listen 443 https\n    replace: Listen 4443 https\n    backup: true\n", "line_num_in_file": [42, 49], "resolved_name": "ansible.builtin.replace", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "replace", "fqcn": "ansible.builtin.replace", "key": "module collection:ansible.builtin#module:ansible.builtin.replace"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.replace", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.replace", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["after", "attributes", "attr", "backup", "before", "encoding", "group", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "replace", "selevel", "serole", "setype", "seuser", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}, {"key": "regexp", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_firewall#taskfile:roles/set_firewall/tasks/main.yaml#task:[5]", "name": "reload firewalld to reflect changes", "module": "systemd", "index": 5, "play_index": -1, "defined_in": "roles/set_firewall/tasks/main.yaml", "local_key": "task taskfile:roles/set_firewall/tasks/main.yaml#task:[5]", "role": "set_firewall", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "reload firewalld to reflect changes", "tags": "set_firewall"}, "module_options": {"name": "firewalld", "state": "reloaded"}, "executable": "systemd", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: reload firewalld to reflect changes\n  tags: set_firewall\n  systemd:\n    name: firewalld\n    state: reloaded", "line_num_in_file": [50, 55], "resolved_name": "ansible.builtin.systemd", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "systemd", "fqcn": "ansible.builtin.systemd", "key": "module collection:ansible.builtin#module:ansible.builtin.systemd"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.systemd", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.systemd", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["daemon_reexec", "daemon-reexec", "daemon_reload", "daemon-reload", "enabled", "force", "masked", "name", "service", "unit", "no_block", "scope", "state"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["item"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[0]", "name": "Find inventory directory from ansible.cfg", "module": "shell", "index": 0, "play_index": -1, "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "task taskfile:roles/set_inventory/tasks/main.yaml#task:[0]", "role": "set_inventory", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"find_inventory": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Find inventory directory from ansible.cfg", "tags": "set_inventory", "register": "find_inventory"}, "module_options": "cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory"], "vars_used_in_target_task": ["ansible_config_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[1]", "name": "Find absolute path to project.", "module": "shell", "index": 1, "play_index": -1, "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "task taskfile:roles/set_inventory/tasks/main.yaml#task:[1]", "role": "set_inventory", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"find_project": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Find absolute path to project.", "tags": "set_inventory", "register": "find_project"}, "module_options": "ansible_config=\"{{ ansible_config_file }}\"\necho \"${ansible_config%/*}/\"\n", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n", "line_num_in_file": [7, 13], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project"], "vars_used_in_target_task": ["ansible_config_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[2]", "name": "Fail if network_mode is NAT and jumphost vars are undefined.", "module": "fail", "index": 2, "play_index": -1, "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "task taskfile:roles/set_inventory/tasks/main.yaml#task:[2]", "role": "set_inventory", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Fail if network_mode is NAT and jumphost vars are undefined.", "tags": "set_inventory", "when": "( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none or env.jumphost.path_to_keypair is none)"}, "module_options": {"msg": "Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables."}, "executable": "fail", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n", "line_num_in_file": [14, 20], "resolved_name": "ansible.builtin.fail", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "fail", "fqcn": "ansible.builtin.fail", "key": "module collection:ansible.builtin#module:ansible.builtin.fail"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.fail", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.fail", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[3]", "name": "Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information", "module": "template", "index": 3, "play_index": -1, "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "task taskfile:roles/set_inventory/tasks/main.yaml#task:[3]", "role": "set_inventory", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information", "tags": "set_inventory"}, "module_options": {"src": "hosts.j2", "dest": "{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts", "force": true}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n", "line_num_in_file": [21, 27], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts", "undefined_variables": ["find_project.stdout", "find_inventory.stdout"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project"], "vars_used_in_target_task": ["find_project.stdout", "find_inventory.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[4]", "name": "", "module": "meta", "index": 4, "play_index": -1, "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "task taskfile:roles/set_inventory/tasks/main.yaml#task:[4]", "role": "set_inventory", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {}, "module_options": "refresh_inventory", "executable": "meta", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- meta: refresh_inventory\n", "line_num_in_file": [28, 29], "resolved_name": "ansible.builtin.meta", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "meta", "fqcn": "ansible.builtin.meta", "key": "module collection:ansible.builtin#module:ansible.builtin.meta"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.meta", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.meta", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["free_form"], "required_arg_keys": [{"key": "free_form", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[5]", "name": "Add path to Ansible private key in ansible.cfg", "module": "lineinfile", "index": 5, "play_index": -1, "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "task taskfile:roles/set_inventory/tasks/main.yaml#task:[5]", "role": "set_inventory", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add path to Ansible private key in ansible.cfg", "tags": "set_inventory"}, "module_options": {"line": "private_key_file=~/.ssh/{{ env.ansible_key_name }}", "path": "{{ ansible_config_file }}", "regexp": "private_key_file", "state": "present"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n", "line_num_in_file": [30, 37], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "private_key_file=~/.ssh/{{ env.ansible_key_name }}", "undefined_variables": ["env.ansible_key_name"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "private_key_file=~/.ssh/{{ env.ansible_key_name }}"}, {"key": "path", "expected_type": "str", "unknown_type_value": "{{ ansible_config_file }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project"], "vars_used_in_target_task": ["env.ansible_key_name", "ansible_config_file"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[6]", "name": "check inventory setup", "module": "command", "index": 6, "play_index": -1, "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "task taskfile:roles/set_inventory/tasks/main.yaml#task:[6]", "role": "set_inventory", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"inv_check": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[6]"}, "set_facts": {}, "loop": {}, "options": {"name": "check inventory setup", "tags": "set_inventory", "register": "inv_check", "failed_when": "inv_check.rc != 0"}, "module_options": "ansible-inventory --list", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: check inventory setup\n  tags: set_inventory\n  command: ansible-inventory --list\n  register: inv_check\n  failed_when: inv_check.rc != 0\n", "line_num_in_file": [38, 43], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[7]", "name": "Gather facts to re-read inventory after changes made to inventory", "module": "ansible.builtin.gather_facts", "index": 7, "play_index": -1, "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "task taskfile:roles/set_inventory/tasks/main.yaml#task:[7]", "role": "set_inventory", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Gather facts to re-read inventory after changes made to inventory", "tags": "set_inventory"}, "module_options": null, "executable": "ansible.builtin.gather_facts", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Gather facts to re-read inventory after changes made to inventory\n  tags: set_inventory\n  ansible.builtin.gather_facts:", "line_num_in_file": [44, 46], "resolved_name": "ansible.builtin.gather_facts", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "gather_facts", "fqcn": "ansible.builtin.gather_facts", "key": "module collection:ansible.builtin#module:ansible.builtin.gather_facts"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.gather_facts", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.gather_facts", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["parallel"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:set_inventory#taskfile:roles/set_inventory/tasks/main.yaml#task:[8]", "name": "Refresh inventory", "module": "meta", "index": 8, "play_index": -1, "defined_in": "roles/set_inventory/tasks/main.yaml", "local_key": "task taskfile:roles/set_inventory/tasks/main.yaml#task:[8]", "role": "set_inventory", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Refresh inventory", "tags": "set_inventory"}, "module_options": "refresh_inventory", "executable": "meta", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Refresh inventory\n  tags: set_inventory\n  meta: refresh_inventory", "line_num_in_file": [47, 50], "resolved_name": "ansible.builtin.meta", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "meta", "fqcn": "ansible.builtin.meta", "key": "module collection:ansible.builtin#module:ansible.builtin.meta"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.meta", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.meta", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["free_form"], "required_arg_keys": [{"key": "free_form", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[0]", "name": "Download ipxe script", "module": "shell", "index": 0, "play_index": -1, "defined_in": "roles/setup_for_agents_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[0]", "role": "setup_for_agents_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ipxe_script": "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Download ipxe script", "register": "ipxe_script"}, "module_options": "curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }} -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n", "line_num_in_file": [2, 6], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ipxe_script"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[1]", "name": "Create Installation directory", "module": "file", "index": 1, "play_index": -1, "defined_in": "roles/setup_for_agents_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[1]", "role": "setup_for_agents_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create Installation directory"}, "module_options": {"path": "/var/lib/libvirt/images/pxeboot", "state": "directory", "mode": "0755"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n", "line_num_in_file": [7, 12], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["ipxe_script"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[2]", "name": "Get URL for initrd", "module": "set_fact", "index": 2, "play_index": -1, "defined_in": "roles/setup_for_agents_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[2]", "role": "setup_for_agents_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"initrd_url": "{{ ipxe_script.stdout_lines[1].split(' ')[3] }}"}, "loop": {}, "options": {"name": "Get URL for initrd"}, "module_options": {"initrd_url": "{{ ipxe_script.stdout_lines[1].split(' ')[3] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get URL for initrd\n  set_fact:\n    initrd_url: \"{{ ipxe_script.stdout_lines[1].split(' ')[3] }}\"\n", "line_num_in_file": [13, 16], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["ipxe_script", "initrd_url"], "vars_used_in_target_task": ["ipxe_script.stdout_lines[1].split('')[3]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[3]", "name": "Download initrd.img", "module": "get_url", "index": 3, "play_index": -1, "defined_in": "roles/setup_for_agents_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[3]", "role": "setup_for_agents_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Download initrd.img"}, "module_options": {"url": "{{ initrd_url }}", "dest": "/var/lib/libvirt/images/pxeboot/initrd.img", "validate_certs": false}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Download initrd.img\n  get_url:\n    url: \"{{ initrd_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/initrd.img\n    validate_certs: false\n", "line_num_in_file": [17, 22], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "get_url", "fqcn": "ansible.builtin.get_url", "key": "module collection:ansible.builtin#module:ansible.builtin.get_url"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "{{ ipxe_script.stdout_lines[1].split(' ')[3] }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "ipxe_script.stdout_lines[1].split('')[3]"], "vars_defined_in_previous_tasks": ["ipxe_script", "initrd_url"], "vars_used_in_target_task": ["initrd_url"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[4]", "name": "Get URL for kernel.img", "module": "set_fact", "index": 4, "play_index": -1, "defined_in": "roles/setup_for_agents_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[4]", "role": "setup_for_agents_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"kernel_url": "{{ ipxe_script.stdout_lines[2].split(' ')[1] }}"}, "loop": {}, "options": {"name": "Get URL for kernel.img"}, "module_options": {"kernel_url": "{{ ipxe_script.stdout_lines[2].split(' ')[1] }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get URL for kernel.img\n  set_fact:\n    kernel_url: \"{{ ipxe_script.stdout_lines[2].split(' ')[1] }}\"\n", "line_num_in_file": [23, 26], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "ipxe_script.stdout_lines[1].split('')[3]", "initrd_url"], "vars_defined_in_previous_tasks": ["ipxe_script", "initrd_url", "kernel_url"], "vars_used_in_target_task": ["ipxe_script.stdout_lines[2].split('')[1]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:setup_for_agents_hypershift#taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[5]", "name": "Download kernel.img", "module": "get_url", "index": 5, "play_index": -1, "defined_in": "roles/setup_for_agents_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/setup_for_agents_hypershift/tasks/main.yaml#task:[5]", "role": "setup_for_agents_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Download kernel.img"}, "module_options": {"url": "{{ kernel_url }}", "dest": "/var/lib/libvirt/images/pxeboot/kernel.img", "validate_certs": false}, "executable": "get_url", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Download kernel.img\n  get_url:\n    url: \"{{ kernel_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/kernel.img\n    validate_certs: false", "line_num_in_file": [27, 32], "resolved_name": "ansible.builtin.get_url", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "get_url", "fqcn": "ansible.builtin.get_url", "key": "module collection:ansible.builtin#module:ansible.builtin.get_url"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.get_url", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.get_url", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "ciphers", "client_cert", "client_key", "decompress", "dest", "force", "force_basic_auth", "group", "headers", "http_agent", "mode", "owner", "selevel", "serole", "setype", "seuser", "timeout", "tmp_dest", "unredirected_headers", "unsafe_writes", "url", "url_password", "password", "url_username", "username", "use_gssapi", "use_netrc", "use_proxy", "validate_certs"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "url", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "url", "expected_type": "str", "unknown_type_value": "{{ ipxe_script.stdout_lines[2].split(' ')[1] }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name", "ipxe_script.stdout_lines[1].split('')[3]", "initrd_url", "ipxe_script.stdout_lines[2].split('')[1]"], "vars_defined_in_previous_tasks": ["ipxe_script", "initrd_url", "kernel_url"], "vars_used_in_target_task": ["kernel_url"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_add_config#taskfile:roles/ssh_add_config/tasks/main.yaml#task:[0]", "name": "Create ssh config file (or add to an exsting file) to if network mode is NAT", "module": "ansible.builtin.blockinfile", "index": 0, "play_index": -1, "defined_in": "roles/ssh_add_config/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_add_config/tasks/main.yaml#task:[0]", "role": "ssh_add_config", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create ssh config file (or add to an exsting file) to if network mode is NAT", "tags": "ssh_copy_id, ssh"}, "module_options": {"path": "~/.ssh/config", "backup": true, "create": true, "mode": "0644", "block": "Host {{ env.jumphost.name }} \n  HostName {{ env.jumphost.ip }}\n  User {{ env.jumphost.user }}\n  IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\nHost {{ env.bastion.networking.ip }}\n  HostName {{ env.bastion.networking.ip }} \n  User {{ env.bastion.access.user }}\n  IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\n  ProxyJump {{ env.jumphost.name }} \n"}, "executable": "ansible.builtin.blockinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create ssh config file (or add to an exsting file) to if network mode is NAT\n  tags: ssh_copy_id, ssh\n  ansible.builtin.blockinfile:\n    path: ~/.ssh/config\n    backup: true\n    create: true\n    mode: \"0644\"\n    block: |\n      Host {{ env.jumphost.name }} \n        HostName {{ env.jumphost.ip }}\n        User {{ env.jumphost.user }}\n        IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\n      Host {{ env.bastion.networking.ip }}\n        HostName {{ env.bastion.networking.ip }} \n        User {{ env.bastion.access.user }}\n        IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\n        ProxyJump {{ env.jumphost.name }} ", "line_num_in_file": [2, 19], "resolved_name": "ansible.builtin.blockinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "blockinfile", "fqcn": "ansible.builtin.blockinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.blockinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.blockinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.blockinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block", "content", "create", "group", "insertafter", "insertbefore", "marker", "marker_begin", "marker_end", "mode", "owner", "path", "dest", "destfile", "name", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "block", "value": "Host {{ env.jumphost.name }} \n  HostName {{ env.jumphost.ip }}\n  User {{ env.jumphost.user }}\n  IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\nHost {{ env.bastion.networking.ip }}\n  HostName {{ env.bastion.networking.ip }} \n  User {{ env.bastion.access.user }}\n  IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\n  ProxyJump {{ env.jumphost.name }} \n", "undefined_variables": ["env.jumphost.name", "env.jumphost.ip", "env.jumphost.user", "path_to_key_pair.split('.')[:-1]", "env.bastion.networking.ip", "env.bastion.access.user"]}], "unknown_type_values": [{"key": "block", "expected_type": "str", "unknown_type_value": "Host {{ env.jumphost.name }} \n  HostName {{ env.jumphost.ip }}\n  User {{ env.jumphost.user }}\n  IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\nHost {{ env.bastion.networking.ip }}\n  HostName {{ env.bastion.networking.ip }} \n  User {{ env.bastion.access.user }}\n  IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\n  ProxyJump {{ env.jumphost.name }} \n"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.jumphost.name", "env.jumphost.ip", "env.jumphost.user", "path_to_key_pair.split('.')[:-1]", "env.bastion.networking.ip", "env.bastion.access.user"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_agent#taskfile:roles/ssh_agent/tasks/main.yaml#task:[0]", "name": "Add ansible SSH key to ssh-agent", "module": "lineinfile", "index": 0, "play_index": -1, "defined_in": "roles/ssh_agent/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_agent/tasks/main.yaml#task:[0]", "role": "ssh_agent", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_agent_setup": "task role:ssh_agent#taskfile:roles/ssh_agent/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Add ansible SSH key to ssh-agent", "tags": "ssh_agent, ssh", "register": "ssh_agent_setup"}, "module_options": {"line": "eval $(ssh-agent) && ssh-add ~/.ssh/{{ env.ansible_key_name }}", "path": "~/.bash_profile"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add ansible SSH key to ssh-agent\n  tags: ssh_agent, ssh\n  lineinfile:\n    line: eval $(ssh-agent) && ssh-add ~/.ssh/{{ env.ansible_key_name }}\n    path: ~/.bash_profile\n  register: ssh_agent_setup\n", "line_num_in_file": [2, 8], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "eval $(ssh-agent) && ssh-add ~/.ssh/{{ env.ansible_key_name }}", "undefined_variables": ["env.ansible_key_name"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "eval $(ssh-agent) && ssh-add ~/.ssh/{{ env.ansible_key_name }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ssh_agent_setup"], "vars_used_in_target_task": ["env.ansible_key_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_agent#taskfile:roles/ssh_agent/tasks/main.yaml#task:[1]", "name": "Print results from setting up SSH agent", "module": "debug", "index": 1, "play_index": -1, "defined_in": "roles/ssh_agent/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_agent/tasks/main.yaml#task:[1]", "role": "ssh_agent", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print results from setting up SSH agent", "tags": "ssh_agent, ssh"}, "module_options": {"var": "ssh_agent_setup"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print results from setting up SSH agent\n  tags: ssh_agent, ssh\n  debug:\n    var: ssh_agent_setup", "line_num_in_file": [9, 13], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name"], "vars_defined_in_previous_tasks": ["ssh_agent_setup"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[0]", "name": "Load in variables", "module": "include_vars", "index": 0, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[0]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Load in variables", "tags": "ssh_copy_id, ssh"}, "module_options": "{{ inventory_dir }}/group_vars/all.yaml", "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n", "line_num_in_file": [2, 5], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["inventory_dir"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[1]", "name": "Delete SSH key from known hosts if it already exists for idempotency", "module": "lineinfile", "index": 1, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[1]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete SSH key from known hosts if it already exists for idempotency", "tags": "ssh_copy_id, ssh"}, "module_options": {"path": "~/.ssh/known_hosts", "search_string": "{{ ssh_target[0] }}", "state": "absent"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n", "line_num_in_file": [6, 12], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "search_string", "value": "{{ ssh_target[0] }}", "undefined_variables": ["ssh_target[0]"]}], "unknown_type_values": [{"key": "search_string", "expected_type": "str", "unknown_type_value": "{{ ssh_target[0] }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["ssh_target[0]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[2]", "name": "Use template file to create expect script", "module": "template", "index": 2, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[2]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Use template file to create expect script", "tags": "ssh_copy_id, ssh", "delegate_to": "127.0.0.1"}, "module_options": {"src": "ssh-copy-id.exp.j2", "dest": "{{ role_path }}/files/ssh-copy-id-expect-pass.exp", "force": true}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n", "line_num_in_file": [13, 20], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "{{ role_path }}/files/ssh-copy-id-expect-pass.exp"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[3]", "name": "Copy expect file to jumphost first, if not running on localhost.", "module": "copy", "index": 3, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[3]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Copy expect file to jumphost first, if not running on localhost.", "tags": "ssh_copy_id, ssh", "when": "inventory_hostname != '127.0.0.1'"}, "module_options": {"src": "{{ role_path }}/files/ssh-copy-id-expect-pass.exp", "dest": "~/.ssh/ssh-copy-id-expect-pass.exp"}, "executable": "copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n", "line_num_in_file": [21, 27], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.copy", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.copy", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "content", "decrypt", "dest", "directory_mode", "follow", "force", "group", "local_follow", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "dest", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "src", "expected_type": "str", "unknown_type_value": "{{ role_path }}/files/ssh-copy-id-expect-pass.exp"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[4]", "name": "Print results of copying ssh id to remote host", "module": "debug", "index": 4, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[4]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print results of copying ssh id to remote host", "tags": "ssh_copy_id, ssh", "when": "inventory_hostname != '127.0.0.1'"}, "module_options": {"var": "ssh_copy"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n", "line_num_in_file": [28, 33], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[5]", "name": "Copy SSH ID from controller to remote host with pre-provided password.", "module": "command", "index": 5, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[5]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_copy": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[5]"}, "set_facts": {}, "loop": {}, "options": {"name": "Copy SSH ID from controller to remote host with pre-provided password.", "tags": "ssh_copy_id, ssh", "register": "ssh_copy", "when": "inventory_hostname == '127.0.0.1'"}, "module_options": "expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n", "line_num_in_file": [34, 39], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["ssh_copy"], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[6]", "name": "Print results of copying ssh id to remote host", "module": "debug", "index": 6, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[6]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print results of copying ssh id to remote host", "tags": "ssh_copy_id, ssh", "when": "inventory_hostname == '127.0.0.1'"}, "module_options": {"var": "ssh_copy"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n", "line_num_in_file": [40, 45], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["ssh_copy"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[7]", "name": "Copy SSH ID from jumphost to remote host with pre-provided password.", "module": "command", "index": 7, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[7]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_copy": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[7]"}, "set_facts": {}, "loop": {}, "options": {"name": "Copy SSH ID from jumphost to remote host with pre-provided password.", "tags": "ssh_copy_id, ssh", "register": "ssh_copy", "when": "inventory_hostname != '127.0.0.1'"}, "module_options": "expect ~/.ssh/ssh-copy-id-expect-pass.exp", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n", "line_num_in_file": [46, 51], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["ssh_copy"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[8]", "name": "Print results of copying ssh id to remote host", "module": "debug", "index": 8, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[8]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print results of copying ssh id to remote host", "tags": "ssh_copy_id, ssh", "when": "inventory_hostname != '127.0.0.1'"}, "module_options": {"var": "ssh_copy"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n", "line_num_in_file": [28, 33], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["ssh_copy"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[9]", "name": "Delete templated expect script on controller.", "module": "file", "index": 9, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[9]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete templated expect script on controller.", "tags": "ssh_copy_id, ssh", "delegate_to": "127.0.0.1"}, "module_options": {"path": "{{ role_path }}/files/ssh-copy-id-expect-pass.exp", "state": "absent"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete templated expect script on controller.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  delegate_to: 127.0.0.1\n", "line_num_in_file": [58, 64], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ role_path }}/files/ssh-copy-id-expect-pass.exp"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["ssh_copy"], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[10]", "name": "Delete templated expect script on jumphost.", "module": "file", "index": 10, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[10]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Delete templated expect script on jumphost.", "tags": "ssh_copy_id, ssh", "when": "inventory_hostname != '127.0.0.1'"}, "module_options": {"path": "{{ role_path }}/files/ssh-copy-id-expect-pass.exp", "state": "absent"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Delete templated expect script on jumphost.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  when: inventory_hostname != '127.0.0.1'\n", "line_num_in_file": [65, 71], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ role_path }}/files/ssh-copy-id-expect-pass.exp"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["ssh_copy"], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_copy_id#taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[11]", "name": "Ensure ssh-copy-id files folder exists for future runs.", "module": "file", "index": 11, "play_index": -1, "defined_in": "roles/ssh_copy_id/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_copy_id/tasks/main.yaml#task:[11]", "role": "ssh_copy_id", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure ssh-copy-id files folder exists for future runs.", "tags": "ssh_copy_id, ssh", "delegate_to": "127.0.0.1"}, "module_options": {"path": "{{ role_path }}/files/", "state": "directory"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Ensure ssh-copy-id files folder exists for future runs.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/\"\n    state: directory\n  delegate_to: 127.0.0.1", "line_num_in_file": [72, 78], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ role_path }}/files/"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["ssh_copy"], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[0]", "name": "Check to see if local SSH directory exists", "module": "stat", "index": 0, "play_index": -1, "defined_in": "roles/ssh_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[0]", "role": "ssh_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_directory_exists_check": "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check to see if local SSH directory exists", "tags": "ssh_key_gen, ssh", "register": "ssh_directory_exists_check"}, "module_options": {"path": "~/.ssh"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check to see if local SSH directory exists\n  tags: ssh_key_gen, ssh\n  stat:\n    path: ~/.ssh\n  register: ssh_directory_exists_check\n", "line_num_in_file": [2, 7], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "stat", "fqcn": "ansible.builtin.stat", "key": "module collection:ansible.builtin#module:ansible.builtin.stat"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[1]", "name": "Create SSH local directory if it doesn't already exist", "module": "file", "index": 1, "play_index": -1, "defined_in": "roles/ssh_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[1]", "role": "ssh_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_directory_creation": "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Create SSH local directory if it doesn't already exist", "tags": "ssh_key_gen, ssh", "register": "ssh_directory_creation", "when": "ssh_directory_exists_check.stat.exists == false"}, "module_options": {"path": "~/.ssh", "state": "directory", "mode": "700"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create SSH local directory if it doesn't already exist\n  tags: ssh_key_gen, ssh\n  file:\n    path: ~/.ssh\n    state: directory\n    mode: \"700\"\n  register: ssh_directory_creation\n  when: ssh_directory_exists_check.stat.exists == false\n", "line_num_in_file": [8, 16], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check", "ssh_directory_creation"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[2]", "name": "Generate an OpenSSH keypair with the default values (4096 bits, RSA)", "module": "community.crypto.openssh_keypair", "index": 2, "play_index": -1, "defined_in": "roles/ssh_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[2]", "role": "ssh_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_key_creation": "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Generate an OpenSSH keypair with the default values (4096 bits, RSA)", "tags": "ssh_key_gen, ssh", "register": "ssh_key_creation"}, "module_options": {"path": "~/.ssh/{{ env.ansible_key_name }}", "passphrase": "", "comment": "Ansible-OpenShift-Provisioning SSH key", "regenerate": "full_idempotence"}, "executable": "community.crypto.openssh_keypair", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Generate an OpenSSH keypair with the default values (4096 bits, RSA)\n  tags: ssh_key_gen, ssh\n  community.crypto.openssh_keypair:\n    path: ~/.ssh/{{ env.ansible_key_name }}\n    passphrase: \"\"\n    comment: Ansible-OpenShift-Provisioning SSH key\n    regenerate: full_idempotence\n  register: ssh_key_creation\n", "line_num_in_file": [17, 25], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.crypto.openssh_keypair", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation"], "vars_used_in_target_task": ["env.ansible_key_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[3]", "name": "Print results of ssh key pair creation", "module": "debug", "index": 3, "play_index": -1, "defined_in": "roles/ssh_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[3]", "role": "ssh_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print results of ssh key pair creation", "tags": "ssh_key_gen, ssh"}, "module_options": {"var": "ssh_key_creation"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print results of ssh key pair creation\n  tags: ssh_key_gen, ssh\n  debug:\n    var: ssh_key_creation\n", "line_num_in_file": [26, 30], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name"], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_key_gen#taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[4]", "name": "Save path to key pair for use in ssh-copy-id role", "module": "lineinfile", "index": 4, "play_index": -1, "defined_in": "roles/ssh_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_key_gen/tasks/main.yaml#task:[4]", "role": "ssh_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Save path to key pair for use in ssh-copy-id role", "tags": "ssh_key_gen, ssh"}, "module_options": {"search_string": "path_to_key_pair:", "line": "path_to_key_pair: {{ ssh_key_creation.filename }}.pub", "path": "{{ inventory_dir }}/group_vars/all.yaml"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Save path to key pair for use in ssh-copy-id role\n  tags: ssh_key_gen, ssh\n  lineinfile:\n    search_string: \"path_to_key_pair:\"\n    line: \"path_to_key_pair: {{ ssh_key_creation.filename }}.pub\"\n    path: \"{{ inventory_dir }}/group_vars/all.yaml\"", "line_num_in_file": [31, 37], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "line", "value": "path_to_key_pair: {{ ssh_key_creation.filename }}.pub", "undefined_variables": ["ssh_key_creation.filename"]}], "unknown_type_values": [{"key": "line", "expected_type": "str", "unknown_type_value": "path_to_key_pair: {{ ssh_key_creation.filename }}.pub"}, {"key": "path", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/group_vars/all.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name"], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation"], "vars_used_in_target_task": ["ssh_key_creation.filename", "inventory_dir"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[0]", "name": "Check to see if local SSH directory exists", "module": "stat", "index": 0, "play_index": -1, "defined_in": "roles/ssh_ocp_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[0]", "role": "ssh_ocp_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_directory_exists_check": "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check to see if local SSH directory exists", "tags": "ssh_ocp_key_gen", "register": "ssh_directory_exists_check"}, "module_options": {"path": "/root/.ssh"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Check to see if local SSH directory exists\n  tags: ssh_ocp_key_gen\n  stat:\n    path: /root/.ssh\n  register: ssh_directory_exists_check\n", "line_num_in_file": [2, 7], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "stat", "fqcn": "ansible.builtin.stat", "key": "module collection:ansible.builtin#module:ansible.builtin.stat"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[1]", "name": "Create SSH local directory if it doesn't already exist", "module": "file", "index": 1, "play_index": -1, "defined_in": "roles/ssh_ocp_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[1]", "role": "ssh_ocp_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_directory_creation": "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Create SSH local directory if it doesn't already exist", "tags": "ssh_ocp_key_gen", "register": "ssh_directory_creation", "when": "ssh_directory_exists_check.stat.exists == false"}, "module_options": {"path": "/root/.ssh", "state": "directory", "mode": "0700"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create SSH local directory if it doesn't already exist\n  tags: ssh_ocp_key_gen\n  file:\n    path: /root/.ssh\n    state: directory\n    mode: \"0700\"\n  register: ssh_directory_creation\n  when: ssh_directory_exists_check.stat.exists == false\n", "line_num_in_file": [8, 16], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check", "ssh_directory_creation"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[2]", "name": "Generate an OpenSSH keypair with the default values (4096 bits, rsa) and encrypted private key.", "module": "community.crypto.openssh_keypair", "index": 2, "play_index": -1, "defined_in": "roles/ssh_ocp_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[2]", "role": "ssh_ocp_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ssh_ocp": "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Generate an OpenSSH keypair with the default values (4096 bits, rsa) and encrypted private key.", "tags": "ssh_ocp_key_gen", "register": "ssh_ocp"}, "module_options": {"path": "/root/.ssh/id_rsa", "backend": "opensshbin", "owner": "root", "passphrase": "", "comment": "{{ env.ocp_ssh_key_comment }}", "regenerate": "full_idempotence"}, "executable": "community.crypto.openssh_keypair", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Generate an OpenSSH keypair with the default values (4096 bits, rsa) and encrypted private key.\n  tags: ssh_ocp_key_gen\n  community.crypto.openssh_keypair:\n    path: /root/.ssh/id_rsa\n    backend: opensshbin\n    owner: root\n    passphrase: \"\"\n    comment: \"{{ env.ocp_ssh_key_comment }}\"\n    regenerate: full_idempotence\n  register: ssh_ocp\n", "line_num_in_file": [17, 27], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.crypto.openssh_keypair", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check", "ssh_directory_creation", "ssh_ocp"], "vars_used_in_target_task": ["env.ocp_ssh_key_comment"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[3]", "name": "Print results of SSH key generation", "module": "debug", "index": 3, "play_index": -1, "defined_in": "roles/ssh_ocp_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[3]", "role": "ssh_ocp_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print results of SSH key generation", "tags": "ssh_ocp_key_gen", "when": "ssh_ocp.changed == true"}, "module_options": {"var": "ssh_ocp.public_key"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print results of SSH key generation\n  tags: ssh_ocp_key_gen\n  debug:\n    var: ssh_ocp.public_key\n  when: ssh_ocp.changed == true\n", "line_num_in_file": [28, 33], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ocp_ssh_key_comment"], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check", "ssh_directory_creation", "ssh_ocp"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[4]", "name": "Set SSH key permissions", "module": "command", "index": 4, "play_index": -1, "defined_in": "roles/ssh_ocp_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[4]", "role": "ssh_ocp_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["id_rsa", "id_rsa.pub"]}, "options": {"name": "Set SSH key permissions", "tags": "ssh_ocp_key_gen", "loop": ["id_rsa", "id_rsa.pub"]}, "module_options": "chmod 600  /root/.ssh/{{ item }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set SSH key permissions\n  tags: ssh_ocp_key_gen\n  command: chmod 600  /root/.ssh/{{ item }}\n  loop:\n    - id_rsa\n    - id_rsa.pub\n", "line_num_in_file": [34, 40], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ocp_ssh_key_comment"], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check", "ssh_directory_creation", "ssh_ocp"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:ssh_ocp_key_gen#taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[5]", "name": "Set SSH key ownership", "module": "command", "index": 5, "play_index": -1, "defined_in": "roles/ssh_ocp_key_gen/tasks/main.yaml", "local_key": "task taskfile:roles/ssh_ocp_key_gen/tasks/main.yaml#task:[5]", "role": "ssh_ocp_key_gen", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["id_rsa", "id_rsa.pub"]}, "options": {"name": "Set SSH key ownership", "tags": "ssh_ocp_key_gen", "loop": ["id_rsa", "id_rsa.pub"]}, "module_options": "chown root:root /root/.ssh/{{ item }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Set SSH key ownership\n  tags: ssh_ocp_key_gen\n  command: chown root:root /root/.ssh/{{ item }}\n  loop:\n    - id_rsa\n    - id_rsa.pub", "line_num_in_file": [41, 47], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ocp_ssh_key_comment", "item"], "vars_defined_in_previous_tasks": ["ssh_directory_exists_check", "ssh_directory_creation", "ssh_ocp"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[0]", "name": "Create directory for KVM host's RHEL configuration files for installation.", "module": "file", "index": 0, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[0]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create directory for KVM host's RHEL configuration files for installation.", "tags": "update_cfgs"}, "module_options": {"path": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}", "state": "directory"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create directory for KVM host's RHEL configuration files for installation.\n  tags: update_cfgs\n  file:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}\"\n    state: directory\n", "line_num_in_file": [4, 9], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}", "undefined_variables": ["env.file_server.cfgs_dir", "networking.hostname"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "networking.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[1]", "name": "Clean-up old cfg files.", "module": "shell", "index": 1, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[1]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Clean-up old cfg files.", "tags": "update_cfgs"}, "module_options": "rm -rf {{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.*", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Clean-up old cfg files.\n  tags: update_cfgs\n  shell: rm -rf {{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.*\n\n### Templating out RHEL configuration files for the KVM host to pull from the FTP server\n", "line_num_in_file": [10, 15], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname"], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "networking.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[2]", "name": "Split iso_mount_dir variable on / for use in template", "module": "set_fact", "index": 2, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[2]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"ins_dir": "{{ env.file_server.iso_mount_dir.split('/') }}"}, "loop": {}, "options": {"name": "Split iso_mount_dir variable on / for use in template", "tags": "update_cfgs"}, "module_options": {"ins_dir": "{{ env.file_server.iso_mount_dir.split('/') }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Split iso_mount_dir variable on / for use in template\n  tags: update_cfgs\n  set_fact:\n    ins_dir: \"{{ env.file_server.iso_mount_dir.split('/') }}\"\n", "line_num_in_file": [16, 20], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname"], "vars_defined_in_previous_tasks": ["ins_dir"], "vars_used_in_target_task": ["env.file_server.iso_mount_dir.split('/')"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[3]", "name": "Template RHEL configuration files out to FTP server.", "module": "template", "index": 3, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[3]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["kvm_host.prm", "kvm_host.ins", "kvm_host.cfg"]}, "options": {"name": "Template RHEL configuration files out to FTP server.", "tags": "update_cfgs", "loop": ["kvm_host.prm", "kvm_host.ins", "kvm_host.cfg"]}, "module_options": {"src": "{{ item }}.j2", "dest": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/{{ item }}"}, "executable": "template", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Template RHEL configuration files out to FTP server.\n  tags: update_cfgs\n  template:\n    src: \"{{ item }}.j2\"\n    dest: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/{{ item }}\"\n  loop:\n    - kvm_host.prm\n    - kvm_host.ins\n    - kvm_host.cfg\n\n### Updating additional parameters in RHEL configuration files that are more variable.\n", "line_num_in_file": [21, 32], "resolved_name": "ansible.builtin.template", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "template", "fqcn": "ansible.builtin.template", "key": "module collection:ansible.builtin#module:ansible.builtin.template"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.template", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.template", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block_end_string", "block_start_string", "comment_end_string", "comment_start_string", "dest", "follow", "force", "group", "lstrip_blocks", "mode", "newline_sequence", "output_encoding", "owner", "selevel", "serole", "setype", "seuser", "src", "trim_blocks", "unsafe_writes", "validate", "variable_end_string", "variable_start_string"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "dest", "value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/{{ item }}", "undefined_variables": ["env.file_server.cfgs_dir", "networking.hostname"]}], "unknown_type_values": [{"key": "dest", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.prm"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')"], "vars_defined_in_previous_tasks": ["ins_dir"], "vars_used_in_target_task": ["item", "env.file_server.cfgs_dir", "networking.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[4]", "name": "Add FCP storage boot drive triplet info to KVM host's RHEL prm configuration file.", "module": "lineinfile", "index": 4, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[4]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "start=0 end={{(lpar.storage_group_1.storage_wwpn | length) - 1}} stride=1"}, "options": {"name": "Add FCP storage boot drive triplet info to KVM host's RHEL prm configuration file.", "tags": "update_cfgs", "with_sequence": "start=0 end={{(lpar.storage_group_1.storage_wwpn | length) - 1}} stride=1", "loop_control": {"extended": true, "index_var": "i"}}, "module_options": {"path": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.prm", "insertafter": "inst.repo", "line": "rd.zfcp=0.0.{{ lpar.storage_group_1.dev_num }},0x{{ lpar.storage_group_1.storage_wwpn[i] }},0x0000000000000000"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add FCP storage boot drive triplet info to KVM host's RHEL prm configuration file.\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.prm\"\n    insertafter: inst.repo\n    line: rd.zfcp=0.0.{{ lpar.storage_group_1.dev_num }},0x{{ lpar.storage_group_1.storage_wwpn[i] }},0x0000000000000000\n  with_sequence: start=0 end={{(lpar.storage_group_1.storage_wwpn | length) - 1}} stride=1\n  loop_control:\n    extended: true\n    index_var: i\n", "line_num_in_file": [33, 43], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.prm", "undefined_variables": ["env.file_server.cfgs_dir", "networking.hostname"]}, {"key": "line", "value": "rd.zfcp=0.0.{{ lpar.storage_group_1.dev_num }},0x{{ lpar.storage_group_1.storage_wwpn[i] }},0x0000000000000000", "undefined_variables": ["lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.prm"}, {"key": "line", "expected_type": "str", "unknown_type_value": "rd.zfcp=0.0.{{ lpar.storage_group_1.dev_num }},0x{{ lpar.storage_group_1.storage_wwpn[i] }},0x0000000000000000"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')", "item"], "vars_defined_in_previous_tasks": ["ins_dir"], "vars_used_in_target_task": ["item", "(lpar.storage_group_1.storage_wwpn", "env.file_server.cfgs_dir", "networking.hostname", "lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[5]", "name": "Create list from nic1 device number, incremented twice for input in KVM host prm file for boot", "module": "set_fact", "index": 5, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[5]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"nic_child_list": ["{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int ) }}", "{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int + 1 ) }}", "{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int + 2 ) }}"]}, "loop": {}, "options": {"name": "Create list from nic1 device number, incremented twice for input in KVM host prm file for boot"}, "module_options": {"nic_child_list": ["{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int ) }}", "{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int + 1 ) }}", "{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int + 2 ) }}"]}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create list from nic1 device number, incremented twice for input in KVM host prm file for boot\n  set_fact:\n    nic_child_list:\n      - \"{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int ) }}\"\n      - \"{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int + 1 ) }}\"\n      - \"{{ '%04x' % ( lpar.networking.nic.card1.dev_num | int + 2 ) }}\"\n", "line_num_in_file": [44, 50], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')", "item", "(lpar.storage_group_1.storage_wwpn", "lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]"], "vars_defined_in_previous_tasks": ["ins_dir", "nic_child_list"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[6]", "name": "Add network device information to KVM host's RHEL prm file for boot", "module": "lineinfile", "index": 6, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[6]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add network device information to KVM host's RHEL prm file for boot"}, "module_options": {"path": "{{env.file_server.cfgs_dir}}/{{ networking.hostname }}/kvm_host.prm", "insertafter": "ro ramdisk_size", "line": "rd.znet=qeth,0.0.{{nic_child_list[0]}},0.0.{{nic_child_list[1]}},0.0.{{nic_child_list[2]}},layer2=1,portno={{ lpar.networking.nic.card1.port }}"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add network device information to KVM host's RHEL prm file for boot\n  lineinfile:\n    path: \"{{env.file_server.cfgs_dir}}/{{ networking.hostname }}/kvm_host.prm\"\n    insertafter: ro ramdisk_size\n    line: rd.znet=qeth,0.0.{{nic_child_list[0]}},0.0.{{nic_child_list[1]}},0.0.{{nic_child_list[2]}},layer2=1,portno={{ lpar.networking.nic.card1.port }}\n", "line_num_in_file": [51, 56], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{env.file_server.cfgs_dir}}/{{ networking.hostname }}/kvm_host.prm", "undefined_variables": ["env.file_server.cfgs_dir", "networking.hostname"]}, {"key": "line", "value": "rd.znet=qeth,0.0.{{nic_child_list[0]}},0.0.{{nic_child_list[1]}},0.0.{{nic_child_list[2]}},layer2=1,portno={{ lpar.networking.nic.card1.port }}", "undefined_variables": ["nic_child_list[0]", "nic_child_list[1]", "nic_child_list[2]", "lpar.networking.nic.card1.port"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{env.file_server.cfgs_dir}}/{{ networking.hostname }}/kvm_host.prm"}, {"key": "line", "expected_type": "str", "unknown_type_value": "rd.znet=qeth,0.0.{{nic_child_list[0]}},0.0.{{nic_child_list[1]}},0.0.{{nic_child_list[2]}},layer2=1,portno={{ lpar.networking.nic.card1.port }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')", "item", "(lpar.storage_group_1.storage_wwpn", "lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]"], "vars_defined_in_previous_tasks": ["ins_dir", "nic_child_list"], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "networking.hostname", "nic_child_list[0]", "nic_child_list[1]", "nic_child_list[2]", "lpar.networking.nic.card1.port"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[7]", "name": "Create hash from KVM host root password to input in kickstart file", "module": "shell", "index": 7, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[7]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"root_pass_hash": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[7]"}, "set_facts": {}, "loop": {}, "options": {"name": "Create hash from KVM host root password to input in kickstart file", "tags": "update_cfgs", "register": "root_pass_hash"}, "module_options": "echo \"{{ lpar.access.root_pass }}\" | openssl passwd -6 -in -", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create hash from KVM host root password to input in kickstart file\n  tags: update_cfgs\n  shell: echo \"{{ lpar.access.root_pass }}\" | openssl passwd -6 -in -\n  register: root_pass_hash\n", "line_num_in_file": [57, 61], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')", "item", "(lpar.storage_group_1.storage_wwpn", "lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]", "nic_child_list[0]", "nic_child_list[1]", "nic_child_list[2]", "lpar.networking.nic.card1.port"], "vars_defined_in_previous_tasks": ["ins_dir", "nic_child_list", "root_pass_hash"], "vars_used_in_target_task": ["lpar.access.root_pass"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[8]", "name": "Add hashed root password to KVM host's RHEL kickstart config file", "module": "lineinfile", "index": 8, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[8]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add hashed root password to KVM host's RHEL kickstart config file", "tags": "update_cfgs"}, "module_options": {"path": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg", "insertafter": "Root password", "line": "rootpw --iscrypted {{ root_pass_hash.stdout }}"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add hashed root password to KVM host's RHEL kickstart config file\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg\"\n    insertafter: Root password\n    line: rootpw --iscrypted {{ root_pass_hash.stdout }}\n", "line_num_in_file": [62, 68], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg", "undefined_variables": ["env.file_server.cfgs_dir", "networking.hostname"]}, {"key": "line", "value": "rootpw --iscrypted {{ root_pass_hash.stdout }}", "undefined_variables": ["root_pass_hash.stdout"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg"}, {"key": "line", "expected_type": "str", "unknown_type_value": "rootpw --iscrypted {{ root_pass_hash.stdout }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')", "item", "(lpar.storage_group_1.storage_wwpn", "lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]", "nic_child_list[0]", "nic_child_list[1]", "nic_child_list[2]", "lpar.networking.nic.card1.port", "lpar.access.root_pass"], "vars_defined_in_previous_tasks": ["ins_dir", "nic_child_list", "root_pass_hash"], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "networking.hostname", "root_pass_hash.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[9]", "name": "Create hash from KVM user password to input in kickstart file", "module": "shell", "index": 9, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[9]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"user_pass_hash": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[9]"}, "set_facts": {}, "loop": {}, "options": {"name": "Create hash from KVM user password to input in kickstart file", "tags": "update_cfgs", "register": "user_pass_hash"}, "module_options": "echo \"{{ lpar.access.pass }}\" | openssl passwd -6 -in -", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Create hash from KVM user password to input in kickstart file\n  tags: update_cfgs\n  shell: echo \"{{ lpar.access.pass }}\" | openssl passwd -6 -in -\n  register: user_pass_hash\n", "line_num_in_file": [69, 73], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')", "item", "(lpar.storage_group_1.storage_wwpn", "lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]", "nic_child_list[0]", "nic_child_list[1]", "nic_child_list[2]", "lpar.networking.nic.card1.port", "lpar.access.root_pass", "root_pass_hash.stdout"], "vars_defined_in_previous_tasks": ["ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": ["lpar.access.pass"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[10]", "name": "Add hashed user password to KVM host's RHEL kickstart config file", "module": "lineinfile", "index": 10, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[10]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add hashed user password to KVM host's RHEL kickstart config file", "tags": "update_cfgs"}, "module_options": {"path": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg", "insertafter": "Users and Groups Definitions", "line": "user --groups=wheel,kvm,libvirt --name={{ ansible_user }} --password={{ user_pass_hash.stdout }} --iscrypted"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add hashed user password to KVM host's RHEL kickstart config file\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg\"\n    insertafter: Users and Groups Definitions\n    line: user --groups=wheel,kvm,libvirt --name={{ ansible_user }} --password={{ user_pass_hash.stdout }} --iscrypted\n", "line_num_in_file": [74, 80], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg", "undefined_variables": ["env.file_server.cfgs_dir", "networking.hostname"]}, {"key": "line", "value": "user --groups=wheel,kvm,libvirt --name={{ ansible_user }} --password={{ user_pass_hash.stdout }} --iscrypted", "undefined_variables": ["user_pass_hash.stdout"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg"}, {"key": "line", "expected_type": "str", "unknown_type_value": "user --groups=wheel,kvm,libvirt --name={{ ansible_user }} --password={{ user_pass_hash.stdout }} --iscrypted"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')", "item", "(lpar.storage_group_1.storage_wwpn", "lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]", "nic_child_list[0]", "nic_child_list[1]", "nic_child_list[2]", "lpar.networking.nic.card1.port", "lpar.access.root_pass", "root_pass_hash.stdout", "lpar.access.pass"], "vars_defined_in_previous_tasks": ["ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "networking.hostname", "ansible_user", "user_pass_hash.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[11]", "name": "Add network information in KVM hosts's RHEL kickstart file when there is only one network card defined.", "module": "lineinfile", "index": 11, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[11]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add network information in KVM hosts's RHEL kickstart file when there is only one network card defined.", "tags": "update_cfgs", "when": "lpar.networking.nic.card2 is not defined"}, "module_options": {"path": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg", "insertafter": "Network information", "line": "network  --bootproto=static --device={{ networking.device1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1 }} {{ ('--nameserver=' + networking.nameserver2) if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{ networking.hostname }}"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add network information in KVM hosts's RHEL kickstart file when there is only one network card defined.\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg\"\n    insertafter: Network information\n    line: network  --bootproto=static --device={{ networking.device1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1\n      }} {{ ('--nameserver=' + networking.nameserver2) if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{\n      networking.hostname }}\n  when: lpar.networking.nic.card2 is not defined\n", "line_num_in_file": [81, 90], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg", "undefined_variables": ["env.file_server.cfgs_dir", "networking.hostname"]}, {"key": "line", "value": "network  --bootproto=static --device={{ networking.device1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1 }} {{ ('--nameserver=' + networking.nameserver2) if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{ networking.hostname }}", "undefined_variables": ["networking.hostname", "networking.device1", "networking.gateway", "networking.ip", "networking.nameserver1", "networking.subnetmask"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg"}, {"key": "line", "expected_type": "str", "unknown_type_value": "network  --bootproto=static --device={{ networking.device1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1 }} {{ ('--nameserver=' + networking.nameserver2) if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{ networking.hostname }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')", "item", "(lpar.storage_group_1.storage_wwpn", "lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]", "nic_child_list[0]", "nic_child_list[1]", "nic_child_list[2]", "lpar.networking.nic.card1.port", "lpar.access.root_pass", "root_pass_hash.stdout", "lpar.access.pass", "ansible_user", "user_pass_hash.stdout"], "vars_defined_in_previous_tasks": ["ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "networking.hostname", "networking.device1", "networking.gateway", "networking.ip", "networking.nameserver1", "('--nameserver='+networking.nameserver2)ifnetworking.nameserver2isdefinedelse''", "networking.subnetmask"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_cfgs#taskfile:roles/update_cfgs/tasks/main.yaml#task:[12]", "name": "Add network information in KVM hosts's RHEL kickstart file when there are two network cards defined.", "module": "lineinfile", "index": 12, "play_index": -1, "defined_in": "roles/update_cfgs/tasks/main.yaml", "local_key": "task taskfile:roles/update_cfgs/tasks/main.yaml#task:[12]", "role": "update_cfgs", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add network information in KVM hosts's RHEL kickstart file when there are two network cards defined.", "tags": "update_cfgs", "when": "lpar.networking.nic.card2.name is defined"}, "module_options": {"path": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg", "insertafter": "Network information", "line": "network  --bootproto=static --device={{ networking.device1 }} --bondslaves={{ lpar.networking.nic.card1.name }},{{ lpar.networking.nic.card2.name }}  --bondopts=mode=active-backup;primary={{ lpar.networking.nic.card1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1 }} {{ ('--nameserver=' + networking.nameserver2) if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{ networking.hostname }}"}, "executable": "lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Add network information in KVM hosts's RHEL kickstart file when there are two network cards defined.\n  tags: update_cfgs\n  lineinfile:\n    path: \"{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg\"\n    insertafter: Network information\n    line: network  --bootproto=static --device={{ networking.device1 }} --bondslaves={{ lpar.networking.nic.card1.name }},{{ lpar.networking.nic.card2.name }}  --bondopts=mode=active-backup;primary={{\n      lpar.networking.nic.card1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1 }} {{ ('--nameserver=' + networking.nameserver2)\n      if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{ networking.hostname }}\n  when: lpar.networking.nic.card2.name is defined", "line_num_in_file": [91, 100], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg", "undefined_variables": ["env.file_server.cfgs_dir", "networking.hostname"]}, {"key": "line", "value": "network  --bootproto=static --device={{ networking.device1 }} --bondslaves={{ lpar.networking.nic.card1.name }},{{ lpar.networking.nic.card2.name }}  --bondopts=mode=active-backup;primary={{ lpar.networking.nic.card1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1 }} {{ ('--nameserver=' + networking.nameserver2) if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{ networking.hostname }}", "undefined_variables": ["networking.hostname", "networking.device1", "lpar.networking.nic.card1.name", "lpar.networking.nic.card2.name", "lpar.networking.nic.card1", "networking.gateway", "networking.ip", "networking.nameserver1", "networking.subnetmask"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ env.file_server.cfgs_dir }}/{{ networking.hostname }}/kvm_host.cfg"}, {"key": "line", "expected_type": "str", "unknown_type_value": "network  --bootproto=static --device={{ networking.device1 }} --bondslaves={{ lpar.networking.nic.card1.name }},{{ lpar.networking.nic.card2.name }}  --bondopts=mode=active-backup;primary={{ lpar.networking.nic.card1 }} --gateway={{ networking.gateway }} --ip={{ networking.ip }} --nameserver={{ networking.nameserver1 }} {{ ('--nameserver=' + networking.nameserver2) if networking.nameserver2 is defined else '' }} --netmask={{ networking.subnetmask }} --noipv6 --activate --hostname={{ networking.hostname }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.file_server.cfgs_dir", "networking.hostname", "env.file_server.iso_mount_dir.split('/')", "item", "(lpar.storage_group_1.storage_wwpn", "lpar.storage_group_1.dev_num", "lpar.storage_group_1.storage_wwpn[i]", "nic_child_list[0]", "nic_child_list[1]", "nic_child_list[2]", "lpar.networking.nic.card1.port", "lpar.access.root_pass", "root_pass_hash.stdout", "lpar.access.pass", "ansible_user", "user_pass_hash.stdout", "networking.device1", "networking.gateway", "networking.ip", "networking.nameserver1", "('--nameserver='+networking.nameserver2)ifnetworking.nameserver2isdefinedelse''", "networking.subnetmask"], "vars_defined_in_previous_tasks": ["ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": ["env.file_server.cfgs_dir", "networking.hostname", "networking.device1", "lpar.networking.nic.card1.name", "lpar.networking.nic.card2.name", "lpar.networking.nic.card1", "networking.gateway", "networking.ip", "networking.nameserver1", "('--nameserver='+networking.nameserver2)ifnetworking.nameserver2isdefinedelse''", "networking.subnetmask"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_ignition_files#taskfile:roles/update_ignition_files/tasks/main.yml#task:[0]", "name": "Update master and worker ignition files on bastion", "module": "ansible.builtin.shell", "index": 0, "play_index": -1, "defined_in": "roles/update_ignition_files/tasks/main.yml", "local_key": "task taskfile:roles/update_ignition_files/tasks/main.yml#task:[0]", "role": "update_ignition_files", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_output": "task role:update_ignition_files#taskfile:roles/update_ignition_files/tasks/main.yml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Update master and worker ignition files on bastion", "register": "cmd_output"}, "module_options": "echo \"Print machineconfigs:\"\noc get mc\necho \"Update worker ignition file ...\"\noc extract -n openshift-machine-api secret/worker-user-data --keys=userData --to=- > /var/www/html/ignition/worker.ign\necho \"Update master ignition file ...\"\noc extract -n openshift-machine-api secret/master-user-data --keys=userData --to=- > /var/www/html/ignition/master.ign\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Update master and worker ignition files on bastion\n      ansible.builtin.shell: |\n        echo \"Print machineconfigs:\"\n        oc get mc\n        echo \"Update worker ignition file ...\"\n        oc extract -n openshift-machine-api secret/worker-user-data --keys=userData --to=- > /var/www/html/ignition/worker.ign\n        echo \"Update master ignition file ...\"\n        oc extract -n openshift-machine-api secret/master-user-data --keys=userData --to=- > /var/www/html/ignition/master.ign\n      register: cmd_output", "line_num_in_file": [7, 15], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:update_ignition_files#taskfile:roles/update_ignition_files/tasks/main.yml#task:[1]", "name": "Print above command output", "module": "ansible.builtin.debug", "index": 1, "play_index": -1, "defined_in": "roles/update_ignition_files/tasks/main.yml", "local_key": "task taskfile:roles/update_ignition_files/tasks/main.yml#task:[1]", "role": "update_ignition_files", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print above command output"}, "module_options": {"var": "cmd_output.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Print above command output\n      ansible.builtin.debug:\n        var: cmd_output.stdout_lines", "line_num_in_file": [16, 19], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[0]", "name": "Start openshift-installer with 'wait-for bootstrap-complete' (async task)", "module": "ansible.builtin.command", "index": 0, "play_index": -1, "defined_in": "roles/wait_for_bootstrap/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[0]", "role": "wait_for_bootstrap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"watch_bootstrap": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Start openshift-installer with 'wait-for bootstrap-complete' (async task)", "tags": "wait_for_bootstrap", "async": 4500, "poll": 0, "register": "watch_bootstrap"}, "module_options": "openshift-install wait-for bootstrap-complete --dir=/root/ocpinst", "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Start openshift-installer with 'wait-for bootstrap-complete' (async task)\n  tags: wait_for_bootstrap\n  ansible.builtin.command: openshift-install wait-for bootstrap-complete --dir=/root/ocpinst\n  # Set wait time to 75 min, because it depends highly on system performance and network speed\n  async: 4500\n  poll: 0\n  register: watch_bootstrap\n", "line_num_in_file": [2, 9], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["watch_bootstrap"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[1]", "name": "Wait for first node-bootstrapper request. Takes < 10 min with good network connection (retry every 30s)...To watch progress, SSH to root@bastion, SSH to core@bootstrap-ip and run 'journalctl -b -f -u release-image.service -u bootkube.service'", "module": "ansible.builtin.shell", "index": 1, "play_index": -1, "defined_in": "roles/wait_for_bootstrap/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[1]", "role": "wait_for_bootstrap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"csr_check": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for first node-bootstrapper request. Takes < 10 min with good network connection (retry every 30s)...To watch progress, SSH to root@bastion, SSH to core@bootstrap-ip and run 'journalctl -b -f -u release-image.service -u bootkube.service'", "tags": "wait_for_bootstrap", "register": "csr_check", "until": "(\":node-bootstrapper\" in csr_check.stdout)", "retries": 60, "delay": 30}, "module_options": "set -o pipefail\noc get csr | grep \":node-bootstrapper\"\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "", "line_num_in_file": [], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["watch_bootstrap", "csr_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[2]", "name": "Print first node-bootstrapper requests", "module": "ansible.builtin.debug", "index": 2, "play_index": -1, "defined_in": "roles/wait_for_bootstrap/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[2]", "role": "wait_for_bootstrap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print first node-bootstrapper requests", "tags": "wait_for_bootstrap"}, "module_options": {"var": "csr_check.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print first node-bootstrapper requests\n  tags: wait_for_bootstrap\n  ansible.builtin.debug:\n    var: csr_check.stdout_lines\n", "line_num_in_file": [21, 25], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["watch_bootstrap", "csr_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[3]", "name": "Retry wait-for bootstrap-complete job ID check until it's finished. This may take some time... To watch progress, SSH to bastion, switch to root, from there, SSH to core@bootstrap-ip and run 'journalctl -b -f -u release-image.service -u bootkube.service'", "module": "ansible.builtin.async_status", "index": 3, "play_index": -1, "defined_in": "roles/wait_for_bootstrap/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[3]", "role": "wait_for_bootstrap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"bootstrapping": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "Retry wait-for bootstrap-complete job ID check until it's finished. This may take some time... To watch progress, SSH to bastion, switch to root, from there, SSH to core@bootstrap-ip and run 'journalctl -b -f -u release-image.service -u bootkube.service'", "tags": "wait_for_bootstrap", "register": "bootstrapping", "until": "bootstrapping.finished", "retries": 120, "delay": 30}, "module_options": {"jid": "{{ watch_bootstrap.ansible_job_id }}"}, "executable": "ansible.builtin.async_status", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "", "line_num_in_file": [], "resolved_name": "ansible.builtin.async_status", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "async_status", "fqcn": "ansible.builtin.async_status", "key": "module collection:ansible.builtin#module:ansible.builtin.async_status"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.async_status", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.async_status", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["jid", "mode"], "required_arg_keys": [{"key": "jid", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "jid", "value": "{{ watch_bootstrap.ansible_job_id }}", "undefined_variables": ["watch_bootstrap.ansible_job_id"]}], "unknown_type_values": [{"key": "jid", "expected_type": "str", "unknown_type_value": "{{ watch_bootstrap.ansible_job_id }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["watch_bootstrap", "csr_check", "bootstrapping"], "vars_used_in_target_task": ["watch_bootstrap.ansible_job_id"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[4]", "name": "Make sure kubeconfig works properly", "module": "ansible.builtin.command", "index": 4, "play_index": -1, "defined_in": "roles/wait_for_bootstrap/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[4]", "role": "wait_for_bootstrap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"oc_whoami": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "Make sure kubeconfig works properly", "tags": "wait_for_bootstrap", "register": "oc_whoami", "until": "(oc_whoami.stdout == \"system:admin\")", "retries": 30, "delay": 10}, "module_options": "oc whoami", "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Make sure kubeconfig works properly\n  tags: wait_for_bootstrap\n  ansible.builtin.command: oc whoami\n  register: oc_whoami\n  until: (oc_whoami.stdout == \"system:admin\")\n  retries: 30\n  delay: 10\n", "line_num_in_file": [37, 44], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["watch_bootstrap.ansible_job_id"], "vars_defined_in_previous_tasks": ["watch_bootstrap", "csr_check", "bootstrapping", "oc_whoami"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_bootstrap#taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[5]", "name": "Print output of oc whoami, should be \"system:admin\" if previous task worked", "module": "ansible.builtin.debug", "index": 5, "play_index": -1, "defined_in": "roles/wait_for_bootstrap/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_bootstrap/tasks/main.yaml#task:[5]", "role": "wait_for_bootstrap", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print output of oc whoami, should be \"system:admin\" if previous task worked", "tags": "wait_for_bootstrap"}, "module_options": {"var": "oc_whoami.stdout"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print output of oc whoami, should be \"system:admin\" if previous task worked\n  tags: wait_for_bootstrap\n  ansible.builtin.debug:\n    var: oc_whoami.stdout", "line_num_in_file": [45, 49], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["watch_bootstrap.ansible_job_id"], "vars_defined_in_previous_tasks": ["watch_bootstrap", "csr_check", "bootstrapping", "oc_whoami"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[0]", "name": "{{ loop_count }} round of checking cluster operators", "module": "ansible.builtin.shell", "index": 0, "play_index": -1, "defined_in": "roles/wait_for_cluster_operators/tasks/check_co.yaml", "local_key": "task taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[0]", "role": "wait_for_cluster_operators", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"oc_get_co": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "{{ loop_count }} round of checking cluster operators", "tags": "wait_for_cluster_operators", "register": "oc_get_co", "when": "not cluster_operators_ok"}, "module_options": "set -o pipefail\n# Get and print only cluster operators which are only in 'PROGRESSING' state\noc get co 2> /dev/null | grep '       True' || true\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: \"{{ loop_count }} round of checking cluster operators\"\n  tags: wait_for_cluster_operators\n  ansible.builtin.shell: |\n    set -o pipefail\n    # Get and print only cluster operators which are only in 'PROGRESSING' state\n    oc get co 2> /dev/null | grep '       True' || true\n  register: oc_get_co\n  when: not cluster_operators_ok\n", "line_num_in_file": [2, 10], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["loop_count"], "vars_defined_in_previous_tasks": ["cluster_operators_ok", "oc_get_co"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[1]", "name": "Print cluster operators which are only in 'PROGRESSING' state", "module": "ansible.builtin.debug", "index": 1, "play_index": -1, "defined_in": "roles/wait_for_cluster_operators/tasks/check_co.yaml", "local_key": "task taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[1]", "role": "wait_for_cluster_operators", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print cluster operators which are only in 'PROGRESSING' state", "tags": "wait_for_cluster_operators", "when": "not cluster_operators_ok"}, "module_options": {"var": "oc_get_co.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Print cluster operators which are only in 'PROGRESSING' state\n  tags: wait_for_cluster_operators\n  ansible.builtin.debug:\n    var: oc_get_co.stdout_lines\n  when: not cluster_operators_ok\n", "line_num_in_file": [11, 16], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["loop_count"], "vars_defined_in_previous_tasks": ["cluster_operators_ok", "oc_get_co"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[2]", "name": "{{ loop_count }} round of waiting for cluster operators. Trying 10 times before printing status again", "module": "ansible.builtin.shell", "index": 2, "play_index": -1, "defined_in": "roles/wait_for_cluster_operators/tasks/check_co.yaml", "local_key": "task taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[2]", "role": "wait_for_cluster_operators", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"co_check": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "{{ loop_count }} round of waiting for cluster operators. Trying 10 times before printing status again", "tags": "wait_for_cluster_operators", "register": "co_check", "until": "(\"True\" not in co_check.stdout) and (\"False\" in co_check.stdout)", "retries": 10, "delay": 30, "ignore_errors": true, "when": "not cluster_operators_ok"}, "module_options": "set -o pipefail\n# Check for 'PROGRESSING' state\noc get co 2> /dev/null | awk '{print $4}'\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: \"{{ loop_count }} round of waiting for cluster operators. Trying 10 times before printing status again\"\n  tags: wait_for_cluster_operators\n  ansible.builtin.shell: |\n    set -o pipefail\n    # Check for 'PROGRESSING' state\n    oc get co 2> /dev/null | awk '{print $4}'\n  register: co_check\n  # Check for \"True\" and \"False\", in case output was empty for any reason\n  until: (\"True\" not in co_check.stdout) and (\"False\" in co_check.stdout)\n  retries: 10\n  delay: 30\n  ignore_errors: true\n  when: not cluster_operators_ok\n", "line_num_in_file": [17, 30], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["loop_count"], "vars_defined_in_previous_tasks": ["cluster_operators_ok", "oc_get_co", "co_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[3]", "name": "Update local variable, if required", "module": "ansible.builtin.set_fact", "index": 3, "play_index": -1, "defined_in": "roles/wait_for_cluster_operators/tasks/check_co.yaml", "local_key": "task taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml#task:[3]", "role": "wait_for_cluster_operators", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"cluster_operators_ok": true}, "loop": {}, "options": {"name": "Update local variable, if required", "tags": "wait_for_cluster_operators", "when": "not cluster_operators_ok and (\"True\" not in co_check.stdout) and (\"False\" in co_check.stdout)"}, "module_options": {"cluster_operators_ok": true}, "executable": "ansible.builtin.set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Update local variable, if required\n  tags: wait_for_cluster_operators\n  ansible.builtin.set_fact:\n    cluster_operators_ok: true\n  # Check for \"True\" and \"False\", in case output was empty for any reason\n  when: not cluster_operators_ok and (\"True\" not in co_check.stdout) and (\"False\" in co_check.stdout)", "line_num_in_file": [31, 37], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["loop_count"], "vars_defined_in_previous_tasks": ["cluster_operators_ok", "oc_get_co", "co_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[0]", "name": "Wait for cluster operators", "module": "ansible.builtin.include_tasks", "index": 0, "play_index": -1, "defined_in": "roles/wait_for_cluster_operators/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[0]", "role": "wait_for_cluster_operators", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"loop_count": ["First", "Second", "Third", "Fourth", "Fifth and last"]}, "options": {"name": "Wait for cluster operators", "tags": "wait_for_cluster_operators", "with_items": ["First", "Second", "Third", "Fourth", "Fifth and last"], "loop_control": {"loop_var": "loop_count"}}, "module_options": "check_co.yaml", "executable": "check_co.yaml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- name: Wait for cluster operators\n  tags: wait_for_cluster_operators\n  ansible.builtin.include_tasks: check_co.yaml\n  with_items:\n    - First\n    - Second\n    - Third\n    - Fourth\n    - Fifth and last\n  loop_control:\n    loop_var: loop_count\n", "line_num_in_file": [2, 13], "resolved_name": "taskfile role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml", "possible_candidates": [], "module_info": {}, "include_info": {"type": "taskfile", "path": "roles/wait_for_cluster_operators/tasks/check_co.yaml", "key": "taskfile role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/check_co.yaml"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["cluster_operators_ok"], "vars_used_in_target_task": ["loop_count"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[1]", "name": "Get final cluster operators", "module": "ansible.builtin.command", "index": 1, "play_index": -1, "defined_in": "roles/wait_for_cluster_operators/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[1]", "role": "wait_for_cluster_operators", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"oc_get_co": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get final cluster operators", "register": "oc_get_co", "changed_when": false}, "module_options": "oc get co", "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Get final cluster operators\n      ansible.builtin.command: oc get co\n      register: oc_get_co\n      changed_when: false\n", "line_num_in_file": [17, 21], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["loop_count"], "vars_defined_in_previous_tasks": ["cluster_operators_ok", "oc_get_co", "co_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_cluster_operators#taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[2]", "name": "Print final cluster operators", "module": "ansible.builtin.debug", "index": 2, "play_index": -1, "defined_in": "roles/wait_for_cluster_operators/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_cluster_operators/tasks/main.yaml#task:[2]", "role": "wait_for_cluster_operators", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Print final cluster operators"}, "module_options": {"var": "oc_get_co.stdout_lines"}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Print final cluster operators\n      ansible.builtin.debug:\n        var: oc_get_co.stdout_lines", "line_num_in_file": [22, 25], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["loop_count"], "vars_defined_in_previous_tasks": ["cluster_operators_ok", "oc_get_co", "co_check"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[0]", "name": "Wait for All Cluster Operators to be available", "module": "shell", "index": 0, "play_index": -1, "defined_in": "roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[0]", "role": "wait_for_hc_to_complete_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"co": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[0]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for All Cluster Operators to be available", "register": "co", "until": "co.stdout == '0'", "retries": 60, "delay": 20}, "module_options": "oc get co --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig --no-headers| awk '$3 != \"True\" {print $1}' | wc -l", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for All Cluster Operators to be available\n  shell: oc get co --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig --no-headers| awk '$3 != \"True\" {print $1}' | wc -l\n  register: co\n  until: co.stdout == '0'\n  retries: 60\n  delay: 20\n", "line_num_in_file": [2, 8], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["co"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[1]", "name": "Wait for Hosted Control Plane to Complete", "module": "shell", "index": 1, "play_index": -1, "defined_in": "roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[1]", "role": "wait_for_hc_to_complete_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"hc_status": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Wait for Hosted Control Plane to Complete", "register": "hc_status", "until": "hc_status.stdout == \"Completed\"", "retries": 40, "delay": 15}, "module_options": "oc get hc -n {{ hypershift.hcp.clusters_namespace }} --no-headers | awk  '{print $4}'", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Wait for Hosted Control Plane to Complete\n  shell: oc get hc -n {{ hypershift.hcp.clusters_namespace }} --no-headers | awk  '{print $4}'\n  register: hc_status\n  until: hc_status.stdout == \"Completed\"\n  retries: 40\n  delay: 15\n", "line_num_in_file": [9, 15], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name"], "vars_defined_in_previous_tasks": ["co", "hc_status"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[2]", "name": "Get URL for Webconsole of Hosted Cluster", "module": "shell", "index": 2, "play_index": -1, "defined_in": "roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[2]", "role": "wait_for_hc_to_complete_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"console_url": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get URL for Webconsole of Hosted Cluster", "register": "console_url"}, "module_options": "oc whoami --show-console --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get URL for Webconsole of Hosted Cluster\n  shell: oc whoami --show-console --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig\n  register: console_url\n", "line_num_in_file": [16, 19], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name", "hypershift.hcp.clusters_namespace"], "vars_defined_in_previous_tasks": ["co", "hc_status", "console_url"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[3]", "name": "Get Password for Hosted Cluster", "module": "shell", "index": 3, "play_index": -1, "defined_in": "roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[3]", "role": "wait_for_hc_to_complete_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cluster_password_encoded": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get Password for Hosted Cluster", "register": "cluster_password_encoded"}, "module_options": "oc get secret kubeadmin-password -n \"{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}\" -o yaml | grep -i 'password:'", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get Password for Hosted Cluster\n  shell: oc get secret kubeadmin-password -n \"{{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}\" -o yaml | grep -i 'password:'\n  register: cluster_password_encoded\n", "line_num_in_file": [20, 23], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name", "hypershift.hcp.clusters_namespace"], "vars_defined_in_previous_tasks": ["co", "hc_status", "console_url", "cluster_password_encoded"], "vars_used_in_target_task": ["hypershift.hcp.clusters_namespace", "hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[4]", "name": "Decode the Password", "module": "shell", "index": 4, "play_index": -1, "defined_in": "roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[4]", "role": "wait_for_hc_to_complete_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cluster_password_decoded": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "Decode the Password", "register": "cluster_password_decoded"}, "module_options": "echo \"{{cluster_password_encoded.stdout_lines[0].split(' ')[-1]}}\" | base64 --decode", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Decode the Password\n  shell: echo \"{{cluster_password_encoded.stdout_lines[0].split(' ')[-1]}}\" | base64 --decode\n  register: cluster_password_decoded\n", "line_num_in_file": [24, 27], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name", "hypershift.hcp.clusters_namespace"], "vars_defined_in_previous_tasks": ["co", "hc_status", "console_url", "cluster_password_encoded", "cluster_password_decoded"], "vars_used_in_target_task": ["cluster_password_encoded.stdout_lines[0].split('')[-1]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[5]", "name": "Get api server of Hosted Cluster", "module": "shell", "index": 5, "play_index": -1, "defined_in": "roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[5]", "role": "wait_for_hc_to_complete_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"api_server": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[5]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get api server of Hosted Cluster", "register": "api_server"}, "module_options": "cat /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig | grep -i server:", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get api server of Hosted Cluster\n  shell: \"cat /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig | grep -i server:\"\n  register: api_server\n", "line_num_in_file": [28, 31], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name", "hypershift.hcp.clusters_namespace", "cluster_password_encoded.stdout_lines[0].split('')[-1]"], "vars_defined_in_previous_tasks": ["co", "hc_status", "console_url", "cluster_password_encoded", "cluster_password_decoded", "api_server"], "vars_used_in_target_task": ["hypershift.hcp.hosted_cluster_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[6]", "name": "Display Login Credentials", "module": "debug", "index": 6, "play_index": -1, "defined_in": "roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[6]", "role": "wait_for_hc_to_complete_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Display Login Credentials"}, "module_options": {"msg": " You can access webconsole of Hosted Cluster here : {{ console_url.stdout }} | Username : 'kubeadmin' Password : {{ cluster_password_decoded.stdout_lines[0] }} "}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Display Login Credentials\n  debug:\n    msg: \" You can access webconsole of Hosted Cluster here : {{ console_url.stdout }} | Username : 'kubeadmin' Password : {{ cluster_password_decoded.stdout_lines[0]\n      }} \"\n", "line_num_in_file": [32, 36], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "msg", "value": " You can access webconsole of Hosted Cluster here : {{ console_url.stdout }} | Username : 'kubeadmin' Password : {{ cluster_password_decoded.stdout_lines[0] }} ", "undefined_variables": ["console_url.stdout", "cluster_password_decoded.stdout_lines[0]"]}], "unknown_type_values": [{"key": "msg", "expected_type": "str", "unknown_type_value": " You can access webconsole of Hosted Cluster here : {{ console_url.stdout }} | Username : 'kubeadmin' Password : {{ cluster_password_decoded.stdout_lines[0] }} "}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name", "hypershift.hcp.clusters_namespace", "cluster_password_encoded.stdout_lines[0].split('')[-1]"], "vars_defined_in_previous_tasks": ["co", "hc_status", "console_url", "cluster_password_encoded", "cluster_password_decoded", "api_server"], "vars_used_in_target_task": ["console_url.stdout", "cluster_password_decoded.stdout_lines[0]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_hc_to_complete_hypershift#taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[7]", "name": "Display oc login command for CLI", "module": "debug", "index": 7, "play_index": -1, "defined_in": "roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_hc_to_complete_hypershift/tasks/main.yaml#task:[7]", "role": "wait_for_hc_to_complete_hypershift", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Display oc login command for CLI"}, "module_options": {"msg": " You can access the Hosted Cluster using CLI : oc login {{ api_server.stdout_lines[0].split(': ')[-1] }} -u kubeadmin -p {{ cluster_password_decoded.stdout_lines[0] }} "}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Display oc login command for CLI\n  debug:\n    msg: \" You can access the Hosted Cluster using CLI : oc login {{ api_server.stdout_lines[0].split(': ')[-1] }} -u kubeadmin -p {{ cluster_password_decoded.stdout_lines[0]\n      }} \"", "line_num_in_file": [37, 41], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "msg", "value": " You can access the Hosted Cluster using CLI : oc login {{ api_server.stdout_lines[0].split(': ')[-1] }} -u kubeadmin -p {{ cluster_password_decoded.stdout_lines[0] }} ", "undefined_variables": ["cluster_password_decoded.stdout_lines[0]"]}], "unknown_type_values": [{"key": "msg", "expected_type": "str", "unknown_type_value": " You can access the Hosted Cluster using CLI : oc login {{ api_server.stdout_lines[0].split(': ')[-1] }} -u kubeadmin -p {{ cluster_password_decoded.stdout_lines[0] }} "}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["hypershift.hcp.hosted_cluster_name", "hypershift.hcp.clusters_namespace", "cluster_password_encoded.stdout_lines[0].split('')[-1]", "console_url.stdout", "cluster_password_decoded.stdout_lines[0]"], "vars_defined_in_previous_tasks": ["co", "hc_status", "console_url", "cluster_password_encoded", "cluster_password_decoded", "api_server"], "vars_used_in_target_task": ["api_server.stdout_lines[0].split(':')[-1]", "cluster_password_decoded.stdout_lines[0]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[0]", "name": "Almost there! Add host info to /etc/hosts so you can login to the cluster via web browser. Ansible Controller sudo password required", "module": "blockinfile", "index": 0, "play_index": -1, "defined_in": "roles/wait_for_install_complete/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[0]", "role": "wait_for_install_complete", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Almost there! Add host info to /etc/hosts so you can login to the cluster via web browser. Ansible Controller sudo password required", "tags": "wait_for_install_complete", "become": true, "delegate_to": "127.0.0.1"}, "module_options": {"create": true, "backup": true, "marker": "# {mark} ANSIBLE MANAGED BLOCK FOR OCP CLUSTER: {{ env.cluster.networking.metadata_name }}", "path": "/etc/hosts", "block": "{{ env.bastion.networking.ip }} oauth-openshift.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n{{ env.bastion.networking.ip }} console-openshift-console.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n{{ env.bastion.networking.ip }} api.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n"}, "executable": "blockinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Almost there! Add host info to /etc/hosts so you can login to the cluster via web browser. Ansible Controller sudo password required\n  tags: wait_for_install_complete\n  become: true\n  blockinfile:\n    create: true\n    backup: true\n    marker: \"# {mark} ANSIBLE MANAGED BLOCK FOR OCP CLUSTER: {{ env.cluster.networking.metadata_name }}\"\n    path: /etc/hosts\n    block: |\n      {{ env.bastion.networking.ip }} oauth-openshift.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n      {{ env.bastion.networking.ip }} console-openshift-console.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n      {{ env.bastion.networking.ip }} api.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n  delegate_to: 127.0.0.1\n", "line_num_in_file": [2, 15], "resolved_name": "ansible.builtin.blockinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "blockinfile", "fqcn": "ansible.builtin.blockinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.blockinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.blockinfile", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.blockinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "block", "content", "create", "group", "insertafter", "insertbefore", "marker", "marker_begin", "marker_end", "mode", "owner", "path", "dest", "destfile", "name", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "marker", "value": "# {mark} ANSIBLE MANAGED BLOCK FOR OCP CLUSTER: {{ env.cluster.networking.metadata_name }}", "undefined_variables": ["env.cluster.networking.metadata_name"]}, {"key": "block", "value": "{{ env.bastion.networking.ip }} oauth-openshift.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n{{ env.bastion.networking.ip }} console-openshift-console.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n{{ env.bastion.networking.ip }} api.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n", "undefined_variables": ["env.cluster.networking.metadata_name", "env.bastion.networking.ip", "env.cluster.networking.base_domain"]}], "unknown_type_values": [{"key": "marker", "expected_type": "str", "unknown_type_value": "# {mark} ANSIBLE MANAGED BLOCK FOR OCP CLUSTER: {{ env.cluster.networking.metadata_name }}"}, {"key": "block", "expected_type": "str", "unknown_type_value": "{{ env.bastion.networking.ip }} oauth-openshift.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n{{ env.bastion.networking.ip }} console-openshift-console.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n{{ env.bastion.networking.ip }} api.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "env.bastion.networking.ip", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[1]", "name": "Get OCP URL", "module": "set_fact", "index": 1, "play_index": -1, "defined_in": "roles/wait_for_install_complete/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[1]", "role": "wait_for_install_complete", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"ocp_url": "https://console-openshift-console.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}"}, "loop": {}, "options": {"name": "Get OCP URL", "tags": "wait_for_install_complete"}, "module_options": {"ocp_url": "https://console-openshift-console.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get OCP URL\n  tags: wait_for_install_complete\n  set_fact:\n    ocp_url: https://console-openshift-console.apps.{{ env.cluster.networking.metadata_name }}.{{ env.cluster.networking.base_domain }}\n", "line_num_in_file": [16, 20], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.networking.metadata_name", "env.bastion.networking.ip", "env.cluster.networking.base_domain"], "vars_defined_in_previous_tasks": ["ocp_url"], "vars_used_in_target_task": ["env.cluster.networking.metadata_name", "env.cluster.networking.base_domain"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[2]", "name": "Get OCP temporary password", "module": "command", "index": 2, "play_index": -1, "defined_in": "roles/wait_for_install_complete/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[2]", "role": "wait_for_install_complete", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"ocp_passwd": "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[2]"}, "set_facts": {}, "loop": {}, "options": {"name": "Get OCP temporary password", "tags": "wait_for_install_complete", "register": "ocp_passwd", "changed_when": false}, "module_options": "cat /root/ocpinst/auth/kubeadmin-password", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Get OCP temporary password\n  tags: wait_for_install_complete\n  command: cat /root/ocpinst/auth/kubeadmin-password\n  register: ocp_passwd\n  changed_when: false\n", "line_num_in_file": [21, 26], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.networking.metadata_name", "env.bastion.networking.ip", "env.cluster.networking.base_domain"], "vars_defined_in_previous_tasks": ["ocp_url", "ocp_passwd"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[3]", "name": "Additional step, if using NAT", "module": "debug", "index": 3, "play_index": -1, "defined_in": "roles/wait_for_install_complete/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[3]", "role": "wait_for_install_complete", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Additional step, if using NAT", "tags": "wait_for_install_complete", "when": "( env.network_mode | upper == \"NAT\" )", "changed_when": false}, "module_options": {"msg": "NAT USERS ONLY: Create SSH tunnel to cluster, i.e run command in terminal window from controller: 'sshuttle -r {{ env.bastion.access.user }}@{{ env.bastion.networking.ip }} 192.168.122.0/15 --dns'"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Additional step, if using NAT\n  tags: wait_for_install_complete\n  debug:\n    msg: \"NAT USERS ONLY: Create SSH tunnel to cluster, i.e run command in terminal window from controller: 'sshuttle -r {{ env.bastion.access.user }}@{{ env.bastion.networking.ip\n      }} 192.168.122.0/15 --dns'\"\n  when: ( env.network_mode | upper == \"NAT\" )\n  changed_when: false\n", "line_num_in_file": [27, 34], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "msg", "value": "NAT USERS ONLY: Create SSH tunnel to cluster, i.e run command in terminal window from controller: 'sshuttle -r {{ env.bastion.access.user }}@{{ env.bastion.networking.ip }} 192.168.122.0/15 --dns'", "undefined_variables": ["env.bastion.access.user", "env.bastion.networking.ip"]}], "unknown_type_values": [{"key": "msg", "expected_type": "str", "unknown_type_value": "NAT USERS ONLY: Create SSH tunnel to cluster, i.e run command in terminal window from controller: 'sshuttle -r {{ env.bastion.access.user }}@{{ env.bastion.networking.ip }} 192.168.122.0/15 --dns'"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.networking.metadata_name", "env.bastion.networking.ip", "env.cluster.networking.base_domain"], "vars_defined_in_previous_tasks": ["ocp_url", "ocp_passwd"], "vars_used_in_target_task": ["env.bastion.access.user", "env.bastion.networking.ip"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_install_complete#taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[4]", "name": "Congratulations! OpenShift installation complete. Use the information below for first-time login via web browser.", "module": "command", "index": 4, "play_index": -1, "defined_in": "roles/wait_for_install_complete/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_install_complete/tasks/main.yaml#task:[4]", "role": "wait_for_install_complete", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": [" URL: {{ ocp_url }} ", " Username: kubeadmin ", " Password: {{ ocp_passwd.stdout }} "]}, "options": {"name": "Congratulations! OpenShift installation complete. Use the information below for first-time login via web browser.", "tags": "wait_for_install_complete", "loop": [" URL: {{ ocp_url }} ", " Username: kubeadmin ", " Password: {{ ocp_passwd.stdout }} "], "changed_when": false}, "module_options": "echo {{ item }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Congratulations! OpenShift installation complete. Use the information below for first-time login via web browser.\n  tags: wait_for_install_complete\n  command: echo {{ item }}\n  loop:\n    - \" URL: {{ ocp_url }} \"\n    - \" Username: kubeadmin \"\n    - \" Password: {{ ocp_passwd.stdout }} \"\n  changed_when: false", "line_num_in_file": [35, 43], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.cluster.networking.metadata_name", "env.bastion.networking.ip", "env.cluster.networking.base_domain", "env.bastion.access.user"], "vars_defined_in_previous_tasks": ["ocp_url", "ocp_passwd"], "vars_used_in_target_task": ["item", "ocp_url", "ocp_passwd.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_node#taskfile:roles/wait_for_node/tasks/main.yaml#task:[0]", "name": "Get and print nodes status", "module": "ansible.builtin.include_tasks", "index": 0, "play_index": -1, "defined_in": "roles/wait_for_node/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_node/tasks/main.yaml#task:[0]", "role": "wait_for_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Get and print nodes status"}, "module_options": "{{ role_path }}/../common/tasks/print_ocp_node_status.yaml", "executable": "{{ role_path }}/../common/tasks/print_ocp_node_status.yaml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- name: Get and print nodes status\n  ansible.builtin.include_tasks: \"{{ role_path }}/../common/tasks/print_ocp_node_status.yaml\"\n", "line_num_in_file": [2, 4], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["wait_for_node_name"], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_node#taskfile:roles/wait_for_node/tasks/main.yaml#task:[1]", "name": "Make sure node is 'Ready' (retry every 20s, wait for '{{ wait_for_node_name }}')", "module": "ansible.builtin.shell", "index": 1, "play_index": -1, "defined_in": "roles/wait_for_node/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_node/tasks/main.yaml#task:[1]", "role": "wait_for_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"cmd_output": "task role:wait_for_node#taskfile:roles/wait_for_node/tasks/main.yaml#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Make sure node is 'Ready' (retry every 20s, wait for '{{ wait_for_node_name }}')", "register": "cmd_output", "until": "(\"Ready\" == cmd_output.stdout)", "retries": 30, "delay": 20}, "module_options": "set -o pipefail\noc get nodes --no-headers=true | grep \"^{{ wait_for_node_name | lower }}\" | awk '{print $2}'\n", "executable": "ansible.builtin.shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "- name: Make sure node is 'Ready' (retry every 20s, wait for '{{ wait_for_node_name }}')\n  ansible.builtin.shell: |\n    set -o pipefail\n    oc get nodes --no-headers=true | grep \"^{{ wait_for_node_name | lower }}\" | awk '{print $2}'\n  register: cmd_output\n  until: (\"Ready\" == cmd_output.stdout)\n  retries: 30\n  delay: 20\n", "line_num_in_file": [5, 13], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["role_path"], "vars_defined_in_previous_tasks": ["wait_for_node_name", "cmd_output"], "vars_used_in_target_task": ["wait_for_node_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task role:wait_for_node#taskfile:roles/wait_for_node/tasks/main.yaml#task:[2]", "name": "Get and print nodes status", "module": "ansible.builtin.include_tasks", "index": 2, "play_index": -1, "defined_in": "roles/wait_for_node/tasks/main.yaml", "local_key": "task taskfile:roles/wait_for_node/tasks/main.yaml#task:[2]", "role": "wait_for_node", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Get and print nodes status"}, "module_options": "{{ role_path }}/../common/tasks/print_ocp_node_status.yaml", "executable": "{{ role_path }}/../common/tasks/print_ocp_node_status.yaml", "executable_type": "TaskFile", "collections_in_play": [], "yaml_lines": "- name: Get and print nodes status\n  ansible.builtin.include_tasks: \"{{ role_path }}/../common/tasks/print_ocp_node_status.yaml\"\n", "line_num_in_file": [2, 4], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["role_path", "wait_for_node_name"], "vars_defined_in_previous_tasks": ["wait_for_node_name", "cmd_output"], "vars_used_in_target_task": ["role_path"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[0]", "name": "Generate an OpenSSH keypair with the default values (4096 bits, RSA), if using jumphost for NAT.", "module": "community.crypto.openssh_keypair", "index": 0, "play_index": 1, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Generate an OpenSSH keypair with the default values (4096 bits, RSA), if using jumphost for NAT.", "tags": "ssh_key_gen, ssh, section_1", "when": "(env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )"}, "module_options": {"path": "{{ env.jumphost.path_to_keypair.split('.')[:-1] | join('.') }}", "passphrase": "", "regenerate": "never"}, "executable": "community.crypto.openssh_keypair", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Generate an OpenSSH keypair with the default values (4096 bits, RSA), if using jumphost for NAT.\n      tags: ssh_key_gen, ssh, section_1\n      community.crypto.openssh_keypair:\n        path: \"{{ env.jumphost.path_to_keypair.split('.')[:-1] | join('.') }}\"\n        passphrase: \"\"\n        regenerate: never\n      when: (env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )", "line_num_in_file": [24, 30], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.crypto.openssh_keypair", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": ["env.jumphost.path_to_keypair.split('.')[:-1]"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[1]", "name": "Check if 'expect' is installed on jumphost, for use in ssh-copy-id role for NAT.", "module": "package_facts", "index": 1, "play_index": 1, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Check if 'expect' is installed on jumphost, for use in ssh-copy-id role for NAT.", "failed_when": "'expect' not in ansible_facts.packages", "when": "(env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )"}, "module_options": null, "executable": "package_facts", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Check if 'expect' is installed on jumphost, for use in ssh-copy-id role for NAT.\n          package_facts:\n          failed_when: \"'expect' not in ansible_facts.packages\"\n          when: (env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )\n      rescue:", "line_num_in_file": [32, 36], "resolved_name": "ansible.builtin.package_facts", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "package_facts", "fqcn": "ansible.builtin.package_facts", "key": "module collection:ansible.builtin#module:ansible.builtin.package_facts"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.package_facts", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.package_facts", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["manager", "strategy"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[2]", "name": "Package 'expect' must be installed on the jumphost, attempting to install it.", "module": "package", "index": 2, "play_index": 1, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[2]", "role": "", "collection": "", "become": {"py/object": "ansible_risk_insight.models.BecomeInfo", "enabled": true, "become": "", "user": "", "method": "", "flags": ""}, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Package 'expect' must be installed on the jumphost, attempting to install it.", "become": true, "when": "(env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )"}, "module_options": {"name": "expect"}, "executable": "package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Package 'expect' must be installed on the jumphost, attempting to install it. #Using 'block' and 'rescue' to avoid running the 'package' module (which requires 'sudo') unless necessary.\n          become: true\n          package:\n            name: expect\n          when: (env.network_mode | upper == \"NAT\") and ( env.jumphost.ip is not none )\n  roles:", "line_num_in_file": [37, 42], "resolved_name": "ansible.builtin.package", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "package", "fqcn": "ansible.builtin.package", "key": "module collection:ansible.builtin#module:ansible.builtin.package"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.package", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.package", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["name", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}, {"key": "state", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[3]#task:[0]", "name": "", "module": "import_role", "index": 0, "play_index": 3, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[3]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {}, "module_options": {"name": "dns", "tasks_from": "initial-resolv.yaml"}, "executable": "dns", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - import_role:\n        name: dns\n        tasks_from: initial-resolv.yaml\n  roles:", "line_num_in_file": [67, 70], "resolved_name": "dns", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "dns", "path": "roles/dns", "key": "role role:dns"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[7]#task:[0]", "name": "Gather facts.", "module": "setup", "index": 0, "play_index": 7, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[7]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Gather facts.", "when": "env.z.high_availability == True"}, "module_options": null, "executable": "setup", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Gather facts.\n      setup:\n      when: env.z.high_availability == True\n", "line_num_in_file": [127, 130], "resolved_name": "ansible.builtin.setup", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "setup", "fqcn": "ansible.builtin.setup", "key": "module collection:ansible.builtin#module:ansible.builtin.setup"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.setup", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.setup", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["fact_path", "filter", "gather_subset", "gather_timeout"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output", "ssh_ocp", "bastion_split_ip", "bootstrap_split_ip", "bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup", "compute_lookup", "infra_lookup", "external_dns_check", "openvpn_role", "_epel_version", "epel_version", "epel_url", "epel_next_url", "epel_gpg_key", "_epel_next", "epel_next", "_openvpn_packages", "openvpn_packages", "_openvpn_easyrsa_path", "openvpn_easyrsa_path", "_openvpn_group", "_openvpn_configuration_directory", "openvpn_configuration_directory", "openvpn_group", "_openvpn_service", "openvpn_service", "openvpn_client_server"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[7]#task:[1]", "name": "Create landing directories for certificates and keys on KVM hosts.", "module": "file", "index": 1, "play_index": 7, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[7]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["issued", "private"]}, "options": {"name": "Create landing directories for certificates and keys on KVM hosts.", "tags": "openvpn", "loop": ["issued", "private"], "when": "env.z.high_availability == True"}, "module_options": {"state": "directory", "path": "/etc/openvpn/client/{{ item }}", "mode": "700"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Create landing directories for certificates and keys on KVM hosts.\n      tags: openvpn\n      file:\n        state: directory\n        path: /etc/openvpn/client/{{ item }}\n        mode: \"700\"\n      loop:\n        - issued\n        - private\n      when: env.z.high_availability == True\n", "line_num_in_file": [131, 141], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output", "ssh_ocp", "bastion_split_ip", "bootstrap_split_ip", "bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup", "compute_lookup", "infra_lookup", "external_dns_check", "openvpn_role", "_epel_version", "epel_version", "epel_url", "epel_next_url", "epel_gpg_key", "_epel_next", "epel_next", "_openvpn_packages", "openvpn_packages", "_openvpn_easyrsa_path", "openvpn_easyrsa_path", "_openvpn_group", "_openvpn_configuration_directory", "openvpn_configuration_directory", "openvpn_group", "_openvpn_service", "openvpn_service", "openvpn_client_server"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[7]#task:[2]", "name": "Copy certificates and keys from controller to KVM hosts.", "module": "copy", "index": 2, "play_index": 7, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[7]#task:[2]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["ca.crt", "client.crt", "client.key", "ta.key"]}, "options": {"name": "Copy certificates and keys from controller to KVM hosts.", "tags": "openvpn", "loop": ["ca.crt", "client.crt", "client.key", "ta.key"], "when": "env.z.high_availability == True"}, "module_options": {"src": "tmp/{{ item }}", "dest": "/etc/openvpn/client/{{ item }}", "mode": "600"}, "executable": "copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Copy certificates and keys from controller to KVM hosts.\n      tags: openvpn\n      copy:\n        src: tmp/{{ item }}\n        dest: /etc/openvpn/client/{{ item }}\n        mode: \"600\"\n      loop:\n        - ca.crt\n        - client.crt\n        - client.key\n        - ta.key\n      when: env.z.high_availability == True\n  roles:", "line_num_in_file": [142, 154], "resolved_name": "ansible.builtin.copy", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "copy", "fqcn": "ansible.builtin.copy", "key": "module collection:ansible.builtin#module:ansible.builtin.copy"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.copy", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.copy", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backup", "checksum", "content", "decrypt", "dest", "directory_mode", "follow", "force", "group", "local_follow", "mode", "owner", "remote_src", "selevel", "serole", "setype", "seuser", "src", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "dest", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output", "ssh_ocp", "bastion_split_ip", "bootstrap_split_ip", "bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup", "compute_lookup", "infra_lookup", "external_dns_check", "openvpn_role", "_epel_version", "epel_version", "epel_url", "epel_next_url", "epel_gpg_key", "_epel_next", "epel_next", "_openvpn_packages", "openvpn_packages", "_openvpn_easyrsa_path", "openvpn_easyrsa_path", "_openvpn_group", "_openvpn_configuration_directory", "openvpn_configuration_directory", "openvpn_group", "_openvpn_service", "openvpn_service", "openvpn_client_server"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_compute_node.yaml#play:[0]#task:[0]", "name": "Check required variables", "module": "ansible.builtin.debug", "index": 0, "play_index": 0, "defined_in": "playbooks/create_compute_node.yaml", "local_key": "task playbook:playbooks/create_compute_node.yaml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Check required variables"}, "module_options": {"msg": ["ERROR: Variable 'day2_compute_node' is not defined!", "Execute: 'ansible-playbook playbooks/add_compute_node.yaml --extra-vars \"@extra-cnode.yml\"'"]}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Check required variables\n          ansible.builtin.debug:\n            msg:\n              - \"ERROR: Variable 'day2_compute_node' is not defined!\"\n              - \"Execute: 'ansible-playbook playbooks/add_compute_node.yaml --extra-vars \\\"@extra-cnode.yml\\\"'\"", "line_num_in_file": [31, 35], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [{"key": "msg", "expected_type": "str", "actual_type": "list", "actual_value": ["ERROR: Variable 'day2_compute_node' is not defined!", "Execute: 'ansible-playbook playbooks/add_compute_node.yaml --extra-vars \"@extra-cnode.yml\"'"]}], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_compute_node.yaml#play:[0]#task:[1]", "name": "Abort playbook", "module": "ansible.builtin.fail", "index": 1, "play_index": 0, "defined_in": "playbooks/create_compute_node.yaml", "local_key": "task playbook:playbooks/create_compute_node.yaml#play:[0]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Abort playbook"}, "module_options": {"msg": "See above error!"}, "executable": "ansible.builtin.fail", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Abort playbook\n          ansible.builtin.fail:\n            msg: See above error!\n\n  roles:", "line_num_in_file": [36, 40], "resolved_name": "ansible.builtin.fail", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "fail", "fqcn": "ansible.builtin.fail", "key": "module collection:ansible.builtin#module:ansible.builtin.fail"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.fail", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.fail", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/delete_compute_node.yaml#play:[0]#task:[0]", "name": "Check required variables", "module": "ansible.builtin.debug", "index": 0, "play_index": 0, "defined_in": "playbooks/delete_compute_node.yaml", "local_key": "task playbook:playbooks/delete_compute_node.yaml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Check required variables"}, "module_options": {"msg": ["ERROR: Variable 'day2_compute_node' is not defined!", "Execute: 'ansible-playbook playbooks/delete_compute_node.yaml --extra-vars \"@extra-cnode.yml\"'"]}, "executable": "ansible.builtin.debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Check required variables\n          ansible.builtin.debug:\n            msg:\n              - \"ERROR: Variable 'day2_compute_node' is not defined!\"\n              - \"Execute: 'ansible-playbook playbooks/delete_compute_node.yaml --extra-vars \\\"@extra-cnode.yml\\\"'\"", "line_num_in_file": [25, 29], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [{"key": "msg", "expected_type": "str", "actual_type": "list", "actual_value": ["ERROR: Variable 'day2_compute_node' is not defined!", "Execute: 'ansible-playbook playbooks/delete_compute_node.yaml --extra-vars \"@extra-cnode.yml\"'"]}], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/delete_compute_node.yaml#play:[0]#task:[1]", "name": "Abort playbook", "module": "ansible.builtin.fail", "index": 1, "play_index": 0, "defined_in": "playbooks/delete_compute_node.yaml", "local_key": "task playbook:playbooks/delete_compute_node.yaml#play:[0]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Abort playbook"}, "module_options": {"msg": "See above error!"}, "executable": "ansible.builtin.fail", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "        - name: Abort playbook\n          ansible.builtin.fail:\n            msg: See above error!\n  roles:", "line_num_in_file": [30, 33], "resolved_name": "ansible.builtin.fail", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "fail", "fqcn": "ansible.builtin.fail", "key": "module collection:ansible.builtin#module:ansible.builtin.fail"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.fail", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.fail", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:roles/robertdebock.epel/molecule/default/verify.yml#play:[0]#task:[0]", "name": "install a package from epel", "module": "ansible.builtin.package", "index": 0, "play_index": 0, "defined_in": "roles/robertdebock.epel/molecule/default/verify.yml", "local_key": "task playbook:roles/robertdebock.epel/molecule/default/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "install a package from epel"}, "module_options": {"name": "aalib", "state": "present"}, "executable": "ansible.builtin.package", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: install a package from epel\n      ansible.builtin.package:\n        name: aalib\n        state: present", "line_num_in_file": [8, 12], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]#task:[0]", "name": "create openvpn server", "module": "ansible.builtin.include_role", "index": 0, "play_index": 0, "defined_in": "roles/robertdebock.openvpn/molecule/default/converge.yml", "local_key": "task playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {"openvpn_role": "server"}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "create openvpn server", "vars": {"openvpn_role": "server"}}, "module_options": {"name": "ansible-role-openvpn"}, "executable": "ansible-role-openvpn", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: create openvpn server\n      ansible.builtin.include_role:\n        name: ansible-role-openvpn\n      vars:\n        openvpn_role: server\n", "line_num_in_file": [8, 13], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]#task:[1]", "name": "copy certificates and keys from the server to the client", "module": "ansible.builtin.copy", "index": 1, "play_index": 0, "defined_in": "roles/robertdebock.openvpn/molecule/default/converge.yml", "local_key": "task playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["ca.crt", "issued/client.crt", "private/client.key", "ta.key"]}, "options": {"name": "copy certificates and keys from the server to the client", "loop": ["ca.crt", "issued/client.crt", "private/client.key", "ta.key"]}, "module_options": {"src": "/etc/openvpn/easy-rsa/pki/{{ item }}", "dest": "/etc/openvpn/client/{{ item | basename }}", "mode": "0640", "remote_src": true}, "executable": "ansible.builtin.copy", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: copy certificates and keys from the server to the client\n      ansible.builtin.copy:\n        src: /etc/openvpn/easy-rsa/pki/{{ item }}\n        dest: /etc/openvpn/client/{{ item | basename }}\n        mode: \"0640\"\n        remote_src: true\n      loop:\n        - ca.crt\n        - issued/client.crt\n        - private/client.key\n        - ta.key\n", "line_num_in_file": [14, 25], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]#task:[2]", "name": "create openvpn client", "module": "ansible.builtin.include_role", "index": 2, "play_index": 0, "defined_in": "roles/robertdebock.openvpn/molecule/default/converge.yml", "local_key": "task playbook:roles/robertdebock.openvpn/molecule/default/converge.yml#play:[0]#task:[2]", "role": "", "collection": "", "become": null, "variables": {"openvpn_role": "client", "openvpn_client_server": "127.0.0.1"}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "create openvpn client", "vars": {"openvpn_role": "client", "openvpn_client_server": "127.0.0.1"}}, "module_options": {"name": "ansible-role-openvpn"}, "executable": "ansible-role-openvpn", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: create openvpn client\n      ansible.builtin.include_role:\n        name: ansible-role-openvpn\n      vars:\n        openvpn_role: client\n        openvpn_client_server: 127.0.0.1", "line_num_in_file": [26, 32], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:roles/robertdebock.openvpn/molecule/default/verify.yml#play:[0]#task:[0]", "name": "check if connection still works", "module": "ansible.builtin.ping", "index": 0, "play_index": 0, "defined_in": "roles/robertdebock.openvpn/molecule/default/verify.yml", "local_key": "task playbook:roles/robertdebock.openvpn/molecule/default/verify.yml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "check if connection still works"}, "module_options": null, "executable": "ansible.builtin.ping", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: check if connection still works\n      ansible.builtin.ping:", "line_num_in_file": [8, 10], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/1_create_lpar.yaml#play:[0]#task:[0]", "name": "Install required python packages.", "module": "ansible.builtin.pip", "index": 0, "play_index": 0, "defined_in": "playbooks/1_create_lpar.yaml", "local_key": "task playbook:playbooks/1_create_lpar.yaml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["requests", "zhmcclient", "cryptography", "packaging", "PyYAML"]}, "options": {"name": "Install required python packages.", "loop": ["requests", "zhmcclient", "cryptography", "packaging", "PyYAML"]}, "module_options": {"name": "{{ item }}"}, "executable": "ansible.builtin.pip", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Install required python packages.\n      ansible.builtin.pip:\n        name: \"{{ item }}\"\n      loop:\n        - requests\n        - zhmcclient\n        - cryptography\n        - packaging\n        - PyYAML\n", "line_num_in_file": [9, 18], "resolved_name": "ansible.builtin.pip", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "pip", "fqcn": "ansible.builtin.pip", "key": "module collection:ansible.builtin#module:ansible.builtin.pip"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.pip", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.pip", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "editable", "executable", "extra_args", "name", "requirements", "state", "umask", "version", "virtualenv", "virtualenv_command", "virtualenv_python", "virtualenv_site_packages"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname", "packages", "ssh_key_creation.filename", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/1_create_lpar.yaml#play:[0]#task:[1]", "name": "Include vars for first LPAR if it is to be created.", "module": "include_vars", "index": 1, "play_index": 0, "defined_in": "playbooks/1_create_lpar.yaml", "local_key": "task playbook:playbooks/1_create_lpar.yaml#play:[0]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for first LPAR if it is to be created.", "when": "env.z.lpar1.create == True"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for first LPAR if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n      when: env.z.lpar1.create == True\n", "line_num_in_file": [19, 23], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml", "undefined_variables": ["env.z.lpar1.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname", "packages", "ssh_key_creation.filename", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar1.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/1_create_lpar.yaml#play:[0]#task:[2]", "name": "Create an LPAR for the first KVM host.", "module": "import_role", "index": 2, "play_index": 0, "defined_in": "playbooks/1_create_lpar.yaml", "local_key": "task playbook:playbooks/1_create_lpar.yaml#play:[0]#task:[2]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create an LPAR for the first KVM host.", "when": "env.z.lpar1.create == True"}, "module_options": {"name": "create_lpar"}, "executable": "create_lpar", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Create an LPAR for the first KVM host.\n      import_role:\n        name: create_lpar\n      when: env.z.lpar1.create == True\n", "line_num_in_file": [24, 28], "resolved_name": "create_lpar", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "create_lpar", "path": "roles/create_lpar", "key": "role role:create_lpar"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname", "packages", "ssh_key_creation.filename", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/1_create_lpar.yaml#play:[1]#task:[0]", "name": "Include vars for second LPAR if it is to be created.", "module": "include_vars", "index": 0, "play_index": 1, "defined_in": "playbooks/1_create_lpar.yaml", "local_key": "task playbook:playbooks/1_create_lpar.yaml#play:[1]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for second LPAR if it is to be created.", "when": "env.z.lpar2.create == True"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for second LPAR if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.create == True\n", "line_num_in_file": [33, 37], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml", "undefined_variables": ["env.z.lpar2.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname", "packages", "ssh_key_creation.filename", "ssh_target[0]", "role_path", "hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name", "lpar.networking.nic.card1.name", "lpar.networking.nic.card2.name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar2.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/1_create_lpar.yaml#play:[1]#task:[1]", "name": "Create an LPAR for the second KVM host.", "module": "import_role", "index": 1, "play_index": 1, "defined_in": "playbooks/1_create_lpar.yaml", "local_key": "task playbook:playbooks/1_create_lpar.yaml#play:[1]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create an LPAR for the second KVM host.", "when": "env.z.lpar2.create == True"}, "module_options": {"name": "create_lpar"}, "executable": "create_lpar", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Create an LPAR for the second KVM host.\n      import_role:\n        name: create_lpar\n      when: env.z.lpar2.create == True\n", "line_num_in_file": [38, 42], "resolved_name": "create_lpar", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "create_lpar", "path": "roles/create_lpar", "key": "role role:create_lpar"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname", "packages", "ssh_key_creation.filename", "ssh_target[0]", "role_path", "hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name", "lpar.networking.nic.card1.name", "lpar.networking.nic.card2.name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/1_create_lpar.yaml#play:[2]#task:[0]", "name": "Include vars for third LPAR if it is to be created.", "module": "include_vars", "index": 0, "play_index": 2, "defined_in": "playbooks/1_create_lpar.yaml", "local_key": "task playbook:playbooks/1_create_lpar.yaml#play:[2]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for third LPAR if it is to be created.", "when": "env.z.lpar3.create == True"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for third LPAR if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.create == True\n", "line_num_in_file": [47, 51], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml", "undefined_variables": ["env.z.lpar3.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname", "packages", "ssh_key_creation.filename", "ssh_target[0]", "role_path", "hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name", "lpar.networking.nic.card1.name", "lpar.networking.nic.card2.name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar3.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/1_create_lpar.yaml#play:[2]#task:[1]", "name": "Create an LPAR for a third KVM host.", "module": "import_role", "index": 1, "play_index": 2, "defined_in": "playbooks/1_create_lpar.yaml", "local_key": "task playbook:playbooks/1_create_lpar.yaml#play:[2]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create an LPAR for a third KVM host.", "when": "env.z.lpar3.create == True"}, "module_options": {"name": "create_lpar"}, "executable": "create_lpar", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Create an LPAR for a third KVM host.\n      import_role:\n        name: create_lpar\n      when: env.z.lpar3.create == True", "line_num_in_file": [52, 56], "resolved_name": "create_lpar", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "create_lpar", "path": "roles/create_lpar", "key": "role role:create_lpar"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname", "packages", "ssh_key_creation.filename", "ssh_target[0]", "role_path", "hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name", "lpar.networking.nic.card1.name", "lpar.networking.nic.card2.name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[0]#task:[0]", "name": "Include vars for the KVM host.", "module": "include_vars", "index": 0, "play_index": 0, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for the KVM host.", "when": "env.z.lpar1.create == True"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for the KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n      when: env.z.lpar1.create == True\n", "line_num_in_file": [8, 12], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml", "undefined_variables": ["env.z.lpar1.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname", "packages", "ssh_key_creation.filename", "ssh_target[0]", "role_path", "hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name", "lpar.networking.nic.card1.name", "lpar.networking.nic.card2.name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar1.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[0]#task:[1]", "name": "Update configuration files for the KVM host.", "module": "import_role", "index": 1, "play_index": 0, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[0]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Update configuration files for the KVM host.", "when": "env.z.lpar1.create == True"}, "module_options": {"name": "update_cfgs"}, "executable": "update_cfgs", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Update configuration files for the KVM host.\n      import_role:\n        name: update_cfgs\n      when: env.z.lpar1.create == True\n\n#Template and update RHEL configuration files for KVM host to boot from", "line_num_in_file": [13, 18], "resolved_name": "update_cfgs", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "update_cfgs", "path": "roles/update_cfgs", "key": "role role:update_cfgs"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname", "packages", "ssh_key_creation.filename", "ssh_target[0]", "role_path", "hmc.host", "cpc_name", "lpar.name", "lpar.storage_group_1.name", "lpar.storage_group_2.name", "lpar.networking.nic.card1.name", "lpar.networking.nic.card2.name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[1]#task:[0]", "name": "Include vars for a second KVM host if it is to be created.", "module": "include_vars", "index": 0, "play_index": 1, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[1]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for a second KVM host if it is to be created.", "when": "env.z.lpar2.create == True"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for a second KVM host if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.create == True\n", "line_num_in_file": [26, 30], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml", "undefined_variables": ["env.z.lpar2.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar2.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[1]#task:[1]", "name": "Update configuration files for a second KVM host, if cluster is to be highly available", "module": "import_role", "index": 1, "play_index": 1, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[1]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Update configuration files for a second KVM host, if cluster is to be highly available", "when": "env.z.lpar2.create == True"}, "module_options": {"name": "update_cfgs"}, "executable": "update_cfgs", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Update configuration files for a second KVM host, if cluster is to be highly available\n      import_role:\n        name: update_cfgs\n      when: env.z.lpar2.create == True\n\n#Template and update RHEL configuration files for KVM host to boot from", "line_num_in_file": [31, 36], "resolved_name": "update_cfgs", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "update_cfgs", "path": "roles/update_cfgs", "key": "role role:update_cfgs"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[2]#task:[0]", "name": "Include vars for third KVM host if it is to be created.", "module": "include_vars", "index": 0, "play_index": 2, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[2]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for third KVM host if it is to be created.", "when": "env.z.lpar3.create == True"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for third KVM host if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.create == True\n", "line_num_in_file": [44, 48], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml", "undefined_variables": ["env.z.lpar3.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar3.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[2]#task:[1]", "name": "Update configuration files for a third KVM host, if cluster is to be highly available", "module": "import_role", "index": 1, "play_index": 2, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[2]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Update configuration files for a third KVM host, if cluster is to be highly available", "when": "env.z.lpar3.create == True"}, "module_options": {"name": "update_cfgs"}, "executable": "update_cfgs", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Update configuration files for a third KVM host, if cluster is to be highly available\n      import_role:\n        name: update_cfgs\n      when: env.z.lpar3.create == True\n", "line_num_in_file": [49, 53], "resolved_name": "update_cfgs", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "update_cfgs", "path": "roles/update_cfgs", "key": "role role:update_cfgs"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[3]#task:[0]", "name": "Include vars for first LPAR if it is to be created.", "module": "include_vars", "index": 0, "play_index": 3, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[3]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for first LPAR if it is to be created.", "when": "env.z.lpar1.create == True"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for first LPAR if it is to be created.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n      when: env.z.lpar1.create == True\n", "line_num_in_file": [59, 63], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml", "undefined_variables": ["env.z.lpar1.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar1.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[3]#task:[1]", "name": "Boot and install RHEL for KVM host", "module": "import_role", "index": 1, "play_index": 3, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[3]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Boot and install RHEL for KVM host", "when": "env.z.lpar1.create == True"}, "module_options": {"name": "create_kvm_host"}, "executable": "create_kvm_host", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Boot and install RHEL for KVM host\n      import_role:\n        name: create_kvm_host\n      when: env.z.lpar1.create == True\n", "line_num_in_file": [64, 68], "resolved_name": "create_kvm_host", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "create_kvm_host", "path": "roles/create_kvm_host", "key": "role role:create_kvm_host"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[4]#task:[0]", "name": "Include vars for second KVM host.", "module": "include_vars", "index": 0, "play_index": 4, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[4]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for second KVM host.", "when": "env.z.lpar2.create == True"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for second KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.create == True\n", "line_num_in_file": [74, 78], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml", "undefined_variables": ["env.z.lpar2.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar2.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[4]#task:[1]", "name": "Boot and install RHEL for a second KVM host.", "module": "import_role", "index": 1, "play_index": 4, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[4]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Boot and install RHEL for a second KVM host.", "when": "env.z.lpar2.create == True"}, "module_options": {"name": "create_kvm_host"}, "executable": "create_kvm_host", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Boot and install RHEL for a second KVM host.\n      import_role:\n        name: create_kvm_host\n      when: env.z.lpar2.create == True\n", "line_num_in_file": [79, 83], "resolved_name": "create_kvm_host", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "create_kvm_host", "path": "roles/create_kvm_host", "key": "role role:create_kvm_host"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[5]#task:[0]", "name": "Include vars for third KVM host.", "module": "include_vars", "index": 0, "play_index": 5, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[5]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for third KVM host.", "when": "env.z.lpar3.create == True"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for third KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.create == True\n", "line_num_in_file": [89, 93], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml", "undefined_variables": ["env.z.lpar3.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar3.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[5]#task:[1]", "name": "Boot and install RHEL for a third KVM host.", "module": "import_role", "index": 1, "play_index": 5, "defined_in": "playbooks/2_create_kvm_host.yaml", "local_key": "task playbook:playbooks/2_create_kvm_host.yaml#play:[5]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Boot and install RHEL for a third KVM host.", "when": "env.z.lpar3.create == True"}, "module_options": {"name": "create_kvm_host"}, "executable": "create_kvm_host", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Boot and install RHEL for a third KVM host.\n      import_role:\n        name: create_kvm_host\n      when: env.z.lpar3.create == True", "line_num_in_file": [94, 98], "resolved_name": "create_kvm_host", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "create_kvm_host", "path": "roles/create_kvm_host", "key": "role role:create_kvm_host"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[0]#task:[0]", "name": "Include vars for the KVM host.", "module": "include_vars", "index": 0, "play_index": 0, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for the KVM host."}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for the KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n", "line_num_in_file": [13, 16], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml", "undefined_variables": ["env.z.lpar1.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar1.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[0]#task:[1]", "name": "Copy SSH key to KVM host.", "module": "import_role", "index": 1, "play_index": 0, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[0]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Copy SSH key to KVM host."}, "module_options": {"name": "ssh_copy_id"}, "executable": "ssh_copy_id", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Copy SSH key to KVM host.\n      import_role:\n        name: ssh_copy_id\n", "line_num_in_file": [17, 20], "resolved_name": "ssh_copy_id", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[1]#task:[0]", "name": "Include vars for second KVM host.", "module": "include_vars", "index": 0, "play_index": 1, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[1]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for second KVM host.", "when": "env.z.lpar2.hostname is defined"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for second KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.hostname is defined\n", "line_num_in_file": [32, 36], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml", "undefined_variables": ["env.z.lpar2.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar2.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[1]#task:[1]", "name": "copy SSH key to second KVM host, if cluster is to be highly available.", "module": "import_role", "index": 1, "play_index": 1, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[1]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "copy SSH key to second KVM host, if cluster is to be highly available.", "tags": "ssh_copy_id, ssh", "when": "env.z.lpar2.hostname is defined"}, "module_options": {"name": "ssh_copy_id"}, "executable": "ssh_copy_id", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: copy SSH key to second KVM host, if cluster is to be highly available.\n      tags: ssh_copy_id, ssh\n      import_role:\n        name: ssh_copy_id\n      when: env.z.lpar2.hostname is defined\n", "line_num_in_file": [37, 42], "resolved_name": "ssh_copy_id", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[2]#task:[0]", "name": "Include vars for third KVM host.", "module": "include_vars", "index": 0, "play_index": 2, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[2]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for third KVM host.", "when": "env.z.lpar3.hostname is defined"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}, "executable": "include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for third KVM host.\n      include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.hostname is defined\n", "line_num_in_file": [54, 58], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml", "undefined_variables": ["env.z.lpar3.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar3.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[2]#task:[1]", "name": "copy SSH key to third KVM host, if cluster is to be highly available.", "module": "import_role", "index": 1, "play_index": 2, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[2]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "copy SSH key to third KVM host, if cluster is to be highly available.", "tags": "ssh_copy_id, ssh", "when": "env.z.lpar3.hostname is defined"}, "module_options": {"name": "ssh_copy_id"}, "executable": "ssh_copy_id", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: copy SSH key to third KVM host, if cluster is to be highly available.\n      tags: ssh_copy_id, ssh\n      import_role:\n        name: ssh_copy_id\n      when: env.z.lpar3.hostname is defined\n", "line_num_in_file": [59, 64], "resolved_name": "ssh_copy_id", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[4]#task:[0]", "name": "Configure ip_forward in case of network \"NAT\"", "module": "ansible.posix.sysctl", "index": 0, "play_index": 4, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[4]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Configure ip_forward in case of network \"NAT\"", "tags": "cfg_ip_forward", "when": "env.network_mode | upper == 'NAT'"}, "module_options": {"name": "net.ipv4.ip_forward", "value": "{{ env.z.ip_forward }}", "sysctl_set": true, "state": "present", "reload": true}, "executable": "ansible.posix.sysctl", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Configure ip_forward in case of network \"NAT\"\n      tags: cfg_ip_forward\n      ansible.posix.sysctl:\n        name: net.ipv4.ip_forward\n        value: \"{{ env.z.ip_forward }}\"\n        sysctl_set: true\n        state: present\n        reload: true\n      when: env.network_mode | upper == 'NAT'\n", "line_num_in_file": [154, 163], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ansible.posix.sysctl", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": ["env.z.ip_forward"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[5]#task:[0]", "name": "Create landing directories on controller for certificates and keys.", "module": "file", "index": 0, "play_index": 5, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[5]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create landing directories on controller for certificates and keys.", "tags": "openvpn", "when": "env.z.high_availability == True"}, "module_options": {"state": "directory", "path": "tmp"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Create landing directories on controller for certificates and keys.\n      tags: openvpn\n      file:\n        state: directory\n        path: tmp\n      when: env.z.high_availability == True\n", "line_num_in_file": [94, 100], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output", "ssh_ocp", "bastion_split_ip", "bootstrap_split_ip", "bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup", "compute_lookup", "infra_lookup", "external_dns_check", "openvpn_role", "_epel_version", "epel_version", "epel_url", "epel_next_url", "epel_gpg_key", "_epel_next", "epel_next", "_openvpn_packages", "openvpn_packages", "_openvpn_easyrsa_path", "openvpn_easyrsa_path", "_openvpn_group", "_openvpn_configuration_directory", "openvpn_configuration_directory", "openvpn_group", "_openvpn_service", "openvpn_service"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[6]#task:[0]", "name": "Fetch certificates and keys from bastion.", "module": "fetch", "index": 0, "play_index": 6, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[6]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["ca.crt", "issued/client.crt", "private/client.key", "ta.key"]}, "options": {"name": "Fetch certificates and keys from bastion.", "tags": "openvpn", "loop": ["ca.crt", "issued/client.crt", "private/client.key", "ta.key"], "when": "env.z.high_availability == True"}, "module_options": {"src": "/etc/openvpn/easy-rsa/pki/{{ item }}", "dest": "tmp/", "flat": true}, "executable": "fetch", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Fetch certificates and keys from bastion.\n      tags: openvpn\n      fetch:\n        src: /etc/openvpn/easy-rsa/pki/{{ item }}\n        dest: tmp/\n        flat: true\n      loop:\n        - ca.crt\n        - issued/client.crt\n        - private/client.key\n        - ta.key\n      when: env.z.high_availability == True\n", "line_num_in_file": [105, 117], "resolved_name": "ansible.builtin.fetch", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "fetch", "fqcn": "ansible.builtin.fetch", "key": "module collection:ansible.builtin#module:ansible.builtin.fetch"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.fetch", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.fetch", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["dest", "fail_on_missing", "flat", "src", "validate_checksum"], "required_arg_keys": [{"key": "dest", "aliases": []}, {"key": "src", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output", "ssh_ocp", "bastion_split_ip", "bootstrap_split_ip", "bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup", "compute_lookup", "infra_lookup", "external_dns_check", "openvpn_role", "_epel_version", "epel_version", "epel_url", "epel_next_url", "epel_gpg_key", "_epel_next", "epel_next", "_openvpn_packages", "openvpn_packages", "_openvpn_easyrsa_path", "openvpn_easyrsa_path", "_openvpn_group", "_openvpn_configuration_directory", "openvpn_configuration_directory", "openvpn_group", "_openvpn_service", "openvpn_service"], "vars_used_in_target_task": ["item"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[8]#task:[0]", "name": "Clean up tmp directories on controller for certificates and keys.", "module": "file", "index": 0, "play_index": 8, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[8]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Clean up tmp directories on controller for certificates and keys.", "tags": "openvpn", "when": "env.z.high_availability == True"}, "module_options": {"state": "absent", "path": "tmp"}, "executable": "file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Clean up tmp directories on controller for certificates and keys.\n      tags: openvpn\n      file:\n        state: absent\n        path: tmp\n      when: env.z.high_availability == True\n", "line_num_in_file": [162, 168], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output", "ssh_ocp", "bastion_split_ip", "bootstrap_split_ip", "bastion_lookup", "services_lookup", "api_int_lookup", "bootstrap_lookup", "control_lookup", "compute_lookup", "infra_lookup", "external_dns_check", "openvpn_role", "_epel_version", "epel_version", "epel_url", "epel_next_url", "epel_gpg_key", "_epel_next", "epel_next", "_openvpn_packages", "openvpn_packages", "_openvpn_easyrsa_path", "openvpn_easyrsa_path", "_openvpn_group", "_openvpn_configuration_directory", "openvpn_configuration_directory", "openvpn_group", "_openvpn_service", "openvpn_service", "openvpn_client_server"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/6_create_nodes.yaml#play:[5]#task:[0]", "name": "Destroy bootstrap. Expect ignored errors if bootstrap is already destroyed.", "module": "community.libvirt.virt", "index": 0, "play_index": 5, "defined_in": "playbooks/6_create_nodes.yaml", "local_key": "task playbook:playbooks/6_create_nodes.yaml#play:[5]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Destroy bootstrap. Expect ignored errors if bootstrap is already destroyed.", "tags": "create_nodes, teardown_bootstrap", "ignore_errors": true}, "module_options": {"name": "{{ env.cluster.nodes.bootstrap.vm_name }}", "command": "destroy"}, "executable": "community.libvirt.virt", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Destroy bootstrap. Expect ignored errors if bootstrap is already destroyed.\n      tags: create_nodes, teardown_bootstrap\n      community.libvirt.virt:\n        name: \"{{ env.cluster.nodes.bootstrap.vm_name }}\"\n        command: destroy\n      ignore_errors: true\n", "line_num_in_file": [60, 66], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.libvirt.virt", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.nodes.bootstrap.vm_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/6_create_nodes.yaml#play:[5]#task:[1]", "name": "Undefine bootstrap. Expect ignored errors if bootstrap is already undefined.", "module": "community.libvirt.virt", "index": 1, "play_index": 5, "defined_in": "playbooks/6_create_nodes.yaml", "local_key": "task playbook:playbooks/6_create_nodes.yaml#play:[5]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Undefine bootstrap. Expect ignored errors if bootstrap is already undefined.", "tags": "create_nodes, teardown_bootstrap", "ignore_errors": true}, "module_options": {"name": "{{ env.cluster.nodes.bootstrap.vm_name }}", "command": "undefine"}, "executable": "community.libvirt.virt", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Undefine bootstrap. Expect ignored errors if bootstrap is already undefined.\n      tags: create_nodes, teardown_bootstrap\n      community.libvirt.virt:\n        name: \"{{ env.cluster.nodes.bootstrap.vm_name }}\"\n        command: undefine\n      ignore_errors: true\n", "line_num_in_file": [67, 73], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "community.libvirt.virt", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": [], "vars_used_in_target_task": ["env.cluster.nodes.bootstrap.vm_name"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[0]#task:[0]", "name": "Setting host", "module": "set_fact", "index": 0, "play_index": 0, "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"host": "kvm_host_hypershift"}, "loop": {}, "options": {"name": "Setting host"}, "module_options": {"host": "kvm_host_hypershift"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Setting host\n      set_fact:\n        host: kvm_host_hypershift", "line_num_in_file": [8, 10], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["host"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[0]#task:[1]", "name": "Install Prereqs on host", "module": "import_role", "index": 1, "play_index": 0, "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[0]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Install Prereqs on host"}, "module_options": {"name": "install_prerequisites_host_hypershift"}, "executable": "install_prerequisites_host_hypershift", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Install Prereqs on host\n      import_role:\n        name: install_prerequisites_host_hypershift\n", "line_num_in_file": [11, 14], "resolved_name": "install_prerequisites_host_hypershift", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "install_prerequisites_host_hypershift", "path": "roles/install_prerequisites_host_hypershift", "key": "role role:install_prerequisites_host_hypershift"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["host"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[1]#task:[0]", "name": "Setting interface name", "module": "set_fact", "index": 0, "play_index": 1, "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[1]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"networking": {"device1": "{{ hypershift.networking_device }}"}}, "loop": {}, "options": {"name": "Setting interface name"}, "module_options": {"networking": {"device1": "{{ hypershift.networking_device }}"}}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Setting interface name\n      set_fact:\n        networking:\n          device1: \"{{ hypershift.networking_device }}\"", "line_num_in_file": [19, 22], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]", "hypershift.mgmt_cluster_nameserver", "api_server", "user_name", "password"], "vars_defined_in_previous_tasks": ["host", "ssh_key", "ssh_key_creation", "oc_installed", "networking"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[1]#task:[1]", "name": "Creating macvtap network", "module": "import_role", "index": 1, "play_index": 1, "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[1]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Creating macvtap network"}, "module_options": {"name": "macvtap"}, "executable": "macvtap", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Creating macvtap network\n      import_role:\n        name: macvtap\n", "line_num_in_file": [23, 26], "resolved_name": "macvtap", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "macvtap", "path": "roles/macvtap", "key": "role role:macvtap"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]", "hypershift.mgmt_cluster_nameserver", "api_server", "user_name", "password"], "vars_defined_in_previous_tasks": ["host", "ssh_key", "ssh_key_creation", "oc_installed", "networking"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[2]#task:[0]", "name": "Creating Bastion", "module": "include_role", "index": 0, "play_index": 2, "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[2]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Creating Bastion", "when": "hypershift.create_bastion == true"}, "module_options": {"name": "create_bastion_hypershift"}, "executable": "create_bastion_hypershift", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Creating Bastion\n      include_role:\n        name: create_bastion_hypershift\n      when: hypershift.create_bastion == true\n", "line_num_in_file": [33, 37], "resolved_name": "create_bastion_hypershift", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "create_bastion_hypershift", "path": "roles/create_bastion_hypershift", "key": "role role:create_bastion_hypershift"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]", "hypershift.mgmt_cluster_nameserver", "api_server", "user_name", "password", "env.bridge_name", "lookup('template','macvtap.xml.j2')"], "vars_defined_in_previous_tasks": ["host", "ssh_key", "ssh_key_creation", "oc_installed", "networking"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[0]", "name": "Setting host", "module": "set_fact", "index": 0, "play_index": 3, "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {"host": "bastion_hypershift"}, "loop": {}, "options": {"name": "Setting host"}, "module_options": {"host": "bastion_hypershift"}, "executable": "set_fact", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Setting host\n      set_fact:\n        host: bastion_hypershift\n", "line_num_in_file": [44, 47], "resolved_name": "ansible.builtin.set_fact", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "set_fact", "fqcn": "ansible.builtin.set_fact", "key": "module collection:ansible.builtin#module:ansible.builtin.set_fact"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.set_fact", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.set_fact", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": [], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]", "hypershift.mgmt_cluster_nameserver", "api_server", "user_name", "password", "env.bridge_name", "lookup('template','macvtap.xml.j2')", "lookup('env','HOME')", "ssh_output.stdout_lines[0]", "bastion_root_pw", "ssh_key", "hypershift.hcp.hosted_cluster_name", "hypershift.bastion_parms.os_variant", "env.file_server.protocol", "env.file_server.user+':'+env.file_server.pass+'@'ifenv.file_server.protocol=='ftp'else''", "env.file_server.ip", "env.file_server.iso_mount_dir", "hypershift.bastion_hypershift", "hypershift.bastion_parms.gateway", "hypershift.bastion_parms.subnet_mask", "hypershift.bastion_parms.hostname", "hypershift.bastion_parms.base_domain", "hypershift.bastion_parms.interface", "hypershift.bastion_parms.nameserver", "hypershift.gateway"], "vars_defined_in_previous_tasks": ["host", "ssh_key", "ssh_key_creation", "oc_installed", "networking", "ssh_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[1]", "name": "Install Prereqs", "module": "import_role", "index": 1, "play_index": 3, "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Install Prereqs"}, "module_options": {"name": "install_prerequisites_host_hypershift"}, "executable": "install_prerequisites_host_hypershift", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Install Prereqs\n      import_role:\n        name: install_prerequisites_host_hypershift\n", "line_num_in_file": [48, 51], "resolved_name": "install_prerequisites_host_hypershift", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "install_prerequisites_host_hypershift", "path": "roles/install_prerequisites_host_hypershift", "key": "role role:install_prerequisites_host_hypershift"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]", "hypershift.mgmt_cluster_nameserver", "api_server", "user_name", "password", "env.bridge_name", "lookup('template','macvtap.xml.j2')", "lookup('env','HOME')", "ssh_output.stdout_lines[0]", "bastion_root_pw", "ssh_key", "hypershift.hcp.hosted_cluster_name", "hypershift.bastion_parms.os_variant", "env.file_server.protocol", "env.file_server.user+':'+env.file_server.pass+'@'ifenv.file_server.protocol=='ftp'else''", "env.file_server.ip", "env.file_server.iso_mount_dir", "hypershift.bastion_hypershift", "hypershift.bastion_parms.gateway", "hypershift.bastion_parms.subnet_mask", "hypershift.bastion_parms.hostname", "hypershift.bastion_parms.base_domain", "hypershift.bastion_parms.interface", "hypershift.bastion_parms.nameserver", "hypershift.gateway"], "vars_defined_in_previous_tasks": ["host", "ssh_key", "ssh_key_creation", "oc_installed", "networking", "ssh_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[2]", "name": "Configure Bastion", "module": "import_role", "index": 2, "play_index": 3, "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[2]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Configure Bastion"}, "module_options": {"name": "install_prereqs_bastion_hypershift"}, "executable": "install_prereqs_bastion_hypershift", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Configure Bastion\n      import_role:\n        name: install_prereqs_bastion_hypershift\n", "line_num_in_file": [52, 55], "resolved_name": "install_prereqs_bastion_hypershift", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "install_prereqs_bastion_hypershift", "path": "roles/install_prereqs_bastion_hypershift", "key": "role role:install_prereqs_bastion_hypershift"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["env.ansible_key_name", "item", "env.pkgs.kvm", "env.pkgs.hypershift", "hypershift.oc_url", "hypershift.oc_url.split('/')[-1]", "hypershift.mgmt_cluster_nameserver", "api_server", "user_name", "password", "env.bridge_name", "lookup('template','macvtap.xml.j2')", "lookup('env','HOME')", "ssh_output.stdout_lines[0]", "bastion_root_pw", "ssh_key", "hypershift.hcp.hosted_cluster_name", "hypershift.bastion_parms.os_variant", "env.file_server.protocol", "env.file_server.user+':'+env.file_server.pass+'@'ifenv.file_server.protocol=='ftp'else''", "env.file_server.ip", "env.file_server.iso_mount_dir", "hypershift.bastion_hypershift", "hypershift.bastion_parms.gateway", "hypershift.bastion_parms.subnet_mask", "hypershift.bastion_parms.hostname", "hypershift.bastion_parms.base_domain", "hypershift.bastion_parms.interface", "hypershift.bastion_parms.nameserver", "hypershift.gateway"], "vars_defined_in_previous_tasks": ["host", "ssh_key", "ssh_key_creation", "oc_installed", "networking", "ssh_output"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[3]", "name": "Add ansible SSH key to ssh-agent", "module": "import_role", "index": 3, "play_index": 3, "defined_in": "playbooks/create_hosted_cluster.yaml", "local_key": "task playbook:playbooks/create_hosted_cluster.yaml#play:[3]#task:[3]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add ansible SSH key to ssh-agent"}, "module_options": {"name": "ssh_agent"}, "executable": "ssh_agent", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Add ansible SSH key to ssh-agent\n      import_role:\n        name: ssh_agent\n", "line_num_in_file": [56, 59], "resolved_name": "ssh_agent", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "ssh_agent", "path": "roles/ssh_agent", "key": "role role:ssh_agent"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.import_role", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.import_role", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["host", "ssh_key", "ssh_key_creation", "oc_installed", "networking", "ssh_output", "mgmt_workers_count", "mgmt_workers"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/reinstall_cluster.yaml#play:[1]#task:[0]", "name": "Include vars for the KVM host", "module": "ansible.builtin.include_vars", "index": 0, "play_index": 1, "defined_in": "playbooks/reinstall_cluster.yaml", "local_key": "task playbook:playbooks/reinstall_cluster.yaml#play:[1]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for the KVM host"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}, "executable": "ansible.builtin.include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for the KVM host\n      ansible.builtin.include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n", "line_num_in_file": [25, 28], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml", "undefined_variables": ["env.z.lpar1.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path"], "vars_defined_in_previous_tasks": ["ssh_target", "ssh_copy"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar1.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/reinstall_cluster.yaml#play:[1]#task:[1]", "name": "Copy SSH key to KVM host", "module": "ansible.builtin.import_role", "index": 1, "play_index": 1, "defined_in": "playbooks/reinstall_cluster.yaml", "local_key": "task playbook:playbooks/reinstall_cluster.yaml#play:[1]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Copy SSH key to KVM host"}, "module_options": {"name": "ssh_copy_id"}, "executable": "ssh_copy_id", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: Copy SSH key to KVM host\n      ansible.builtin.import_role:\n        name: ssh_copy_id\n", "line_num_in_file": [29, 32], "resolved_name": "ssh_copy_id", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path", "env.z.lpar1.hostname"], "vars_defined_in_previous_tasks": ["ssh_target", "ssh_copy"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/reinstall_cluster.yaml#play:[2]#task:[0]", "name": "Include vars for second KVM host", "module": "ansible.builtin.include_vars", "index": 0, "play_index": 2, "defined_in": "playbooks/reinstall_cluster.yaml", "local_key": "task playbook:playbooks/reinstall_cluster.yaml#play:[2]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for second KVM host", "when": "env.z.lpar2.hostname is defined"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}, "executable": "ansible.builtin.include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for second KVM host\n      ansible.builtin.include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.hostname is defined\n", "line_num_in_file": [44, 48], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml", "undefined_variables": ["env.z.lpar2.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path", "env.z.lpar1.hostname"], "vars_defined_in_previous_tasks": ["ssh_target", "ssh_copy"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar2.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/reinstall_cluster.yaml#play:[2]#task:[1]", "name": "copy SSH key to second KVM host, if cluster is to be highly available", "module": "ansible.builtin.import_role", "index": 1, "play_index": 2, "defined_in": "playbooks/reinstall_cluster.yaml", "local_key": "task playbook:playbooks/reinstall_cluster.yaml#play:[2]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "copy SSH key to second KVM host, if cluster is to be highly available", "when": "env.z.lpar2.hostname is defined"}, "module_options": {"name": "ssh_copy_id"}, "executable": "ssh_copy_id", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: copy SSH key to second KVM host, if cluster is to be highly available\n      ansible.builtin.import_role:\n        name: ssh_copy_id\n      when: env.z.lpar2.hostname is defined\n", "line_num_in_file": [49, 53], "resolved_name": "ssh_copy_id", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path", "env.z.lpar1.hostname", "env.z.lpar2.hostname"], "vars_defined_in_previous_tasks": ["ssh_target", "ssh_copy"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/reinstall_cluster.yaml#play:[3]#task:[0]", "name": "Include vars for third KVM host", "module": "ansible.builtin.include_vars", "index": 0, "play_index": 3, "defined_in": "playbooks/reinstall_cluster.yaml", "local_key": "task playbook:playbooks/reinstall_cluster.yaml#play:[3]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Include vars for third KVM host", "when": "env.z.lpar3.hostname is defined"}, "module_options": {"file": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}, "executable": "ansible.builtin.include_vars", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Include vars for third KVM host\n      ansible.builtin.include_vars:\n        file: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.hostname is defined\n", "line_num_in_file": [65, 69], "resolved_name": "ansible.builtin.include_vars", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "include_vars", "fqcn": "ansible.builtin.include_vars", "key": "module collection:ansible.builtin#module:ansible.builtin.include_vars"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.include_vars", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.include_vars", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["depth", "dir", "extensions", "file", "files_matching", "free-form", "hash_behaviour", "ignore_files", "ignore_unknown_extensions", "name"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "file", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml", "undefined_variables": ["env.z.lpar3.hostname"]}], "unknown_type_values": [{"key": "file", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path", "env.z.lpar1.hostname", "env.z.lpar2.hostname"], "vars_defined_in_previous_tasks": ["ssh_target", "ssh_copy"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar3.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/reinstall_cluster.yaml#play:[3]#task:[1]", "name": "copy SSH key to third KVM host, if cluster is to be highly available", "module": "ansible.builtin.import_role", "index": 1, "play_index": 3, "defined_in": "playbooks/reinstall_cluster.yaml", "local_key": "task playbook:playbooks/reinstall_cluster.yaml#play:[3]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "copy SSH key to third KVM host, if cluster is to be highly available", "when": "env.z.lpar3.hostname is defined"}, "module_options": {"name": "ssh_copy_id"}, "executable": "ssh_copy_id", "executable_type": "Role", "collections_in_play": [], "yaml_lines": "    - name: copy SSH key to third KVM host, if cluster is to be highly available\n      ansible.builtin.import_role:\n        name: ssh_copy_id\n      when: env.z.lpar3.hostname is defined\n", "line_num_in_file": [70, 74], "resolved_name": "ssh_copy_id", "possible_candidates": [], "module_info": {}, "include_info": {"type": "role", "fqcn": "ssh_copy_id", "path": "roles/ssh_copy_id", "key": "role role:ssh_copy_id"}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": false, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["inventory_dir", "ssh_target[0]", "role_path", "env.z.lpar1.hostname", "env.z.lpar2.hostname", "env.z.lpar3.hostname"], "vars_defined_in_previous_tasks": ["ssh_target", "ssh_copy"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/test.yaml#play:[0]#task:[0]", "name": "Test variables or anything here", "module": "debug", "index": 0, "play_index": 0, "defined_in": "playbooks/test.yaml", "local_key": "task playbook:playbooks/test.yaml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Test variables or anything here"}, "module_options": {"msg": "{{ test_var }}"}, "executable": "debug", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Test variables or anything here\n      debug:\n        msg: \"{{ test_var }}\"", "line_num_in_file": [7, 10], "resolved_name": "ansible.builtin.debug", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "debug", "fqcn": "ansible.builtin.debug", "key": "module collection:ansible.builtin#module:ansible.builtin.debug"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.debug", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.debug", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["msg", "var", "verbosity"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["test_var"], "vars_used_in_target_task": ["test_var"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[0]", "name": "Ensure Ansible Galaxy collections have been installed.", "module": "command", "index": 0, "play_index": 0, "defined_in": "playbooks/0_setup.yaml", "local_key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": "{{ env.pkgs.galaxy }}"}, "options": {"name": "Ensure Ansible Galaxy collections have been installed.", "tags": "galaxy", "loop": "{{ env.pkgs.galaxy }}"}, "module_options": "ansible-galaxy collection install {{ item }}", "executable": "command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Ensure Ansible Galaxy collections have been installed.\n      tags: galaxy\n      command: ansible-galaxy collection install {{ item }}\n      loop: \"{{ env.pkgs.galaxy }}\"\n", "line_num_in_file": [11, 15], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check"], "vars_used_in_target_task": ["item", "env.pkgs.galaxy"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[1]", "name": "Find ibm_zhmc collection install location, if automated LPAR creation is to be used.", "module": "shell", "index": 1, "play_index": 0, "defined_in": "playbooks/0_setup.yaml", "local_key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"zhmc_path": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[1]"}, "set_facts": {}, "loop": {}, "options": {"name": "Find ibm_zhmc collection install location, if automated LPAR creation is to be used.", "tags": "galaxy", "register": "zhmc_path", "when": "env.z.lpar1.create == True or env.z.lpar2.create == True or env.z.lpar3.create == True"}, "module_options": "ansible-galaxy collection list ibm.ibm_zhmc | grep -i ansible | cut -c 3-", "executable": "shell", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Find ibm_zhmc collection install location, if automated LPAR creation is to be used.\n      tags: galaxy\n      shell: ansible-galaxy collection list ibm.ibm_zhmc | grep -i ansible | cut -c 3-\n      register: zhmc_path\n      when: env.z.lpar1.create == True or env.z.lpar2.create == True or env.z.lpar3.create == True\n", "line_num_in_file": [16, 21], "resolved_name": "ansible.builtin.shell", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "shell", "fqcn": "ansible.builtin.shell", "key": "module collection:ansible.builtin#module:ansible.builtin.shell"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.shell", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.shell", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "cmd", "creates", "executable", "free_form", "removes", "stdin", "stdin_add_newline"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[2]", "name": "Ensure zhmcclient requirements are installed.", "module": "pip", "index": 2, "play_index": 0, "defined_in": "playbooks/0_setup.yaml", "local_key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[2]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure zhmcclient requirements are installed.", "tags": "galaxy", "when": "env.z.lpar1.create == True or env.z.lpar2.create == True or env.z.lpar3.create == True"}, "module_options": {"requirements": "{{ zhmc_path.stdout }}/ibm/ibm_zhmc/requirements.txt", "executable": "pip3", "extra_args": "--upgrade"}, "executable": "pip", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Ensure zhmcclient requirements are installed.\n      tags: galaxy\n      pip:\n        requirements: \"{{ zhmc_path.stdout }}/ibm/ibm_zhmc/requirements.txt\"\n        executable: pip3\n        extra_args: --upgrade\n      when: env.z.lpar1.create == True or env.z.lpar2.create == True or env.z.lpar3.create == True\n", "line_num_in_file": [22, 29], "resolved_name": "ansible.builtin.pip", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "pip", "fqcn": "ansible.builtin.pip", "key": "module collection:ansible.builtin#module:ansible.builtin.pip"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.pip", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.pip", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["chdir", "editable", "executable", "extra_args", "name", "requirements", "state", "umask", "version", "virtualenv", "virtualenv_command", "virtualenv_python", "virtualenv_site_packages"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "requirements", "value": "{{ zhmc_path.stdout }}/ibm/ibm_zhmc/requirements.txt", "undefined_variables": ["zhmc_path.stdout"]}], "unknown_type_values": [{"key": "requirements", "expected_type": "str", "unknown_type_value": "{{ zhmc_path.stdout }}/ibm/ibm_zhmc/requirements.txt"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path"], "vars_used_in_target_task": ["zhmc_path.stdout"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[3]", "name": "Check to make sure that the KVM host has a corresponding inventory host_vars file named with matching hostname and .yaml extension.", "module": "stat", "index": 3, "play_index": 0, "defined_in": "playbooks/0_setup.yaml", "local_key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[3]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"lpar_host_vars": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[3]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check to make sure that the KVM host has a corresponding inventory host_vars file named with matching hostname and .yaml extension.", "tags": "lpar_check", "when": "env.z.lpar1.hostname is defined", "register": "lpar_host_vars", "failed_when": "lpar_host_vars.stat.exists == False"}, "module_options": {"path": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Check to make sure that the KVM host has a corresponding inventory host_vars file named with matching hostname and .yaml extension.\n      tags: lpar_check\n      stat:\n        path: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml\"\n      when: env.z.lpar1.hostname is defined\n      register: lpar_host_vars\n      failed_when: lpar_host_vars.stat.exists == False\n", "line_num_in_file": [30, 37], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "stat", "fqcn": "ansible.builtin.stat", "key": "module collection:ansible.builtin#module:ansible.builtin.stat"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml", "undefined_variables": ["env.z.lpar1.hostname"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar1.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[4]", "name": "Check to make sure the second KVM hosts have a corresponding inventory host_vars file named with matching hostname and .yaml extension, if defined.", "module": "stat", "index": 4, "play_index": 0, "defined_in": "playbooks/0_setup.yaml", "local_key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[4]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"lpar_host_vars": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[4]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check to make sure the second KVM hosts have a corresponding inventory host_vars file named with matching hostname and .yaml extension, if defined.", "tags": "lpar_check", "when": "env.z.lpar2.hostname is defined", "register": "lpar_host_vars", "failed_when": "lpar_host_vars.stat.exists == False"}, "module_options": {"path": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Check to make sure the second KVM hosts have a corresponding inventory host_vars file named with matching hostname and .yaml extension, if defined.\n      tags: lpar_check\n      stat:\n        path: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml\"\n      when: env.z.lpar2.hostname is defined\n      register: lpar_host_vars\n      failed_when: lpar_host_vars.stat.exists == False\n", "line_num_in_file": [38, 45], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "stat", "fqcn": "ansible.builtin.stat", "key": "module collection:ansible.builtin#module:ansible.builtin.stat"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml", "undefined_variables": ["env.z.lpar2.hostname"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar2.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[5]", "name": "Check to make sure the third KVM hosts have a corresponding inventory host_vars file named with matching hostname and .yaml extension, if defined.", "module": "stat", "index": 5, "play_index": 0, "defined_in": "playbooks/0_setup.yaml", "local_key": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[5]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {"lpar_host_vars": "task playbook:playbooks/0_setup.yaml#play:[0]#task:[5]"}, "set_facts": {}, "loop": {}, "options": {"name": "Check to make sure the third KVM hosts have a corresponding inventory host_vars file named with matching hostname and .yaml extension, if defined.", "tags": "lpar_check", "when": "env.z.lpar3.hostname is defined", "register": "lpar_host_vars", "failed_when": "lpar_host_vars.stat.exists == False"}, "module_options": {"path": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}, "executable": "stat", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Check to make sure the third KVM hosts have a corresponding inventory host_vars file named with matching hostname and .yaml extension, if defined.\n      tags: lpar_check\n      stat:\n        path: \"{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml\"\n      when: env.z.lpar3.hostname is defined\n      register: lpar_host_vars\n      failed_when: lpar_host_vars.stat.exists == False\n", "line_num_in_file": [46, 53], "resolved_name": "ansible.builtin.stat", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "stat", "fqcn": "ansible.builtin.stat", "key": "module collection:ansible.builtin#module:ansible.builtin.stat"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.stat", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.stat", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["checksum_algorithm", "checksum", "checksum_algo", "follow", "get_attributes", "attr", "attributes", "get_checksum", "get_mime", "mime", "mime_type", "mime-type", "path", "dest", "name"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [{"key": "path", "value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml", "undefined_variables": ["env.z.lpar3.hostname"]}], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": ["ansible_config_file", "find_project.stdout", "find_inventory.stdout", "env.ansible_key_name", "item", "env.pkgs.galaxy", "zhmc_path.stdout", "inventory_dir", "env.z.lpar1.hostname", "env.z.lpar2.hostname"], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars"], "vars_used_in_target_task": ["inventory_dir", "env.z.lpar3.hostname"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[0]", "name": "Add ports to firewall", "module": "ansible.posix.firewalld", "index": 0, "play_index": 3, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[0]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Add ports to firewall", "tags": "firewall-libvirt, libvirt"}, "module_options": {"port": "80/tcp", "permanent": true, "state": "enabled"}, "executable": "ansible.posix.firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Add ports to firewall\n      tags: firewall-libvirt, libvirt\n      ansible.posix.firewalld:\n        port: 80/tcp\n        permanent: true\n        state: enabled\n", "line_num_in_file": [77, 83], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ansible.posix.firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[1]", "name": "Start and enable libvirt", "module": "ansible.builtin.service", "index": 1, "play_index": 3, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[1]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Start and enable libvirt", "tags": "firewall-libvirt, libvirt"}, "module_options": {"name": "libvirtd", "enabled": true, "state": "started"}, "executable": "ansible.builtin.service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Start and enable libvirt\n      tags: firewall-libvirt, libvirt\n      ansible.builtin.service:\n        name: libvirtd\n        enabled: true\n        state: started\n", "line_num_in_file": [84, 90], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[2]", "name": "Permit traffic in libvirt zone", "module": "ansible.posix.firewalld", "index": 2, "play_index": 3, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[2]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Permit traffic in libvirt zone", "tags": "firewall-libvirt, libvirt"}, "module_options": {"service": "http", "permanent": true, "state": "enabled", "zone": "libvirt", "immediate": true}, "executable": "ansible.posix.firewalld", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Permit traffic in libvirt zone\n      tags: firewall-libvirt, libvirt\n      ansible.posix.firewalld:\n        service: http\n        permanent: true\n        state: enabled\n        zone: libvirt\n        immediate: true\n", "line_num_in_file": [91, 99], "resolved_name": "", "possible_candidates": [], "module_info": {}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "", "need_correction": true, "wrong_module_name": "ansible.posix.firewalld", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "", "not_exist": true, "wrong_arg_keys": null, "available_arg_keys": null, "required_arg_keys": null, "used_alias_and_real_keys": null, "wrong_arg_values": null, "undefined_values": null, "unknown_type_values": null, "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[3]", "name": "Set libvirt management to libvirt group instead of root.", "module": "ansible.builtin.lineinfile", "index": 3, "play_index": 3, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[3]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Set libvirt management to libvirt group instead of root.", "tags": "libvirt"}, "module_options": {"path": "/etc/libvirt/qemu.conf", "regexp": "#group = \"root\"", "line": "group = \"libvirt\"", "backup": true}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Set libvirt management to libvirt group instead of root.\n      tags: libvirt\n      ansible.builtin.lineinfile:\n        path: /etc/libvirt/qemu.conf\n        regexp: '#group = \"root\"'\n        line: group = \"libvirt\"\n        backup: true\n", "line_num_in_file": [100, 107], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[4]", "name": "Create file for user's custom libvirt configurations.", "module": "ansible.builtin.file", "index": 4, "play_index": 3, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[4]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Create file for user's custom libvirt configurations.", "tags": "libvirt"}, "module_options": {"path": "/home/{{ ansible_user }}/.config/libvirt/libvirt.conf", "state": "touch", "owner": "{{ ansible_user }}", "group": "{{ ansible_user }}"}, "executable": "ansible.builtin.file", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Create file for user's custom libvirt configurations.\n      tags: libvirt\n      ansible.builtin.file:\n        path: /home/{{ ansible_user }}/.config/libvirt/libvirt.conf\n        state: touch\n        owner: \"{{ ansible_user }}\"\n        group: \"{{ ansible_user }}\"\n", "line_num_in_file": [108, 115], "resolved_name": "ansible.builtin.file", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "file", "fqcn": "ansible.builtin.file", "key": "module collection:ansible.builtin#module:ansible.builtin.file"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.file", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.file", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["access_time", "access_time_format", "attributes", "attr", "follow", "force", "group", "mode", "modification_time", "modification_time_format", "owner", "path", "dest", "name", "recurse", "selevel", "serole", "setype", "seuser", "src", "state", "unsafe_writes"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "path", "expected_type": "str", "unknown_type_value": "/home/{{ ansible_user }}/.config/libvirt/libvirt.conf"}, {"key": "owner", "expected_type": "str", "unknown_type_value": "{{ ansible_user }}"}, {"key": "group", "expected_type": "str", "unknown_type_value": "{{ ansible_user }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": ["ansible_user"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[5]", "name": "Set default uri connection to qemu:///system.", "module": "ansible.builtin.lineinfile", "index": 5, "play_index": 3, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[5]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {"item": ["/etc/libvirt/qemu.conf", "/home/{{ ansible_user }}/.config/libvirt/libvirt.conf", "/etc/libvirt/libvirt.conf"]}, "options": {"name": "Set default uri connection to qemu:///system.", "tags": "libvirt", "loop": ["/etc/libvirt/qemu.conf", "/home/{{ ansible_user }}/.config/libvirt/libvirt.conf", "/etc/libvirt/libvirt.conf"]}, "module_options": {"path": "{{ item }}", "regexp": "#uri_default = \"qemu:///system\"", "line": "uri_default = \"qemu:///system\"", "backup": true}, "executable": "ansible.builtin.lineinfile", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Set default uri connection to qemu:///system.\n      tags: libvirt\n      ansible.builtin.lineinfile:\n        path: \"{{ item }}\"\n        regexp: '#uri_default = \"qemu:///system\"'\n        line: uri_default = \"qemu:///system\"\n        backup: true\n      loop:\n        - /etc/libvirt/qemu.conf\n        - /home/{{ ansible_user }}/.config/libvirt/libvirt.conf\n        - /etc/libvirt/libvirt.conf\n", "line_num_in_file": [116, 127], "resolved_name": "ansible.builtin.lineinfile", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "lineinfile", "fqcn": "ansible.builtin.lineinfile", "key": "module collection:ansible.builtin#module:ansible.builtin.lineinfile"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.lineinfile", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.lineinfile", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["attributes", "attr", "backrefs", "backup", "create", "firstmatch", "group", "insertafter", "insertbefore", "line", "value", "mode", "others", "owner", "path", "dest", "destfile", "name", "regexp", "regex", "search_string", "selevel", "serole", "setype", "seuser", "state", "unsafe_writes", "validate"], "required_arg_keys": [{"key": "path", "aliases": ["dest", "destfile", "name"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": ["item", "ansible_user"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[6]", "name": "Ensure KVM admin user is part of groups 'kvm', 'libvirt'.", "module": "ansible.builtin.user", "index": 6, "play_index": 3, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[6]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Ensure KVM admin user is part of groups 'kvm', 'libvirt'.", "tags": "groups, group, libvirt"}, "module_options": {"name": "{{ ansible_user }}", "append": true, "groups": "kvm,libvirt"}, "executable": "ansible.builtin.user", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Ensure KVM admin user is part of groups 'kvm', 'libvirt'.\n      tags: groups, group, libvirt\n      ansible.builtin.user:\n        name: \"{{ ansible_user }}\"\n        append: true\n        groups: kvm,libvirt\n", "line_num_in_file": [128, 134], "resolved_name": "ansible.builtin.user", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "user", "fqcn": "ansible.builtin.user", "key": "module collection:ansible.builtin#module:ansible.builtin.user"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.user", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.user", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["append", "authorization", "comment", "create_home", "createhome", "expires", "force", "generate_ssh_key", "group", "groups", "hidden", "home", "local", "login_class", "move_home", "name", "user", "non_unique", "password", "password_expire_max", "password_expire_min", "password_lock", "profile", "remove", "role", "seuser", "shell", "skeleton", "ssh_key_bits", "ssh_key_comment", "ssh_key_file", "ssh_key_passphrase", "ssh_key_type", "state", "system", "uid", "umask", "update_password"], "required_arg_keys": [{"key": "name", "aliases": ["user"]}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [{"key": "name", "expected_type": "str", "unknown_type_value": "{{ ansible_user }}"}], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": ["ansible_user"]}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[7]", "name": "Restart libvirt", "module": "ansible.builtin.service", "index": 7, "play_index": 3, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[7]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Restart libvirt", "tags": "firewall-libvirt, libvirt"}, "module_options": {"name": "libvirtd", "enabled": true, "state": "restarted"}, "executable": "ansible.builtin.service", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Restart libvirt\n      tags: firewall-libvirt, libvirt\n      ansible.builtin.service:\n        name: libvirtd\n        enabled: true\n        state: restarted\n", "line_num_in_file": [135, 141], "resolved_name": "ansible.builtin.service", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "service", "fqcn": "ansible.builtin.service", "key": "module collection:ansible.builtin#module:ansible.builtin.service"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.service", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.service", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["arguments", "args", "enabled", "name", "pattern", "runlevel", "sleep", "state", "use"], "required_arg_keys": [{"key": "name", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[8]", "name": "Enable cockpit console", "module": "ansible.builtin.command", "index": 8, "play_index": 3, "defined_in": "playbooks/3_setup_kvm_host.yaml", "local_key": "task playbook:playbooks/3_setup_kvm_host.yaml#play:[3]#task:[8]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {"name": "Enable cockpit console", "tags": "cockpit"}, "module_options": "systemctl enable --now cockpit.socket", "executable": "ansible.builtin.command", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - name: Enable cockpit console\n      tags: cockpit\n      ansible.builtin.command: systemctl enable --now cockpit.socket\n", "line_num_in_file": [142, 145], "resolved_name": "ansible.builtin.command", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "command", "fqcn": "ansible.builtin.command", "key": "module collection:ansible.builtin#module:ansible.builtin.command"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.command", "need_correction": false, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.command", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["argv", "chdir", "cmd", "creates", "free_form", "removes", "stdin", "stdin_add_newline", "strip_empty_ends"], "required_arg_keys": [], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration"], "vars_used_in_target_task": []}}, {"py/object": "ansible_risk_insight.models.Task", "type": "task", "key": "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[3]", "name": "", "module": "meta", "index": 3, "play_index": 1, "defined_in": "playbooks/5_setup_bastion.yaml", "local_key": "task playbook:playbooks/5_setup_bastion.yaml#play:[1]#task:[3]", "role": "", "collection": "", "become": null, "variables": {}, "module_defaults": {}, "registered_variables": {}, "set_facts": {}, "loop": {}, "options": {}, "module_options": "clear_facts", "executable": "meta", "executable_type": "Module", "collections_in_play": [], "yaml_lines": "    - meta: clear_facts\n", "line_num_in_file": [45, 46], "resolved_name": "ansible.builtin.meta", "possible_candidates": [], "module_info": {"collection": "ansible.builtin", "short_name": "meta", "fqcn": "ansible.builtin.meta", "key": "module collection:ansible.builtin#module:ansible.builtin.meta"}, "include_info": {}, "scan_path": "/var/tmp/Ansible-OpenShift-Provisioning", "annotations": {"correct_fqcn": "ansible.builtin.meta", "need_correction": true, "wrong_module_name": "", "suggested_fqcn": [], "suggested_dependency": [], "resolved_fqcn": "ansible.builtin.meta", "not_exist": false, "wrong_arg_keys": [], "available_arg_keys": ["free_form"], "required_arg_keys": [{"key": "free_form", "aliases": []}], "used_alias_and_real_keys": [], "wrong_arg_values": [], "undefined_values": [], "unknown_type_values": [], "undefined_vars": null, "unknown_name_vars": null, "unnecessary_loop_vars": null, "vars_used_in_previous_tasks": [], "vars_defined_in_previous_tasks": ["find_inventory", "find_project", "inv_check", "zhmc_path", "lpar_host_vars", "packages", "ssh_target", "ssh_directory_exists_check", "ssh_directory_creation", "ssh_key_creation", "ssh_agent_setup", "ssh_copy", "create_lpar", "sglparattach", "nic1", "nic2", "ins_dir", "nic_child_list", "root_pass_hash", "user_pass_hash", "_create_instances", "_jobs", "registration", "_vm_console", "kvm_host_home", "cmd_output"], "vars_used_in_target_task": []}}]}, "mappings": {"py/object": "ansible_risk_insight.models.Load", "target_name": "/var/tmp/Ansible-OpenShift-Provisioning", "target_type": "project", "path": "/var/tmp/Ansible-OpenShift-Provisioning", "loader_version": "0.1.10", "playbook_yaml": "", "playbook_only": false, "taskfile_yaml": "", "taskfile_only": false, "base_dir": "/var/tmp/Ansible-OpenShift-Provisioning", "include_test_contents": true, "timestamp": "2023-08-15T17:35:42.024151", "roles": [["roles/add_hc_workers_to_haproxy_hypershift", "role role:add_hc_workers_to_haproxy_hypershift"], ["roles/approve_certs", "role role:approve_certs"], ["roles/attach_subscription", "role role:attach_subscription"], ["roles/boot_agents_hypershift", "role role:boot_agents_hypershift"], ["roles/check_dns", "role role:check_dns"], ["roles/check_nodes", "role role:check_nodes"], ["roles/common", "role role:common"], ["roles/configure_storage", "role role:configure_storage"], ["roles/create_agentserviceconfig_hypershift", "role role:create_agentserviceconfig_hypershift"], ["roles/create_bastion", "role role:create_bastion"], ["roles/create_bastion_hypershift", "role role:create_bastion_hypershift"], ["roles/create_bootstrap", "role role:create_bootstrap"], ["roles/create_compute_node", "role role:create_compute_node"], ["roles/create_compute_nodes", "role role:create_compute_nodes"], ["roles/create_control_nodes", "role role:create_control_nodes"], ["roles/create_hcp_InfraEnv_hypershift", "role role:create_hcp_InfraEnv_hypershift"], ["roles/create_inventory_setup_hypershift", "role role:create_inventory_setup_hypershift"], ["roles/create_kvm_host", "role role:create_kvm_host"], ["roles/create_lpar", "role role:create_lpar"], ["roles/delete_compute_node", "role role:delete_compute_node"], ["roles/delete_nodes", "role role:delete_nodes"], ["roles/delete_resources_bastion_hypershift", "role role:delete_resources_bastion_hypershift"], ["roles/delete_resources_kvm_host_hypershift", "role role:delete_resources_kvm_host_hypershift"], ["roles/dns", "role role:dns"], ["roles/dns_update", "role role:dns_update"], ["roles/download_rootfs_hypershift", "role role:download_rootfs_hypershift"], ["roles/get_ocp", "role role:get_ocp"], ["roles/haproxy", "role role:haproxy"], ["roles/httpd", "role role:httpd"], ["roles/install_mce_operator", "role role:install_mce_operator"], ["roles/install_packages", "role role:install_packages"], ["roles/install_prereqs_bastion_hypershift", "role role:install_prereqs_bastion_hypershift"], ["roles/install_prerequisites_host_hypershift", "role role:install_prerequisites_host_hypershift"], ["roles/macvtap", "role role:macvtap"], ["roles/prep_kvm_guests", "role role:prep_kvm_guests"], ["roles/print_node_status", "role role:print_node_status"], ["roles/robertdebock.epel", "role role:robertdebock.epel"], ["roles/robertdebock.openvpn", "role role:robertdebock.openvpn"], ["roles/scale_nodepool_and_wait_for_workers_hypershift", "role role:scale_nodepool_and_wait_for_workers_hypershift"], ["roles/set_firewall", "role role:set_firewall"], ["roles/set_inventory", "role role:set_inventory"], ["roles/setup_for_agents_hypershift", "role role:setup_for_agents_hypershift"], ["roles/ssh_add_config", "role role:ssh_add_config"], ["roles/ssh_agent", "role role:ssh_agent"], ["roles/ssh_copy_id", "role role:ssh_copy_id"], ["roles/ssh_key_gen", "role role:ssh_key_gen"], ["roles/ssh_ocp_key_gen", "role role:ssh_ocp_key_gen"], ["roles/update_cfgs", "role role:update_cfgs"], ["roles/update_ignition_files", "role role:update_ignition_files"], ["roles/wait_for_bootstrap", "role role:wait_for_bootstrap"], ["roles/wait_for_cluster_operators", "role role:wait_for_cluster_operators"], ["roles/wait_for_hc_to_complete_hypershift", "role role:wait_for_hc_to_complete_hypershift"], ["roles/wait_for_install_complete", "role role:wait_for_install_complete"], ["roles/wait_for_node", "role role:wait_for_node"]], "playbooks": [["playbooks/0_setup.yaml", "playbook playbook:playbooks/0_setup.yaml"], ["playbooks/1_create_lpar.yaml", "playbook playbook:playbooks/1_create_lpar.yaml"], ["playbooks/2_create_kvm_host.yaml", "playbook playbook:playbooks/2_create_kvm_host.yaml"], ["playbooks/3_setup_kvm_host.yaml", "playbook playbook:playbooks/3_setup_kvm_host.yaml"], ["playbooks/4_create_bastion.yaml", "playbook playbook:playbooks/4_create_bastion.yaml"], ["playbooks/5_setup_bastion.yaml", "playbook playbook:playbooks/5_setup_bastion.yaml"], ["playbooks/6_create_nodes.yaml", "playbook playbook:playbooks/6_create_nodes.yaml"], ["playbooks/7_ocp_verification.yaml", "playbook playbook:playbooks/7_ocp_verification.yaml"], ["playbooks/create_agents_and_wait_for_install_complete.yaml", "playbook playbook:playbooks/create_agents_and_wait_for_install_complete.yaml"], ["playbooks/create_compute_node.yaml", "playbook playbook:playbooks/create_compute_node.yaml"], ["playbooks/create_hosted_cluster.yaml", "playbook playbook:playbooks/create_hosted_cluster.yaml"], ["playbooks/delete_compute_node.yaml", "playbook playbook:playbooks/delete_compute_node.yaml"], ["playbooks/destroy_cluster_hypershift.yaml", "playbook playbook:playbooks/destroy_cluster_hypershift.yaml"], ["playbooks/hypershift.yaml", "playbook playbook:playbooks/hypershift.yaml"], ["playbooks/pre-existing_site.yaml", "playbook playbook:playbooks/pre-existing_site.yaml"], ["playbooks/reinstall_cluster.yaml", "playbook playbook:playbooks/reinstall_cluster.yaml"], ["playbooks/setup_for_hypershift.yaml", "playbook playbook:playbooks/setup_for_hypershift.yaml"], ["playbooks/site.yaml", "playbook playbook:playbooks/site.yaml"], ["playbooks/test.yaml", "playbook playbook:playbooks/test.yaml"]], "taskfiles": [], "modules": []}}, "ext_definitions": {}, "extra_requirements": [], "resolve_failures": {"module": {"community.general.homebrew": 9, "community.crypto.openssh_keypair": 16, "ibm.ibm_zhmc.zhmc_partition": 14, "ibm.ibm_zhmc.zhmc_storage_group_attachment": 14, "ibm.ibm_zhmc.zhmc_nic": 14, "community.general.redhat_subscription": 6, "selinux_permissive": 10, "community.general.seport": 6, "ansible.posix.firewalld": 8, "ansible.posix.sysctl": 2, "community.libvirt.virt_pool": 9, "community.libvirt.virt_net": 15, "firewalld": 25, "community.libvirt.virt": 10, "k8s_info": 24, "ansible.posix.seboolean": 3, "k8s": 24, "kubernetes.core.k8s_info": 3, "kubernetes.core.k8s_cp": 3}, "taskfile": {"{{ openvpn_role }}.yml": 7, "{{ role_path }}/../common/tasks/print_ocp_node_status.yaml": 13, "{{ param_dns_cmd }}.yaml": 3}, "role": {}}, "prm": {}, "report": {}, "summary_txt": "", "scan_time": "2023-08-15T17:35:57.036930"}
{"py/object": "ansible_risk_insight.findings.Findings", "metadata": {"type": "taskfile", "name": "/var/tmp/Ansible-OpenShift-Provisioning/roles/prep_kvm_guests/tasks/main.yaml", "version": "", "source": "", "download_url": "", "hash": "", "time_records": {"scandata_init": {"begin": "2023-08-15T17:35:57.046375", "end": "2023-08-15T17:35:57.046826", "elapsed": 0.000451}, "metadata_load": {"begin": "2023-08-15T17:35:57.046834", "end": "2023-08-15T17:35:57.046956", "elapsed": 0.000122}, "dependency_load": {"begin": "2023-08-15T17:35:57.046960", "end": "2023-08-15T17:35:57.046962", "elapsed": 2e-06}, "prm_load": {"begin": "2023-08-15T17:35:57.046964", "end": "2023-08-15T17:35:57.046964", "elapsed": 0.0}, "target_load": {"begin": "2023-08-15T17:35:57.046966", "end": "2023-08-15T17:35:57.046967", "elapsed": 1e-06}, "apply_spec_rules": {"begin": "2023-08-15T17:35:57.048241", "end": "2023-08-15T17:35:57.048243", "elapsed": 2e-06}, "tree_construction": {"begin": "2023-08-15T17:35:57.048247", "end": "2023-08-15T17:35:57.048345", "elapsed": 9.8e-05}, "variable_resolution": {"begin": "2023-08-15T17:35:57.048347", "end": "2023-08-15T17:35:57.048369", "elapsed": 2.2e-05}, "module_annotators": {"begin": "2023-08-15T17:35:57.048371", "end": "2023-08-15T17:35:57.048379", "elapsed": 8e-06}, "apply_rules": {"begin": "2023-08-15T17:35:57.048381", "end": "2023-08-15T17:35:57.048427", "elapsed": 4.6e-05}}}, "dependencies": [], "root_definitions": {"definitions": {"collections": [], "projects": [], "roles": [], "taskfiles": [{"py/object": "ansible_risk_insight.models.TaskFile", "type": "taskfile", "key": "taskfile taskfile:roles/prep_kvm_guests/tasks/main.yaml", "name": "main.yaml", "defined_in": "roles/prep_kvm_guests/tasks/main.yaml", "local_key": "taskfile taskfile:roles/prep_kvm_guests/tasks/main.yaml", "tasks": [], "role": "", "collection": "", "yaml_lines": null, "used_in": [], "annotations": {}, "variables": {}, "module_defaults": {}, "options": {}, "task_loading": {}}], "modules": [], "playbooks": [], "plays": [], "tasks": []}, "mappings": {"py/object": "ansible_risk_insight.models.Load", "target_name": "/var/tmp/Ansible-OpenShift-Provisioning/roles/prep_kvm_guests/tasks/main.yaml", "target_type": "taskfile", "path": "/var/tmp/Ansible-OpenShift-Provisioning/roles/prep_kvm_guests/tasks/main.yaml", "loader_version": "0.1.10", "playbook_yaml": "", "playbook_only": true, "taskfile_yaml": "", "taskfile_only": true, "base_dir": "/var/tmp/Ansible-OpenShift-Provisioning", "include_test_contents": true, "timestamp": "2023-08-15T17:35:57.048133", "roles": [], "playbooks": [], "taskfiles": [["roles/prep_kvm_guests/tasks/main.yaml", "taskfile taskfile:roles/prep_kvm_guests/tasks/main.yaml"]], "modules": []}}, "ext_definitions": {}, "extra_requirements": [], "resolve_failures": {"module": {}, "taskfile": {}, "role": {}}, "prm": {}, "report": {}, "summary_txt": "", "scan_time": "2023-08-15T17:35:57.048423"}
